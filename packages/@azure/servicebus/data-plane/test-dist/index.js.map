{"version":3,"file":"index.js","sources":["../node_modules/assertion-error/index.js","../node_modules/pathval/index.js","../node_modules/chai/lib/chai/utils/flag.js","../node_modules/chai/lib/chai/utils/test.js","../node_modules/type-detect/type-detect.js","../node_modules/chai/lib/chai/utils/expectTypes.js","../node_modules/chai/lib/chai/utils/getActual.js","../node_modules/get-func-name/index.js","../node_modules/chai/lib/chai/utils/getProperties.js","../node_modules/chai/lib/chai/utils/getEnumerableProperties.js","../node_modules/chai/lib/chai/config.js","../node_modules/chai/lib/chai/utils/inspect.js","../node_modules/chai/lib/chai/utils/objDisplay.js","../node_modules/chai/lib/chai/utils/getMessage.js","../node_modules/chai/lib/chai/utils/transferFlags.js","../node_modules/deep-eql/index.js","../node_modules/chai/lib/chai/utils/isProxyEnabled.js","../node_modules/chai/lib/chai/utils/addProperty.js","../node_modules/chai/lib/chai/utils/addLengthGuard.js","../node_modules/chai/lib/chai/utils/proxify.js","../node_modules/chai/lib/chai/utils/addMethod.js","../node_modules/chai/lib/chai/utils/overwriteProperty.js","../node_modules/chai/lib/chai/utils/overwriteMethod.js","../node_modules/chai/lib/chai/utils/addChainableMethod.js","../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","../node_modules/chai/lib/chai/utils/compareByInspect.js","../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","../node_modules/check-error/index.js","../node_modules/chai/lib/chai/utils/isNaN.js","../node_modules/chai/lib/chai/utils/index.js","../node_modules/chai/lib/chai/assertion.js","../node_modules/chai/lib/chai/core/assertions.js","../node_modules/chai/lib/chai/interface/expect.js","../node_modules/chai/lib/chai/interface/should.js","../node_modules/chai/lib/chai/interface/assert.js","../node_modules/chai/lib/chai.js","../node_modules/chai/index.js","../node_modules/chai-as-promised/lib/chai-as-promised.js","../node_modules/dotenv/lib/main.js","../lib/log.ts","../lib/util/constants.ts","../lib/connectionContext.ts","../lib/util/utils.ts","../lib/core/linkEntity.ts","../lib/serviceBusMessage.ts","../lib/session/messageSession.ts","../lib/core/messageSender.ts","../lib/sender.ts","../lib/core/messageReceiver.ts","../lib/core/streamingReceiver.ts","../lib/core/batchingReceiver.ts","../lib/receiver.ts","../lib/core/managementClient.ts","../lib/util/concurrentExpiringMap.ts","../lib/util/semaphore.ts","../lib/session/sessionManager.ts","../lib/clientEntityContext.ts","../lib/queueClient.ts","../lib/topicClient.ts","../lib/subscriptionClient.ts","../lib/namespace.ts","../lib/index.ts","../test/testUtils.ts","../test/batchReceiver.spec.ts","../test/deferredMessage.spec.ts","../test/namespace.spec.ts","../test/receiveAndDeleteMode.spec.ts","../test/renewLock.spec.ts","../test/renewLockSessions.spec.ts","../test/samples.spec.ts","../test/sendSchedule.spec.ts","../test/sessionsTests.spec.ts","../test/streamingReceiver.spec.ts","../test/streamingReceiverSessions.spec.ts","../test/topicFilters.spec.ts","../test/userIssue1466.spec.ts"],"sourcesContent":["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === (pathDepth - 1)) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === (pathDepth - 1)) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still' ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'object tested must be an array, a map, an object,'\n              + ' a set, a string, or a weakset, but ' + objType + ' given',\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that its not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The alias `.gte` can be used interchangeably with `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The alias `.lte` can be used interchangeably with `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but its not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers',\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.2.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","module.exports = require('./lib/chai');\n","\"use strict\";\n/* eslint-disable no-invalid-this */\nlet checkError = require(\"check-error\");\n\nmodule.exports = (chai, utils) => {\n    const Assertion = chai.Assertion;\n    const assert = chai.assert;\n    const proxify = utils.proxify;\n\n    // If we are using a version of Chai that has checkError on it,\n    // we want to use that version to be consistent. Otherwise, we use\n    // what was passed to the factory.\n    if (utils.checkError) {\n        checkError = utils.checkError;\n    }\n\n    function isLegacyJQueryPromise(thenable) {\n        // jQuery promises are Promises/A+-compatible since 3.0.0. jQuery 3.0.0 is also the first version\n        // to define the catch method.\n        return typeof thenable.catch !== \"function\" &&\n               typeof thenable.always === \"function\" &&\n               typeof thenable.done === \"function\" &&\n               typeof thenable.fail === \"function\" &&\n               typeof thenable.pipe === \"function\" &&\n               typeof thenable.progress === \"function\" &&\n               typeof thenable.state === \"function\";\n    }\n\n    function assertIsAboutPromise(assertion) {\n        if (typeof assertion._obj.then !== \"function\") {\n            throw new TypeError(utils.inspect(assertion._obj) + \" is not a thenable.\");\n        }\n        if (isLegacyJQueryPromise(assertion._obj)) {\n            throw new TypeError(\"Chai as Promised is incompatible with thenables of jQuery<3.0.0, sorry! Please \" +\n                                \"upgrade jQuery or use another Promises/A+ compatible library (see \" +\n                                \"http://promisesaplus.com/).\");\n        }\n    }\n\n    function proxifyIfSupported(assertion) {\n        return proxify === undefined ? assertion : proxify(assertion);\n    }\n\n    function method(name, asserter) {\n        utils.addMethod(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return asserter.apply(this, arguments);\n        });\n    }\n\n    function property(name, asserter) {\n        utils.addProperty(Assertion.prototype, name, function () {\n            assertIsAboutPromise(this);\n            return proxifyIfSupported(asserter.apply(this, arguments));\n        });\n    }\n\n    function doNotify(promise, done) {\n        promise.then(() => done(), done);\n    }\n\n    // These are for clarity and to bypass Chai refusing to allow `undefined` as actual when used with `assert`.\n    function assertIfNegated(assertion, message, extra) {\n        assertion.assert(true, null, message, extra.expected, extra.actual);\n    }\n\n    function assertIfNotNegated(assertion, message, extra) {\n        assertion.assert(false, message, null, extra.expected, extra.actual);\n    }\n\n    function getBasePromise(assertion) {\n        // We need to chain subsequent asserters on top of ones in the chain already (consider\n        // `eventually.have.property(\"foo\").that.equals(\"bar\")`), only running them after the existing ones pass.\n        // So the first base-promise is `assertion._obj`, but after that we use the assertions themselves, i.e.\n        // previously derived promises, to chain off of.\n        return typeof assertion.then === \"function\" ? assertion : assertion._obj;\n    }\n\n    function getReasonName(reason) {\n        return reason instanceof Error ? reason.toString() : checkError.getConstructorName(reason);\n    }\n\n    // Grab these first, before we modify `Assertion.prototype`.\n\n    const propertyNames = Object.getOwnPropertyNames(Assertion.prototype);\n\n    const propertyDescs = {};\n    for (const name of propertyNames) {\n        propertyDescs[name] = Object.getOwnPropertyDescriptor(Assertion.prototype, name);\n    }\n\n    property(\"fulfilled\", function () {\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                assertIfNegated(this,\n                                \"expected promise not to be fulfilled but it was fulfilled with #{act}\",\n                                { actual: value });\n                return value;\n            },\n            reason => {\n                assertIfNotNegated(this,\n                                   \"expected promise to be fulfilled but it was rejected with #{act}\",\n                                   { actual: getReasonName(reason) });\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    property(\"rejected\", function () {\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                assertIfNotNegated(this,\n                                   \"expected promise to be rejected but it was fulfilled with #{act}\",\n                                   { actual: value });\n                return value;\n            },\n            reason => {\n                assertIfNegated(this,\n                                \"expected promise not to be rejected but it was rejected with #{act}\",\n                                { actual: getReasonName(reason) });\n\n                // Return the reason, transforming this into a fulfillment, to allow further assertions, e.g.\n                // `promise.should.be.rejected.and.eventually.equal(\"reason\")`.\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    method(\"rejectedWith\", function (errorLike, errMsgMatcher, message) {\n        let errorLikeName = null;\n        const negate = utils.flag(this, \"negate\") || false;\n\n        // rejectedWith with that is called without arguments is\n        // the same as a plain \".rejected\" use.\n        if (errorLike === undefined && errMsgMatcher === undefined &&\n            message === undefined) {\n            /* eslint-disable no-unused-expressions */\n            return this.rejected;\n            /* eslint-enable no-unused-expressions */\n        }\n\n        if (message !== undefined) {\n            utils.flag(this, \"message\", message);\n        }\n\n        if (errorLike instanceof RegExp || typeof errorLike === \"string\") {\n            errMsgMatcher = errorLike;\n            errorLike = null;\n        } else if (errorLike && errorLike instanceof Error) {\n            errorLikeName = errorLike.toString();\n        } else if (typeof errorLike === \"function\") {\n            errorLikeName = checkError.getConstructorName(errorLike);\n        } else {\n            errorLike = null;\n        }\n        const everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n\n        let matcherRelation = \"including\";\n        if (errMsgMatcher instanceof RegExp) {\n            matcherRelation = \"matching\";\n        }\n\n        const derivedPromise = getBasePromise(this).then(\n            value => {\n                let assertionMessage = null;\n                let expected = null;\n\n                if (errorLike) {\n                    assertionMessage = \"expected promise to be rejected with #{exp} but it was fulfilled with #{act}\";\n                    expected = errorLikeName;\n                } else if (errMsgMatcher) {\n                    assertionMessage = `expected promise to be rejected with an error ${matcherRelation} #{exp} but ` +\n                                       `it was fulfilled with #{act}`;\n                    expected = errMsgMatcher;\n                }\n\n                assertIfNotNegated(this, assertionMessage, { expected, actual: value });\n                return value;\n            },\n            reason => {\n                const errorLikeCompatible = errorLike && (errorLike instanceof Error ?\n                                                        checkError.compatibleInstance(reason, errorLike) :\n                                                        checkError.compatibleConstructor(reason, errorLike));\n\n                const errMsgMatcherCompatible = errMsgMatcher && checkError.compatibleMessage(reason, errMsgMatcher);\n\n                const reasonName = getReasonName(reason);\n\n                if (negate && everyArgIsDefined) {\n                    if (errorLikeCompatible && errMsgMatcherCompatible) {\n                        this.assert(true,\n                                    null,\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n                } else {\n                    if (errorLike) {\n                        this.assert(errorLikeCompatible,\n                                    \"expected promise to be rejected with #{exp} but it was rejected with #{act}\",\n                                    \"expected promise not to be rejected with #{exp} but it was rejected \" +\n                                    \"with #{act}\",\n                                    errorLikeName,\n                                    reasonName);\n                    }\n\n                    if (errMsgMatcher) {\n                        this.assert(errMsgMatcherCompatible,\n                                    `expected promise to be rejected with an error ${matcherRelation} #{exp} but got ` +\n                                    `#{act}`,\n                                    `expected promise not to be rejected with an error ${matcherRelation} #{exp}`,\n                                    errMsgMatcher,\n                                    checkError.getMessage(reason));\n                    }\n                }\n\n                return reason;\n            }\n        );\n\n        module.exports.transferPromiseness(this, derivedPromise);\n        return this;\n    });\n\n    property(\"eventually\", function () {\n        utils.flag(this, \"eventually\", true);\n        return this;\n    });\n\n    method(\"notify\", function (done) {\n        doNotify(getBasePromise(this), done);\n        return this;\n    });\n\n    method(\"become\", function (value, message) {\n        return this.eventually.deep.equal(value, message);\n    });\n\n    // ### `eventually`\n\n    // We need to be careful not to trigger any getters, thus `Object.getOwnPropertyDescriptor` usage.\n    const methodNames = propertyNames.filter(name => {\n        return name !== \"assert\" && typeof propertyDescs[name].value === \"function\";\n    });\n\n    methodNames.forEach(methodName => {\n        Assertion.overwriteMethod(methodName, originalMethod => function () {\n            return doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n        });\n    });\n\n    const getterNames = propertyNames.filter(name => {\n        return name !== \"_obj\" && typeof propertyDescs[name].get === \"function\";\n    });\n\n    getterNames.forEach(getterName => {\n        // Chainable methods are things like `an`, which can work both for `.should.be.an.instanceOf` and as\n        // `should.be.an(\"object\")`. We need to handle those specially.\n        const isChainableMethod = Assertion.prototype.__methods.hasOwnProperty(getterName);\n\n        if (isChainableMethod) {\n            Assertion.overwriteChainableMethod(\n                getterName,\n                originalMethod => function () {\n                    return doAsserterAsyncAndAddThen(originalMethod, this, arguments);\n                },\n                originalGetter => function () {\n                    return doAsserterAsyncAndAddThen(originalGetter, this);\n                }\n            );\n        } else {\n            Assertion.overwriteProperty(getterName, originalGetter => function () {\n                return proxifyIfSupported(doAsserterAsyncAndAddThen(originalGetter, this));\n            });\n        }\n    });\n\n    function doAsserterAsyncAndAddThen(asserter, assertion, args) {\n        // Since we're intercepting all methods/properties, we need to just pass through if they don't want\n        // `eventually`, or if we've already fulfilled the promise (see below).\n        if (!utils.flag(assertion, \"eventually\")) {\n            asserter.apply(assertion, args);\n            return assertion;\n        }\n\n        const derivedPromise = getBasePromise(assertion).then(value => {\n            // Set up the environment for the asserter to actually run: `_obj` should be the fulfillment value, and\n            // now that we have the value, we're no longer in \"eventually\" mode, so we won't run any of this code,\n            // just the base Chai code that we get to via the short-circuit above.\n            assertion._obj = value;\n            utils.flag(assertion, \"eventually\", false);\n\n            return args ? module.exports.transformAsserterArgs(args) : args;\n        }).then(newArgs => {\n            asserter.apply(assertion, newArgs);\n\n            // Because asserters, for example `property`, can change the value of `_obj` (i.e. change the \"object\"\n            // flag), we need to communicate this value change to subsequent chained asserters. Since we build a\n            // promise chain paralleling the asserter chain, we can use it to communicate such changes.\n            return assertion._obj;\n        });\n\n        module.exports.transferPromiseness(assertion, derivedPromise);\n        return assertion;\n    }\n\n    // ### Now use the `Assertion` framework to build an `assert` interface.\n    const originalAssertMethods = Object.getOwnPropertyNames(assert).filter(propName => {\n        return typeof assert[propName] === \"function\";\n    });\n\n    assert.isFulfilled = (promise, message) => (new Assertion(promise, message)).to.be.fulfilled;\n\n    assert.isRejected = (promise, errorLike, errMsgMatcher, message) => {\n        const assertion = new Assertion(promise, message);\n        return assertion.to.be.rejectedWith(errorLike, errMsgMatcher, message);\n    };\n\n    assert.becomes = (promise, value, message) => assert.eventually.deepEqual(promise, value, message);\n\n    assert.doesNotBecome = (promise, value, message) => assert.eventually.notDeepEqual(promise, value, message);\n\n    assert.eventually = {};\n    originalAssertMethods.forEach(assertMethodName => {\n        assert.eventually[assertMethodName] = function (promise) {\n            const otherArgs = Array.prototype.slice.call(arguments, 1);\n\n            let customRejectionHandler;\n            const message = arguments[assert[assertMethodName].length - 1];\n            if (typeof message === \"string\") {\n                customRejectionHandler = reason => {\n                    throw new chai.AssertionError(`${message}\\n\\nOriginal reason: ${utils.inspect(reason)}`);\n                };\n            }\n\n            const returnedPromise = promise.then(\n                fulfillmentValue => assert[assertMethodName].apply(assert, [fulfillmentValue].concat(otherArgs)),\n                customRejectionHandler\n            );\n\n            returnedPromise.notify = done => {\n                doNotify(returnedPromise, done);\n            };\n\n            return returnedPromise;\n        };\n    });\n};\n\nmodule.exports.transferPromiseness = (assertion, promise) => {\n    assertion.then = promise.then.bind(promise);\n};\n\nmodule.exports.transformAsserterArgs = values => values;\n","/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split('\\n').forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(/^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n\n      // default undefined or missing values to empty string\n      let value = keyValueArr[2] || ''\n\n      // expand newlines in quoted values\n      const len = value ? value.length : 0\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n')\n      }\n\n      // remove any surrounding quotes and extra spaces\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\n\n      obj[key] = value\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.load = config\nmodule.exports.parse = parse\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport debugModule from \"debug\";\r\n/**\r\n * @internal\r\n * log statements for linkEntity\r\n */\r\nexport const link = debugModule(\"azure:service-bus:linkEntity\");\r\n/**\r\n * @internal\r\n * log statements for error\r\n */\r\nexport const error = debugModule(\"azure:service-bus:error\");\r\n/**\r\n * @internal\r\n * log statements for management\r\n */\r\nexport const mgmt = debugModule(\"azure:service-bus:management\");\r\n/**\r\n * @internal\r\n * log statements for sender\r\n */\r\nexport const sender = debugModule(\"azure:service-bus:sender\");\r\n/**\r\n * @internal\r\n * log statements for receiver\r\n */\r\nexport const receiver = debugModule(\"azure:service-bus:receiver\");\r\n/**\r\n * @internal\r\n * log statements for receiverbatching\r\n */\r\nexport const batching = debugModule(\"azure:service-bus:receiverbatching\");\r\n/**\r\n * @internal\r\n * log statements for receiverstreaming\r\n */\r\nexport const streaming = debugModule(\"azure:service-bus:receiverstreaming\");\r\n/**\r\n * @internal\r\n * log statements for connectionContext\r\n */\r\nexport const connectionCtxt = debugModule(\"azure:service-bus:connectionContext\");\r\n/**\r\n * @internal\r\n * log statements for clientEntityContext\r\n */\r\nexport const entityCtxt = debugModule(\"azure:service-bus:clientEntityContext\");\r\n/**\r\n * @internal\r\n * log statements for queue client\r\n */\r\nexport const qClient = debugModule(\"azure:service-bus:queueClient\");\r\n/**\r\n * @internal\r\n * log statements for topic client\r\n */\r\nexport const topicClient = debugModule(\"azure:service-bus:topicClient\");\r\n/**\r\n * @internal\r\n * log statements for subscription client\r\n */\r\nexport const subscriptionClient = debugModule(\"azure:service-bus:subscriptionClient\");\r\n/**\r\n * @internal\r\n * log statements for namespace\r\n */\r\nexport const ns = debugModule(\"azure:service-bus:namespace\");\r\n/**\r\n * @internal\r\n * log statements for servicebusMessage\r\n */\r\nexport const message = debugModule(\"azure:service-bus:servicebusMessage\");\r\n/**\r\n * @internal\r\n * log statements for map\r\n */\r\nexport const map = debugModule(\"azure:service-bus:concurrentMap\");\r\n/**\r\n * @internal\r\n * log statements for utils\r\n */\r\nexport const utils = debugModule(\"azure:service-bus:utils\");\r\n/**\r\n * @internal\r\n * log statements for messageSession\r\n */\r\nexport const messageSession = debugModule(\"azure:service-bus:messageSession\");\r\n/**\r\n * @internal\r\n * log statements for semaphore\r\n */\r\nexport const semaphore = debugModule(\"azure:service-bus:semaphore\");\r\n/**\r\n * @internal\r\n * log statements for sessionManager\r\n */\r\nexport const sessionManager = debugModule(\"azure:service-bus:sessionManager\");\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const packageJsonInfo = {\r\n  name: \"@azure/service-bus\",\r\n  version: \"1.0.0-preview.1\"\r\n};\r\n\r\nexport const messageDispositionTimeout = 20000;\r\n\r\nexport const max32BitNumber = Math.pow(2, 31) - 1;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as log from \"./log\";\r\nimport * as os from \"os\";\r\nimport { packageJsonInfo } from \"./util/constants\";\r\nimport {\r\n  ConnectionConfig,\r\n  Constants,\r\n  ConnectionContextBase,\r\n  CreateConnectionContextBaseParameters,\r\n  Dictionary,\r\n  delay,\r\n  TokenProvider\r\n} from \"@azure/amqp-common\";\r\nimport { NamespaceOptions } from \"./namespace\";\r\nimport { Client } from \"./client\";\r\nimport { OnAmqpEvent, EventContext, ConnectionEvents } from \"rhea-promise\";\r\n\r\n/**\r\n * @internal\r\n * @interface ConnectionContext\r\n * Provides contextual information like the underlying amqp connection, cbs session, management session,\r\n * tokenProvider, senders, receivers, etc. about the ServiceBus client.\r\n */\r\nexport interface ConnectionContext extends ConnectionContextBase {\r\n  /**\r\n   * @property {Dictionary<Client>} [clients] A dictionary of servicebus entities for the\r\n   * given amqp connection.\r\n   */\r\n  clients: Dictionary<Client>;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport namespace ConnectionContext {\r\n  /**\r\n   * @property {string} userAgent The user agent string for the ServiceBus client.\r\n   * azure-sdk-for-js/azure-<package-name>/<package-version> (NODE-VERSION <node-version>; <os-type> <os-version>)\r\n   */\r\n  export const userAgent: string = `azure-sdk-for-js/azure-service-bus/${\r\n    packageJsonInfo.version\r\n  } (NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\r\n\r\n  export function create(\r\n    config: ConnectionConfig,\r\n    tokenProvider: TokenProvider,\r\n    options?: NamespaceOptions\r\n  ): ConnectionContext {\r\n    if (!options) options = {};\r\n    const parameters: CreateConnectionContextBaseParameters = {\r\n      config: config,\r\n      tokenProvider: tokenProvider,\r\n      dataTransformer: options.dataTransformer,\r\n      isEntityPathRequired: false,\r\n      connectionProperties: {\r\n        product: \"MSJSClient\",\r\n        userAgent: userAgent,\r\n        version: packageJsonInfo.version\r\n      }\r\n    };\r\n    // Let us create the base context and then add ServiceBus specific ConnectionContext properties.\r\n    const connectionContext = ConnectionContextBase.create(parameters) as ConnectionContext;\r\n    connectionContext.clients = {};\r\n\r\n    // Define listeners to be added to the connection object for\r\n    // \"connection_open\" and \"connection_error\" events.\r\n    const onConnectionOpen: OnAmqpEvent = (context: EventContext) => {\r\n      connectionContext.wasConnectionCloseCalled = false;\r\n      log.connectionCtxt(\r\n        \"[%s] setting 'wasConnectionCloseCalled' property of connection context to %s.\",\r\n        connectionContext.connection.id,\r\n        connectionContext.wasConnectionCloseCalled\r\n      );\r\n    };\r\n\r\n    const disconnected: OnAmqpEvent = async (context: EventContext) => {\r\n      const connectionError =\r\n        context.connection && context.connection.error ? context.connection.error : undefined;\r\n      if (connectionError) {\r\n        log.error(\r\n          \"[%s] Error (context.connection.error) occurred on the amqp connection: %O\",\r\n          connectionContext.connection.id,\r\n          connectionError\r\n        );\r\n      }\r\n      const contextError = context.error;\r\n      if (contextError) {\r\n        log.error(\r\n          \"[%s] Error (context.error) occurred on the amqp connection: %O\",\r\n          connectionContext.connection.id,\r\n          contextError\r\n        );\r\n      }\r\n      const state: Readonly<{\r\n        wasConnectionCloseCalled: boolean;\r\n        numClients: number;\r\n      }> = {\r\n        wasConnectionCloseCalled: connectionContext.wasConnectionCloseCalled,\r\n        numClients: Object.keys(connectionContext.clients).length\r\n      };\r\n      // The connection should always be brought back up if the sdk did not call connection.close()\r\n      // and there was atleast one sender/receiver link on the connection before it went down.\r\n      log.error(\"[%s] state: %O\", connectionContext.connectionId, state);\r\n      if (!state.wasConnectionCloseCalled && state.numClients) {\r\n        log.error(\r\n          \"[%s] connection.close() was not called from the sdk and there were some \" +\r\n            \"clients. We should reconnect.\",\r\n          connectionContext.connection.id\r\n        );\r\n        await delay(Constants.connectionReconnectDelay);\r\n        // reconnect clients if any\r\n        for (const id of Object.keys(connectionContext.clients)) {\r\n          const client = connectionContext.clients[id];\r\n          log.error(\r\n            \"[%s] calling detached on client '%s'.\",\r\n            connectionContext.connection.id,\r\n            client.id\r\n          );\r\n          client.detached(connectionError || contextError).catch((err) => {\r\n            log.error(\r\n              \"[%s] An error occurred while reconnecting the sender '%s': %O.\",\r\n              connectionContext.connection.id,\r\n              client.id,\r\n              err\r\n            );\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    // Add listeners on the connection object.\r\n    connectionContext.connection.on(ConnectionEvents.connectionOpen, onConnectionOpen);\r\n    connectionContext.connection.on(ConnectionEvents.disconnected, disconnected);\r\n\r\n    log.connectionCtxt(\r\n      \"[%s] Created connection context successfully.\",\r\n      connectionContext.connectionId\r\n    );\r\n\r\n    return connectionContext;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from \"long\";\r\nimport * as log from \"../log\";\r\nimport { generate_uuid } from \"rhea-promise\";\r\nimport { isBuffer } from \"util\";\r\nimport { ConnectionContext } from \"../connectionContext\";\r\n\r\n// This is the only dependency we have on DOM types, so rather than require\r\n// the DOM lib we can just shim this in.\r\ninterface Navigator {\r\n  hardwareConcurrency: number;\r\n}\r\ndeclare var navigator: Navigator;\r\n\r\n/**\r\n * A constant that indicates whether the environment is node.js or browser based.\r\n */\r\nexport const isNode = typeof navigator === \"undefined\" && typeof process !== \"undefined\";\r\n\r\n/**\r\n * @internal\r\n * Provides a uniue name by appending a string guid to the given string in the following format:\r\n * `{name}-{uuid}`.\r\n * @param name The nme of the entity\r\n */\r\nexport function getUniqueName(name: string): string {\r\n  if (typeof name !== \"string\") {\r\n    throw new Error(\"name is a required parameter of type 'string'.\");\r\n  }\r\n  return `${name}-${generate_uuid()}`;\r\n}\r\n\r\n/**\r\n * If you try to turn a Guid into a Buffer in .NET, the bytes of the first three groups get\r\n * flipped within the group, but the last two groups don't get flipped, so we end up with a\r\n * different byte order. This is the order of bytes needed to make Service Bus recognize the token.\r\n *\r\n * @param lockToken The lock token whose bytes need to be reorded.\r\n * @returns Buffer - Buffer representing reordered bytes.\r\n */\r\nexport function reorderLockToken(lockTokenBytes: Buffer): Buffer {\r\n  if (!lockTokenBytes || !Buffer.isBuffer(lockTokenBytes)) {\r\n    throw new Error(\"'lockToken' is a required parameter and must be of type 'Buffer'.\");\r\n  }\r\n\r\n  return Buffer.from([\r\n    lockTokenBytes[3],\r\n    lockTokenBytes[2],\r\n    lockTokenBytes[1],\r\n    lockTokenBytes[0],\r\n\r\n    lockTokenBytes[5],\r\n    lockTokenBytes[4],\r\n\r\n    lockTokenBytes[7],\r\n    lockTokenBytes[6],\r\n\r\n    lockTokenBytes[8],\r\n    lockTokenBytes[9],\r\n\r\n    lockTokenBytes[10],\r\n    lockTokenBytes[11],\r\n    lockTokenBytes[12],\r\n    lockTokenBytes[13],\r\n    lockTokenBytes[14],\r\n    lockTokenBytes[15]\r\n  ]);\r\n}\r\n\r\n/**\r\n * @internal\r\n * Provides the time in milliseconds after which the lock renewal should occur.\r\n * @param lockedUntilUtc - The time until which the message is locked.\r\n */\r\nexport function calculateRenewAfterDuration(lockedUntilUtc: Date): number {\r\n  const now = Date.now();\r\n  const lockedUntil = lockedUntilUtc.getTime();\r\n  const remainingTime = lockedUntil - now;\r\n  log.utils(\"Locked until utc  : %d\", lockedUntil);\r\n  log.utils(\"Current time is   : %d\", now);\r\n  log.utils(\"Remaining time is : %d\", remainingTime);\r\n  if (remainingTime < 1000) {\r\n    return 0;\r\n  }\r\n  const buffer = Math.min(remainingTime / 2, 10000); // 10 seconds\r\n  const renewAfter = remainingTime - buffer;\r\n  log.utils(\"Renew after       : %d\", renewAfter);\r\n  return renewAfter;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Converts the .net ticks to a JS Date object.\r\n *\r\n * - The epoch for the DateTimeOffset type is `0000-01-01`, while the epoch for JS Dates is\r\n * `1970-01-01`.\r\n * - The DateTimeOffset ticks value for the date `1970-01-01` is `621355968000000000`.\r\n *   - Hence, to convert it to the JS epoch; we `subtract` the delta from the given value.\r\n * - Ticks in DateTimeOffset is `1/10000000` second, while ticks in JS Date is `1/1000` second.\r\n *   - Thus, we `divide` the value by `10000` to convert it to JS Date ticks.\r\n *\r\n * @param buf Input as a Buffer\r\n * @returns Date The JS Date object.\r\n */\r\nexport function convertTicksToDate(buf: number[]): Date {\r\n  const epochMicroDiff: number = 621355968000000000;\r\n  const longValue: Long = Long.fromBytesBE(buf);\r\n  const timeInMS = longValue\r\n    .sub(epochMicroDiff)\r\n    .div(10000)\r\n    .toNumber();\r\n  const result = new Date(timeInMS);\r\n  log.utils(\"The converted date is: %s\", result.toString());\r\n  return result;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Returns the number of logical processors in the system.\r\n */\r\nexport function getProcessorCount(): number {\r\n  if (isNode) {\r\n    const os = require(\"os\");\r\n    return os.cpus().length;\r\n  } else {\r\n    return navigator.hardwareConcurrency || 1;\r\n  }\r\n}\r\n\r\n/**\r\n * @internal\r\n * Converts any given input to a Buffer.\r\n * @param input The input that needs to be converted to a Buffer.\r\n */\r\nexport function toBuffer(input: any): Buffer {\r\n  let result: any;\r\n  log.utils(\r\n    \"[utils.toBuffer] The given message body that needs to be converted to buffer is: \",\r\n    input\r\n  );\r\n  if (isBuffer(input)) {\r\n    result = input;\r\n  } else {\r\n    // string, undefined, null, boolean, array, object, number should end up here\r\n    // coercing undefined to null as that will ensure that null value will be given to the\r\n    // customer on receive.\r\n    if (input === undefined) input = null; // tslint:disable-line\r\n    try {\r\n      const inputStr = JSON.stringify(input);\r\n      result = Buffer.from(inputStr, \"utf8\");\r\n    } catch (err) {\r\n      const msg =\r\n        `An error occurred while executing JSON.stringify() on the given input ` +\r\n        input +\r\n        `${err ? err.stack : JSON.stringify(err)}`;\r\n      log.error(\"[utils.toBuffer] \" + msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n  log.utils(\"[utils.toBuffer] The converted buffer is: %O.\", result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Throws InvalidOperationError if the current AMQP connection is closed.\r\n * @param context The ConnectionContext associated with the current AMQP connection.\r\n */\r\nexport function throwErrorIfConnectionClosed(context: ConnectionContext): void {\r\n  if (context && context.wasConnectionCloseCalled) {\r\n    throw new Error(\"The underlying AMQP connection is closed.\");\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { defaultLock } from \"@azure/amqp-common\";\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\nimport * as log from \"../log\";\r\nimport { Sender, Receiver } from \"rhea-promise\";\r\nimport { getUniqueName } from \"../util/utils\";\r\n\r\n/**\r\n * @internal\r\n * Options passed to the constructor of LinkEntity\r\n */\r\nexport interface LinkEntityOptions {\r\n  /**\r\n   * @property {string} address The client entity address in one of the following forms:\r\n   */\r\n  address?: string;\r\n  /**\r\n   * @property {string} audience The client entity token audience in one of the following forms:\r\n   */\r\n  audience?: string;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Describes the base class for entities like MessageSender, MessageReceiver and Management client.\r\n * @class ClientEntity\r\n */\r\nexport class LinkEntity {\r\n  /**\r\n   * @property {string} id The unique name for the entity in the format:\r\n   * `${name of the entity}-${guid}`.\r\n   */\r\n  name: string;\r\n  /**\r\n   * @property {string} address The client entity address in one of the following forms:\r\n   *\r\n   * **Sender**\r\n   * - `\"<queue-name>\"`.\r\n   * - `\"<topic-name>\"`.\r\n   *\r\n   * **Receiver**\r\n   * - `\"<queue-name>\"`.\r\n   * - `\"<topic-name>\"`.\r\n   *\r\n   * **ManagementClient**\r\n   * -`\"$management\"`.\r\n   */\r\n  address: string;\r\n  /**\r\n   * @property {string} audience The client entity token audience in one of the following forms:\r\n   *\r\n   * **Sender**\r\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\r\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\r\n   *\r\n   * **Receiver**\r\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\r\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\r\n   *\r\n   * **ManagementClient**\r\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\r\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\r\n   */\r\n  audience: string;\r\n  /**\r\n   * @property {boolean} isConnecting Indicates whether the link is in the process of connecting\r\n   * (establishing) itself. Default value: `false`.\r\n   */\r\n  isConnecting: boolean = false;\r\n  /**\r\n   * @property {ClientEntityContext} _context Provides relevant information about the amqp connection,\r\n   * cbs and $management sessions, token provider, sender and receivers.\r\n   * @protected\r\n   */\r\n  protected _context: ClientEntityContext;\r\n  /**\r\n   * @property {NodeJS.Timer} _tokenRenewalTimer The token renewal timer that keeps track of when\r\n   * the Client Entity is due for token renewal.\r\n   * @protected\r\n   */\r\n  protected _tokenRenewalTimer?: NodeJS.Timer;\r\n  /**\r\n   * Creates a new ClientEntity instance.\r\n   * @constructor\r\n   * @param {ClientEntityContext} context The connection context.\r\n   * @param {LinkEntityOptions} [options] Options that can be provided while creating the LinkEntity.\r\n   */\r\n  constructor(name: string, context: ClientEntityContext, options?: LinkEntityOptions) {\r\n    if (!options) options = {};\r\n    this._context = context;\r\n    this.address = options.address || \"\";\r\n    this.audience = options.audience || \"\";\r\n    this.name = getUniqueName(name);\r\n  }\r\n\r\n  /**\r\n   * Negotiates the cbs claim for the ClientEntity.\r\n   * @protected\r\n   * @param {boolean} [setTokenRenewal] Set the token renewal timer. Default false.\r\n   * @return {Promise<void>} Promise<void>\r\n   */\r\n  protected async _negotiateClaim(setTokenRenewal?: boolean): Promise<void> {\r\n    // Acquire the lock and establish a cbs session if it does not exist on the connection.\r\n    // Although node.js is single threaded, we need a locking mechanism to ensure that a\r\n    // race condition does not happen while creating a shared resource (in this case the\r\n    // cbs session, since we want to have exactly 1 cbs session per connection).\r\n    log.link(\r\n      \"[%s] Acquiring cbs lock: '%s' for creating the cbs session while creating the %s: \" +\r\n        \"'%s' with address: '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this._context.namespace.cbsSession.cbsLock,\r\n      this._type,\r\n      this.name,\r\n      this.address\r\n    );\r\n    await defaultLock.acquire(this._context.namespace.cbsSession.cbsLock, () => {\r\n      return this._context.namespace.cbsSession.init();\r\n    });\r\n    const tokenObject = await this._context.namespace.tokenProvider.getToken(this.audience);\r\n    log.link(\r\n      \"[%s] %s: calling negotiateClaim for audience '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this._type,\r\n      this.audience\r\n    );\r\n    // Acquire the lock to negotiate the CBS claim.\r\n    log.link(\r\n      \"[%s] Acquiring cbs lock: '%s' for cbs auth for %s: '%s' with address '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this._context.namespace.negotiateClaimLock,\r\n      this._type,\r\n      this.name,\r\n      this.address\r\n    );\r\n    await defaultLock.acquire(this._context.namespace.negotiateClaimLock, () => {\r\n      return this._context.namespace.cbsSession.negotiateClaim(this.audience, tokenObject);\r\n    });\r\n    log.link(\r\n      \"[%s] Negotiated claim for %s '%s' with with address: %s\",\r\n      this._context.namespace.connectionId,\r\n      this._type,\r\n      this.name,\r\n      this.address\r\n    );\r\n    if (setTokenRenewal) {\r\n      await this._ensureTokenRenewal();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensures that the token is renewed within the predefined renewal margin.\r\n   * @protected\r\n   * @returns {void}\r\n   */\r\n  protected async _ensureTokenRenewal(): Promise<void> {\r\n    const tokenValidTimeInSeconds = this._context.namespace.tokenProvider.tokenValidTimeInSeconds;\r\n    const tokenRenewalMarginInSeconds = this._context.namespace.tokenProvider\r\n      .tokenRenewalMarginInSeconds;\r\n    const nextRenewalTimeout = (tokenValidTimeInSeconds - tokenRenewalMarginInSeconds) * 1000;\r\n    this._tokenRenewalTimer = setTimeout(async () => {\r\n      try {\r\n        await this._negotiateClaim(true);\r\n      } catch (err) {\r\n        // TODO: May be add some retries over here before emitting the error.\r\n        log.error(\r\n          \"[%s] %s '%s' with address %s, an error occurred while renewing the token: %O\",\r\n          this._context.namespace.connectionId,\r\n          this._type,\r\n          this.name,\r\n          this.address,\r\n          err\r\n        );\r\n      }\r\n    }, nextRenewalTimeout);\r\n    log.link(\r\n      \"[%s] %s '%s' with address %s, has next token renewal in %d seconds @(%s).\",\r\n      this._context.namespace.connectionId,\r\n      this._type,\r\n      this.name,\r\n      this.address,\r\n      nextRenewalTimeout / 1000,\r\n      new Date(Date.now() + nextRenewalTimeout).toString()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Closes the Sender|Receiver link and it's underlying session and also removes it from the\r\n   * internal map.\r\n   *\r\n   * @param {Sender | Receiver} [link] The Sender or Receiver link that needs to be closed and\r\n   * removed.\r\n   */\r\n  protected async _closeLink(link?: Sender | Receiver): Promise<void> {\r\n    clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\r\n    if (link) {\r\n      try {\r\n        // This should take care of closing the link and it's underlying session. This should also\r\n        // remove them from the internal map.\r\n        await link.close();\r\n        log.link(\r\n          \"[%s] %s '%s' with address '%s' closed.\",\r\n          this._context.namespace.connectionId,\r\n          this._type,\r\n          this.name,\r\n          this.address\r\n        );\r\n      } catch (err) {\r\n        log.error(\r\n          \"[%s] An error occurred while closing the %s '%s': %O\",\r\n          this._context.namespace.connectionId,\r\n          this._type,\r\n          this.name,\r\n          this.address,\r\n          err\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Provides the current type of the ClientEntity.\r\n   * @return {string} The entity type.\r\n   */\r\n  private get _type(): string {\r\n    let result = \"LinkEntity\";\r\n    if ((this as any).constructor && (this as any).constructor.name) {\r\n      result = (this as any).constructor.name;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from \"long\";\r\nimport {\r\n  Delivery,\r\n  uuid_to_string,\r\n  AmqpError,\r\n  MessageAnnotations,\r\n  DeliveryAnnotations\r\n} from \"rhea-promise\";\r\nimport { Constants, AmqpMessage } from \"@azure/amqp-common\";\r\nimport * as log from \"./log\";\r\nimport { ClientEntityContext } from \"./clientEntityContext\";\r\nimport { reorderLockToken } from \"../lib/util/utils\";\r\n\r\n/**\r\n * The mode in which messages should be received\r\n */\r\nexport enum ReceiveMode {\r\n  /**\r\n   * Peek the message and lock it until it is settled or times out.\r\n   * @type {Number}\r\n   */\r\n  peekLock = 1,\r\n\r\n  /**\r\n   * Remove the message from the service bus upon delivery.\r\n   * @type {Number}\r\n   */\r\n  receiveAndDelete = 2\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum DispositionType {\r\n  complete = \"complete\",\r\n  deadletter = \"deadletter\",\r\n  abandon = \"abandon\",\r\n  defer = \"defer\"\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum DispositionStatus {\r\n  completed = \"completed\",\r\n  defered = \"defered\",\r\n  suspended = \"suspended\",\r\n  abandoned = \"abandoned\",\r\n  renewed = \"renewed\"\r\n}\r\n\r\n/**\r\n * @internal\r\n * Describes the delivery annotations for ServiceBus.\r\n * @interface\r\n */\r\nexport interface ServiceBusDeliveryAnnotations extends DeliveryAnnotations {\r\n  /**\r\n   * @property {string} [last_enqueued_offset] The offset of the last event.\r\n   */\r\n  last_enqueued_offset?: string;\r\n  /**\r\n   * @property {number} [last_enqueued_sequence_number] The sequence number of the last event.\r\n   */\r\n  last_enqueued_sequence_number?: number;\r\n  /**\r\n   * @property {number} [last_enqueued_time_utc] The enqueued time of the last event.\r\n   */\r\n  last_enqueued_time_utc?: number;\r\n  /**\r\n   * @property {number} [runtime_info_retrieval_time_utc] The retrieval time of the last event.\r\n   */\r\n  runtime_info_retrieval_time_utc?: number;\r\n  /**\r\n   * @property {string} Any unknown delivery annotations.\r\n   */\r\n  [x: string]: any;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Describes the message annotations for ServiceBus.\r\n * @interface ServiceBusMessageAnnotations\r\n */\r\nexport interface ServiceBusMessageAnnotations extends MessageAnnotations {\r\n  /**\r\n   * @property {string | null} [x-opt-partition-key] Annotation for the partition key set for the event.\r\n   */\r\n  \"x-opt-partition-key\"?: string | null;\r\n  /**\r\n   * @property {number} [x-opt-sequence-number] Annontation for the sequence number of the event.\r\n   */\r\n  \"x-opt-sequence-number\"?: number;\r\n  /**\r\n   * @property {number} [x-opt-enqueued-time] Annotation for the enqueued time of the event.\r\n   */\r\n  \"x-opt-enqueued-time\"?: number;\r\n  /**\r\n   * @property {string} [x-opt-offset] Annotation for the offset of the event.\r\n   */\r\n  \"x-opt-offset\"?: string;\r\n  /**\r\n   * @property {string} [x-opt-locked-until] Annotation for the message being locked until.\r\n   */\r\n  \"x-opt-locked-until\"?: Date | number;\r\n}\r\n\r\n/**\r\n * Describes the reason and error description for dead lettering a message.\r\n * @interface DeadLetterOptions\r\n */\r\nexport interface DeadLetterOptions {\r\n  /**\r\n   * @property {string} [deadletterReason] The reason for deadlettering the message.\r\n   */\r\n  deadletterReason: string;\r\n  /**\r\n   * @property {string} [deadLetterErrorDescription] The error description for deadlettering the message.\r\n   */\r\n  deadLetterErrorDescription: string;\r\n}\r\n\r\n/**\r\n * Describes the message to be sent to ServiceBus.\r\n * @interface SendableMessageInfo.\r\n */\r\nexport interface SendableMessageInfo {\r\n  /**\r\n   * @property {any} body - The message body that needs to be sent or is received.\r\n   */\r\n  body: any;\r\n  /**\r\n   * @property {string | number | Buffer} [messageId] The message identifier is an\r\n   * application-defined value that uniquely identifies the message and its payload.\r\n   *\r\n   * Note: Numbers that are not whole integers are not allowed.\r\n   */\r\n  messageId?: string | number | Buffer;\r\n  /**\r\n   * @property {string} [contentType] The content type of the message. Optionally describes\r\n   * the payload of the message, with a descriptor following the format of RFC2045, Section 5, for\r\n   * example \"application/json\".\r\n   */\r\n  contentType?: string;\r\n  /**\r\n   * @property {string | number | Buffer} [correlationId] The correlation identifier that allows an\r\n   * application to specify a context for the message for the purposes of correlation, for example\r\n   * reflecting the MessageId of a message that is being replied to.\r\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\r\n   */\r\n  correlationId?: string | number | Buffer;\r\n  /**\r\n   * @property {string} [partitionKey] The partition key for sending a message to a\r\n   * partitioned entity. Maximum length is 128 characters. For {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning partitioned entities},\r\n   * etting this value enables assigning related messages to the same internal partition,\r\n   * so that submission sequence order is correctly recorded. The partition is chosen by a hash\r\n   * function over this value and cannot be chosen directly. For session-aware entities,\r\n   * the `sessionId` property overrides this value.\r\n   */\r\n  partitionKey?: string;\r\n  /**\r\n   * @property {string} [viaPartitionKey] The partition key for sending a message into an entity\r\n   * via a partitioned transfer queue. Maximum length is 128 characters. If a message is sent via a\r\n   * transfer queue in the scope of a transaction, this value selects the transfer queue partition:\r\n   * This is functionally equivalent to `partitionKey` property and ensures that messages are kept\r\n   * together and in order as they are transferred.\r\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via Transfers and Send Via}.\r\n   */\r\n  viaPartitionKey?: string;\r\n  /**\r\n   * @property {string} [sessionId] The session identifier for a session-aware entity. Maximum\r\n   * length is 128 characters. For session-aware entities, this application-defined value specifies\r\n   * the session affiliation of the message. Messages with the same session identifier are subject\r\n   * to summary locking and enable exact in-order processing and demultiplexing. For\r\n   * session-unaware entities, this value is ignored.\r\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-sessions Message Sessions}.\r\n   */\r\n  sessionId?: string;\r\n  /**\r\n   * @property {string} [replyToSessionId] The session identifier augmenting the `replyTo` address.\r\n   * Maximum length is 128 characters. This value augments the ReplyTo information and specifies\r\n   * which SessionId should be set for the reply when sent to the reply entity.\r\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\r\n   */\r\n  replyToSessionId?: string;\r\n  /**\r\n   * @property {number} [timeToLive] The message’s time to live value. This value is the relative\r\n   * duration after which the message expires, starting from the instant the message has been\r\n   * accepted and stored by the broker, as captured in `enqueuedTimeUtc`. When not set explicitly,\r\n   * the assumed value is the DefaultTimeToLive for the respective queue or topic. A message-level\r\n   * `timeToLive` value cannot be longer than the entity's DefaultTimeToLive setting and it is\r\n   * silently adjusted if it does. See\r\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-expiration Expiration}.\r\n   */\r\n  timeToLive?: number;\r\n  /**\r\n   * @property {string} [label] The application specific label. This property enables the\r\n   * application to indicate the purpose of the message to the receiver in a standardized. fashion,\r\n   * similar to an email subject line. The mapped AMQP property is \"subject\".\r\n   */\r\n  label?: string;\r\n  /**\r\n   * @property {string} [to] The \"to\" address. This property is reserved for future use in routing\r\n   * scenarios and presently ignored by the broker itself. Applications can use this value in\r\n   * rule-driven {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding auto-forward chaining}\r\n   * scenarios to indicate the intended logical destination of the message.\r\n   */\r\n  to?: string;\r\n  /**\r\n   * @property {string} [replyTo] The address of an entity to send replies to. This optional and\r\n   * application-defined value is a standard way to express a reply path to the receiver of the\r\n   * message. When a sender expects a reply, it sets the value to the absolute or relative path of\r\n   * the queue or topic it expects the reply to be sent to. See\r\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\r\n   */\r\n  replyTo?: string;\r\n  /**\r\n   * @property {Date} [scheduledEnqueueTimeUtc] The date and time in UTC at which the message will\r\n   * be enqueued. This property returns the time in UTC; when setting the property, the\r\n   * supplied DateTime value must also be in UTC. This value is for delayed message sending.\r\n   * It is utilized to delay messages sending to a specific time in the future. Message enqueuing\r\n   * time does not mean that the message will be sent at the same time. It will get enqueued,\r\n   * but the actual sending time depends on the queue's workload and its state.\r\n   */\r\n  scheduledEnqueueTimeUtc?: Date;\r\n  /**\r\n   * @property {{ [key: string]: any }} [userProperties] The application specific properties which can be\r\n   * used for custom message metadata.\r\n   */\r\n  userProperties?: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * Describes the message to be sent to ServiceBus.\r\n */\r\nexport module SendableMessageInfo {\r\n  /**\r\n   * @ignore\r\n   */\r\n  export function validate(msg: SendableMessageInfo): void {\r\n    if (!msg) {\r\n      throw new Error(\"'msg' cannot be null or undefined.\");\r\n    }\r\n\r\n    if (msg.contentType != undefined && typeof msg.contentType !== \"string\") {\r\n      throw new Error(\"'contentType' must be of type 'string'.\");\r\n    }\r\n\r\n    if (msg.label != undefined && typeof msg.label !== \"string\") {\r\n      throw new Error(\"'label' must be of type 'string'.\");\r\n    }\r\n\r\n    if (msg.to != undefined && typeof msg.to !== \"string\") {\r\n      throw new Error(\"'to' must be of type 'string'.\");\r\n    }\r\n\r\n    if (msg.replyToSessionId != undefined && typeof msg.replyToSessionId !== \"string\") {\r\n      throw new Error(\"'replyToSessionId' must be of type 'string'.\");\r\n    }\r\n\r\n    if (msg.timeToLive != undefined && typeof msg.timeToLive !== \"number\") {\r\n      throw new Error(\"'timeToLive' must be of type 'number'.\");\r\n    }\r\n\r\n    if (\r\n      msg.scheduledEnqueueTimeUtc &&\r\n      (!(msg.scheduledEnqueueTimeUtc instanceof Date) ||\r\n        msg.scheduledEnqueueTimeUtc!.toString() === \"Invalid Date\")\r\n    ) {\r\n      throw new Error(\"'scheduledEnqueueTimeUtc' must be an instance of a valid 'Date'.\");\r\n    }\r\n\r\n    if (\r\n      (msg.partitionKey != undefined && typeof msg.partitionKey !== \"string\") ||\r\n      (typeof msg.partitionKey === \"string\" &&\r\n        msg.partitionKey.length > Constants.maxPartitionKeyLength)\r\n    ) {\r\n      throw new Error(\r\n        \"'partitionKey' must be of type 'string' with a length less than 128 characters.\"\r\n      );\r\n    }\r\n\r\n    if (\r\n      (msg.viaPartitionKey != undefined && typeof msg.viaPartitionKey !== \"string\") ||\r\n      (typeof msg.viaPartitionKey === \"string\" &&\r\n        msg.viaPartitionKey.length > Constants.maxPartitionKeyLength)\r\n    ) {\r\n      throw new Error(\r\n        \"'viaPartitionKey' must be of type 'string' with a length less than 128 characters.\"\r\n      );\r\n    }\r\n\r\n    if (msg.sessionId != undefined && typeof msg.sessionId !== \"string\") {\r\n      throw new Error(\"'sessionId' must be of type 'string'.\");\r\n    }\r\n\r\n    if (\r\n      msg.sessionId != undefined &&\r\n      typeof msg.sessionId === \"string\" &&\r\n      msg.sessionId.length > Constants.maxSessionIdLength\r\n    ) {\r\n      throw new Error(\r\n        \"Length of 'sessionId' of type 'string' cannot be greater than 128 characters.\"\r\n      );\r\n    }\r\n\r\n    if (\r\n      msg.messageId != undefined &&\r\n      typeof msg.messageId !== \"string\" &&\r\n      typeof msg.messageId !== \"number\" &&\r\n      !Buffer.isBuffer(msg.messageId)\r\n    ) {\r\n      throw new Error(\"'messageId' must be of type 'string' | 'number' | Buffer.\");\r\n    }\r\n\r\n    if (\r\n      msg.messageId &&\r\n      typeof msg.messageId === \"number\" &&\r\n      Math.floor(msg.messageId) !== msg.messageId\r\n    ) {\r\n      throw new Error(\"'messageId' must be a whole integer. Decimal points are not allowed.\");\r\n    }\r\n\r\n    if (\r\n      msg.messageId != undefined &&\r\n      typeof msg.messageId === \"string\" &&\r\n      msg.messageId.length > Constants.maxMessageIdLength\r\n    ) {\r\n      throw new Error(\r\n        \"Length of 'messageId' of type 'string' cannot be greater than 128 characters.\"\r\n      );\r\n    }\r\n\r\n    if (\r\n      msg.correlationId != undefined &&\r\n      typeof msg.correlationId !== \"string\" &&\r\n      typeof msg.correlationId !== \"number\" &&\r\n      !Buffer.isBuffer(msg.correlationId)\r\n    ) {\r\n      throw new Error(\"'correlationId' must be of type 'string' | 'number' | Buffer.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Converts given SendableMessageInfo to AmqpMessage\r\n   */\r\n  export function toAmqpMessage(msg: SendableMessageInfo): AmqpMessage {\r\n    validate(msg);\r\n    const amqpMsg: AmqpMessage = {\r\n      body: msg.body,\r\n      message_annotations: {}\r\n    };\r\n    if (msg.userProperties != undefined) {\r\n      amqpMsg.application_properties = msg.userProperties;\r\n    }\r\n    if (msg.contentType != undefined) {\r\n      amqpMsg.content_type = msg.contentType;\r\n    }\r\n    if (msg.sessionId != undefined) {\r\n      amqpMsg.group_id = msg.sessionId;\r\n    }\r\n    if (msg.replyTo != undefined) {\r\n      amqpMsg.reply_to = msg.replyTo;\r\n    }\r\n    if (msg.to != undefined) {\r\n      amqpMsg.to = msg.to;\r\n    }\r\n    if (msg.label != undefined) {\r\n      amqpMsg.subject = msg.label;\r\n    }\r\n    if (msg.messageId != undefined) {\r\n      amqpMsg.message_id = msg.messageId;\r\n    }\r\n    if (msg.correlationId != undefined) {\r\n      amqpMsg.correlation_id = msg.correlationId;\r\n    }\r\n    if (msg.replyToSessionId != undefined) {\r\n      amqpMsg.reply_to_group_id = msg.replyToSessionId;\r\n    }\r\n    if (msg.timeToLive != undefined && msg.timeToLive !== Constants.maxDurationValue) {\r\n      amqpMsg.ttl = msg.timeToLive;\r\n      amqpMsg.creation_time = Date.now();\r\n      if (Constants.maxAbsoluteExpiryTime - amqpMsg.creation_time > amqpMsg.ttl) {\r\n        amqpMsg.absolute_expiry_time = amqpMsg.creation_time + amqpMsg.ttl;\r\n      } else {\r\n        amqpMsg.absolute_expiry_time = Constants.maxAbsoluteExpiryTime;\r\n      }\r\n    }\r\n    if (msg.partitionKey != undefined) {\r\n      amqpMsg.message_annotations![Constants.partitionKey] = msg.partitionKey;\r\n    }\r\n    if (msg.viaPartitionKey != undefined) {\r\n      amqpMsg.message_annotations![Constants.viaPartitionKey] = msg.viaPartitionKey;\r\n    }\r\n    if (msg.scheduledEnqueueTimeUtc != undefined) {\r\n      amqpMsg.message_annotations![Constants.scheduledEnqueueTime] = msg.scheduledEnqueueTimeUtc;\r\n    }\r\n    log.message(\"SBMessage to AmqpMessage: %O\", amqpMsg);\r\n    return amqpMsg;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Converts given AmqpMessage to SendableMessageInfo\r\n   */\r\n  export function fromAmqpMessage(msg: AmqpMessage): SendableMessageInfo {\r\n    if (!msg) {\r\n      throw new Error(\"'msg' cannot be null or undefined.\");\r\n    }\r\n    const sbmsg: SendableMessageInfo = {\r\n      body: msg.body\r\n    };\r\n\r\n    if (msg.application_properties != undefined) {\r\n      sbmsg.userProperties = msg.application_properties;\r\n    }\r\n    if (msg.content_type != undefined) {\r\n      sbmsg.contentType = msg.content_type;\r\n    }\r\n    if (msg.group_id != undefined) {\r\n      sbmsg.sessionId = msg.group_id;\r\n    }\r\n    if (msg.reply_to != undefined) {\r\n      sbmsg.replyTo = msg.reply_to;\r\n    }\r\n    if (msg.to != undefined) {\r\n      sbmsg.to = msg.to;\r\n    }\r\n    if (msg.ttl != undefined) {\r\n      sbmsg.timeToLive = msg.ttl;\r\n    }\r\n    if (msg.subject != undefined) {\r\n      sbmsg.label = msg.subject;\r\n    }\r\n    if (msg.message_id != undefined) {\r\n      sbmsg.messageId = msg.message_id;\r\n    }\r\n    if (msg.correlation_id != undefined) {\r\n      sbmsg.correlationId = msg.correlation_id;\r\n    }\r\n    if (msg.reply_to_group_id != undefined) {\r\n      sbmsg.replyToSessionId = msg.reply_to_group_id;\r\n    }\r\n\r\n    if (msg.message_annotations != undefined) {\r\n      if (msg.message_annotations[Constants.partitionKey] != undefined) {\r\n        sbmsg.partitionKey = msg.message_annotations[Constants.partitionKey];\r\n      }\r\n      if (msg.message_annotations[Constants.viaPartitionKey] != undefined) {\r\n        sbmsg.viaPartitionKey = msg.message_annotations[Constants.viaPartitionKey];\r\n      }\r\n      if (msg.message_annotations[Constants.scheduledEnqueueTime] != undefined) {\r\n        sbmsg.scheduledEnqueueTimeUtc = msg.message_annotations[Constants.scheduledEnqueueTime];\r\n      }\r\n    }\r\n    log.message(\"AmqpMessage to SBMessage: %O\", sbmsg);\r\n    return sbmsg;\r\n  }\r\n}\r\n\r\n/**\r\n * Describes the message received from ServiceBus.\r\n * @class ReceivedSBMessage\r\n */\r\nexport interface ReceivedMessageInfo extends SendableMessageInfo {\r\n  /**\r\n   * @property {string} [lockToken] The lock token for the current message. The lock token is a\r\n   * reference to the lock that is being held by the broker in `ReceiveMode.PeekLock` mode. Locks\r\n   * are used to explicitly settle messages as explained in the {@link https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement product documentation in more detail}\r\n   * The token can also be used to pin the lock permanently through the {@link https://docs.microsoft.com/azure/service-bus-messaging/message-deferral Deferral API}\r\n   * and, with that, take the message out of the regular delivery state flow.\r\n   * @readonly\r\n   */\r\n  readonly lockToken?: string;\r\n  /**\r\n   * @property {number} [deliveryCount] The current delivery count. The value start from 1. Number\r\n   * of deliveries that have been attempted for this message. The count is incremented when a\r\n   * message lock expires, or the message is explicitly abandoned by the receiver.\r\n   * @readonly\r\n   */\r\n  readonly deliveryCount?: number;\r\n  /**\r\n   * @property {Date} [enqueuedTimeUtc] The date and time of the sent message in UTC. The UTC\r\n   * instant at which the message has been accepted and stored in the entity. This value can be\r\n   * used as an authoritative and neutral arrival time indicator when the receiver does not\r\n   * want to trust the sender's clock.\r\n   * @readonly\r\n   */\r\n  readonly enqueuedTimeUtc?: Date;\r\n  /**\r\n   * @property {Date} [expiresAtUtc] The date and time in UTC at which the message is set to expire.\r\n   * The UTC instant at which the message is marked for removal and no longer available for\r\n   * retrieval from the entity due to expiration. Expiry is controlled by the `timeToLive` property\r\n   * and this property is computed from `enqueuedTimeUtc` + `timeToLive`.\r\n   */\r\n  readonly expiresAtUtc?: Date;\r\n  /**\r\n   * @property {Date} [lockedUntilUtc] The date and time in UTC until which the message will be\r\n   * locked in the queue/subscription. For messages retrieved under a lock (peek-lock receive mode,\r\n   * not pre-settled) this property reflects the UTC instant until which the message is held\r\n   * locked in the queue/subscription. When the lock expires, the `deliveryCount` is incremented\r\n   * and the message is again available for retrieval.\r\n   */\r\n  lockedUntilUtc?: Date;\r\n  /**\r\n   * @property {number} [enqueuedSequenceNumber] The original sequence number of the message. For\r\n   * messages that have been auto-forwarded, this property reflects the sequence number that had\r\n   * first been assigned to the message at its original point of submission.\r\n   * @readonly\r\n   */\r\n  readonly enqueuedSequenceNumber?: number;\r\n  /**\r\n   * @property {number} [sequenceNumber] The unique number assigned to a message by Service Bus.\r\n   * The sequence number is a unique 64-bit integer assigned to a message as it is accepted\r\n   * and stored by the broker and functions as its true identifier. For partitioned entities,\r\n   * the topmost 16 bits reflect the partition identifier. Sequence numbers monotonically increase.\r\n   * They roll over to 0 when the 48-64 bit range is exhausted.\r\n   *\r\n   * **Max safe integer** that Javascript currently supports is `2^53 - 1`. The sequence number\r\n   * is an AMQP `Long` type which can be upto 64 bits long. To represent that we are using a\r\n   * library named {@link https://github.com/dcodeIO/long.js long.js}. We expect customers\r\n   * to use the **`Long`** type exported by this library.\r\n   * @readonly\r\n   */\r\n  readonly sequenceNumber?: Long;\r\n  /**\r\n   * @property {string} [deadLetterSource] The name of the queue or subscription that this message\r\n   * was enqueued on, before it was deadlettered. Only set in messages that have been dead-lettered\r\n   * and subsequently auto-forwarded from the dead-letter queue to another entity. Indicates the\r\n   * entity in which the message was dead-lettered.\r\n   * @readonly\r\n   */\r\n  readonly deadLetterSource?: string;\r\n  /**\r\n   * @property {AmqpMessage} _amqpMessage The underlying raw amqp message.\r\n   * @readonly\r\n   */\r\n  readonly _amqpMessage: AmqpMessage;\r\n}\r\n\r\n/**\r\n * Describes the module that is responsible for converting the message received from ServiceBus\r\n * to/from AmqpMessage.\r\n */\r\nexport module ReceivedMessageInfo {\r\n  /**\r\n   * @ignore\r\n   */\r\n  export function validate(msg: ReceivedMessageInfo): void {\r\n    SendableMessageInfo.validate(msg);\r\n    if (msg.lockToken != undefined && typeof msg.lockToken !== \"string\") {\r\n      throw new Error(\"'lockToken' must be of type 'string'.\");\r\n    }\r\n\r\n    if (msg.deliveryCount != undefined && typeof msg.deliveryCount !== \"number\") {\r\n      throw new Error(\"'deliveryCount' must be of type 'number'.\");\r\n    }\r\n\r\n    if (msg.sequenceNumber != undefined && !Long.isLong(msg.sequenceNumber)) {\r\n      throw new Error(\"'sequenceNumber' must be an instance of 'Long' .\");\r\n    }\r\n\r\n    if (msg.enqueuedSequenceNumber != undefined && typeof msg.enqueuedSequenceNumber !== \"number\") {\r\n      throw new Error(\"'enqueuedSequenceNumber' must be of type 'number'.\");\r\n    }\r\n\r\n    if (\r\n      msg.enqueuedTimeUtc &&\r\n      !(msg.enqueuedTimeUtc instanceof Date) &&\r\n      msg.enqueuedTimeUtc!.toString() === \"Invalid Date\"\r\n    ) {\r\n      throw new Error(\"'enqueuedTimeUtc' must be an instance of a valid 'Date'.\");\r\n    }\r\n\r\n    if (\r\n      msg.expiresAtUtc &&\r\n      !(msg.expiresAtUtc instanceof Date) &&\r\n      msg.expiresAtUtc!.toString() === \"Invalid Date\"\r\n    ) {\r\n      throw new Error(\"'expiresAtUtc' must be an instance of a valid 'Date'.\");\r\n    }\r\n\r\n    if (\r\n      msg.lockedUntilUtc &&\r\n      !(msg.lockedUntilUtc instanceof Date) &&\r\n      msg.lockedUntilUtc!.toString() === \"Invalid Date\"\r\n    ) {\r\n      throw new Error(\"'lockedUntilUtc' must be an instance of a valid 'Date'.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Converts given ReceivedMessageInfo to AmqpMessage\r\n   */\r\n  export function toAmqpMessage(msg: ReceivedMessageInfo): AmqpMessage {\r\n    ReceivedMessageInfo.validate(msg);\r\n    const amqpMsg: AmqpMessage = SendableMessageInfo.toAmqpMessage(msg);\r\n    if (msg.deliveryCount != undefined) {\r\n      amqpMsg.delivery_count = msg.deliveryCount;\r\n    }\r\n    if (!amqpMsg.message_annotations) {\r\n      amqpMsg.message_annotations = {};\r\n    }\r\n    if (msg.deadLetterSource != undefined) {\r\n      amqpMsg.message_annotations[Constants.deadLetterSource] = msg.deadLetterSource;\r\n    }\r\n    if (msg.enqueuedSequenceNumber != undefined) {\r\n      amqpMsg.message_annotations[Constants.enqueueSequenceNumber] = msg.enqueuedSequenceNumber;\r\n    }\r\n    if (msg.sequenceNumber != undefined) {\r\n      amqpMsg.message_annotations[Constants.sequenceNumber] = msg.sequenceNumber;\r\n    }\r\n    if (msg.enqueuedTimeUtc != undefined) {\r\n      amqpMsg.message_annotations[Constants.enqueuedTime] = msg.enqueuedTimeUtc;\r\n    }\r\n    if (msg.lockedUntilUtc != undefined) {\r\n      amqpMsg.message_annotations[Constants.lockedUntil] = msg.lockedUntilUtc;\r\n    }\r\n    log.message(\"ReceivedSBMessage to AmqpMessage: %O\", amqpMsg);\r\n    return amqpMsg;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * Converts given AmqpMessage to ReceivedMessageInfo\r\n   */\r\n  export function fromAmqpMessage(msg: AmqpMessage, delivery?: Delivery): ReceivedMessageInfo {\r\n    const sbmsg: SendableMessageInfo = SendableMessageInfo.fromAmqpMessage(msg);\r\n    const props: any = {};\r\n    if (msg.message_annotations != undefined) {\r\n      if (msg.message_annotations[Constants.deadLetterSource] != undefined) {\r\n        props.deadLetterSource = msg.message_annotations[Constants.deadLetterSource];\r\n      }\r\n      if (msg.message_annotations[Constants.enqueueSequenceNumber] != undefined) {\r\n        props.enqueuedSequenceNumber = msg.message_annotations[Constants.enqueueSequenceNumber];\r\n      }\r\n      if (msg.message_annotations[Constants.sequenceNumber] != undefined) {\r\n        if (Buffer.isBuffer(msg.message_annotations[Constants.sequenceNumber])) {\r\n          props.sequenceNumber = Long.fromBytesBE(\r\n            msg.message_annotations[Constants.sequenceNumber]\r\n          );\r\n        } else {\r\n          props.sequenceNumber = Long.fromNumber(msg.message_annotations[Constants.sequenceNumber]);\r\n        }\r\n      }\r\n      if (msg.message_annotations[Constants.enqueuedTime] != undefined) {\r\n        props.enqueuedTimeUtc = new Date(msg.message_annotations[Constants.enqueuedTime] as number);\r\n      }\r\n      if (msg.message_annotations[Constants.lockedUntil] != undefined) {\r\n        props.lockedUntilUtc = new Date(msg.message_annotations[Constants.lockedUntil] as number);\r\n      }\r\n    }\r\n    if (\r\n      msg.ttl != undefined &&\r\n      msg.ttl >= Constants.maxDurationValue - props.enqueuedTimeUtc.getTime()\r\n    ) {\r\n      props.expiresAtUtc = new Date(Constants.maxDurationValue);\r\n    } else {\r\n      props.expiresAtUtc = new Date(props.enqueuedTimeUtc.getTime() + msg.ttl!);\r\n    }\r\n\r\n    const rcvdsbmsg: ReceivedMessageInfo = {\r\n      _amqpMessage: msg,\r\n      _delivery: delivery,\r\n      deliveryCount: msg.delivery_count,\r\n      lockToken:\r\n        delivery && delivery.tag.length !== 0\r\n          ? uuid_to_string(\r\n              reorderLockToken(\r\n                typeof delivery.tag === \"string\" ? Buffer.from(delivery.tag) : delivery.tag\r\n              )\r\n            )\r\n          : undefined,\r\n      ...sbmsg,\r\n      ...props\r\n    };\r\n\r\n    log.message(\"AmqpMessage to ReceivedSBMessage: %O\", rcvdsbmsg);\r\n    return rcvdsbmsg;\r\n  }\r\n}\r\n\r\n/**\r\n * Describes the message received from ServiceBus.\r\n * @interface ReceivedMessage\r\n */\r\ninterface ReceivedMessage extends ReceivedMessageInfo {\r\n  complete(): Promise<void>;\r\n\r\n  abandon(propertiesToModify?: { [key: string]: any }): Promise<void>;\r\n\r\n  defer(propertiesToModify?: { [key: string]: any }): Promise<void>;\r\n\r\n  deadLetter(options?: DeadLetterOptions): Promise<void>;\r\n}\r\n\r\n/**\r\n * Describes the message received from ServiceBus.\r\n * @class ServiceBusMessage\r\n */\r\nexport class ServiceBusMessage implements ReceivedMessage {\r\n  /**\r\n   * @property {any} body - The message body that needs to be sent or is received.\r\n   */\r\n  body: any;\r\n  /**\r\n   * @property {{ [key: string]: any }} [userProperties] The application specific properties.\r\n   */\r\n  userProperties?: { [key: string]: any };\r\n  /**\r\n   * @property {string | number | Buffer} [messageId] The message identifier is an\r\n   * application-defined value that uniquely identifies the message and its payload. The identifier\r\n   * is a free-form string and can reflect a GUID or an identifier derived from the application\r\n   * context. If enabled, the\r\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/duplicate-detection duplicate detection}\r\n   * identifies and removes second and further submissions of messages with the same MessageId.\r\n   */\r\n  messageId?: string | number | Buffer;\r\n  /**\r\n   * @property {string} [contentType] The content type of the message. Optionally describes\r\n   * the payload of the message, with a descriptor following the format of RFC2045, Section 5, for\r\n   * example \"application/json\".\r\n   */\r\n  contentType?: string;\r\n  /**\r\n   * @property {string | number | Buffer} [correlationId] The correlation identifier that allows an\r\n   * application to specify a context for the message for the purposes of correlation, for example\r\n   * reflecting the MessageId of a message that is being replied to.\r\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\r\n   */\r\n  correlationId?: string | number | Buffer;\r\n  /**\r\n   * @property {string} [partitionKey] The partition key for sending a message to a\r\n   * partitioned entity. Maximum length is 128 characters. For {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning partitioned entities},\r\n   * etting this value enables assigning related messages to the same internal partition,\r\n   * so that submission sequence order is correctly recorded. The partition is chosen by a hash\r\n   * function over this value and cannot be chosen directly. For session-aware entities,\r\n   * the `sessionId` property overrides this value.\r\n   */\r\n  partitionKey?: string;\r\n  /**\r\n   * @property {string} [viaPartitionKey] The partition key for sending a message into an entity\r\n   * via a partitioned transfer queue. Maximum length is 128 characters. If a message is sent via a\r\n   * transfer queue in the scope of a transaction, this value selects the transfer queue partition:\r\n   * This is functionally equivalent to `partitionKey` property and ensures that messages are kept\r\n   * together and in order as they are transferred.\r\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via Transfers and Send Via}.\r\n   */\r\n  viaPartitionKey?: string;\r\n  /**\r\n   * @property {string} [sessionId] The session identifier for a session-aware entity. Maximum\r\n   * length is 128 characters. For session-aware entities, this application-defined value specifies\r\n   * the session affiliation of the message. Messages with the same session identifier are subject\r\n   * to summary locking and enable exact in-order processing and demultiplexing. For\r\n   * session-unaware entities, this value is ignored.\r\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-sessions Message Sessions}.\r\n   */\r\n  sessionId?: string;\r\n  /**\r\n   * @property {string} [replyToSessionId] The session identifier augmenting the `replyTo` address.\r\n   * Maximum length is 128 characters. This value augments the ReplyTo information and specifies\r\n   * which SessionId should be set for the reply when sent to the reply entity.\r\n   * See {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\r\n   */\r\n  replyToSessionId?: string;\r\n  /**\r\n   * @property {number} [timeToLive] The message’s time to live value. This value is the relative\r\n   * duration after which the message expires, starting from the instant the message has been\r\n   * accepted and stored by the broker, as captured in `enqueuedTimeUtc`. When not set explicitly,\r\n   * the assumed value is the DefaultTimeToLive for the respective queue or topic. A message-level\r\n   * `timeToLive` value cannot be longer than the entity's DefaultTimeToLive setting and it is\r\n   * silently adjusted if it does. See\r\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/message-expiration Expiration}.\r\n   */\r\n  timeToLive?: number;\r\n  /**\r\n   * @property {string} [label] The application specific label. This property enables the\r\n   * application to indicate the purpose of the message to the receiver in a standardized. fashion,\r\n   * similar to an email subject line. The mapped AMQP property is \"subject\".\r\n   */\r\n  label?: string;\r\n  /**\r\n   * @property {string} [to] The \"to\" address. This property is reserved for future use in routing\r\n   * scenarios and presently ignored by the broker itself. Applications can use this value in\r\n   * rule-driven {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding auto-forward chaining}\r\n   * scenarios to indicate the intended logical destination of the message.\r\n   */\r\n  to?: string;\r\n  /**\r\n   * @property {string} [replyTo] The address of an entity to send replies to. This optional and\r\n   * application-defined value is a standard way to express a reply path to the receiver of the\r\n   * message. When a sender expects a reply, it sets the value to the absolute or relative path of\r\n   * the queue or topic it expects the reply to be sent to. See\r\n   * {@link https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation Message Routing and Correlation}.\r\n   */\r\n  replyTo?: string;\r\n  /**\r\n   * @property {Date} [scheduledEnqueueTimeUtc] The date and time in UTC at which the message will\r\n   * be enqueued. This property returns the time in UTC; when setting the property, the\r\n   * supplied DateTime value must also be in UTC. This value is for delayed message sending.\r\n   * It is utilized to delay messages sending to a specific time in the future. Message enqueuing\r\n   * time does not mean that the message will be sent at the same time. It will get enqueued,\r\n   * but the actual sending time depends on the queue's workload and its state.\r\n   */\r\n  scheduledEnqueueTimeUtc?: Date;\r\n  /**\r\n   * @property {string} [lockToken] The lock token for the current message. The lock token is a\r\n   * reference to the lock that is being held by the broker in `ReceiveMode.PeekLock` mode. Locks\r\n   * are used to explicitly settle messages as explained in the {@link https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement product documentation in more detail}\r\n   * The token can also be used to pin the lock permanently through the {@link https://docs.microsoft.com/azure/service-bus-messaging/message-deferral Deferral API}\r\n   * and, with that, take the message out of the regular delivery state flow.\r\n   * @readonly\r\n   */\r\n  readonly lockToken?: string;\r\n  /**\r\n   * @property {number} [deliveryCount] The current delivery count. The value start from 1. Number\r\n   * of deliveries that have been attempted for this message. The count is incremented when a\r\n   * message lock expires, or the message is explicitly abandoned by the receiver.\r\n   * @readonly\r\n   */\r\n  readonly deliveryCount?: number;\r\n  /**\r\n   * @property {Date} [enqueuedTimeUtc] The date and time of the sent message in UTC. The UTC\r\n   * instant at which the message has been accepted and stored in the entity. This value can be\r\n   * used as an authoritative and neutral arrival time indicator when the receiver does not\r\n   * want to trust the sender's clock.\r\n   * @readonly\r\n   */\r\n  readonly enqueuedTimeUtc?: Date;\r\n  /**\r\n   * @property {Date} [expiresAtUtc] The date and time in UTC at which the message is set to expire.\r\n   * The UTC instant at which the message is marked for removal and no longer available for\r\n   * retrieval from the entity due to expiration. Expiry is controlled by the `timeToLive` property\r\n   * and this property is computed from `enqueuedTimeUtc` + `timeToLive`.\r\n   */\r\n  readonly expiresAtUtc?: Date;\r\n  /**\r\n   * @property {Date} [lockedUntilUtc] The date and time in UTC until which the message will be\r\n   * locked in the queue/subscription. For messages retrieved under a lock (peek-lock receive mode,\r\n   * not pre-settled) this property reflects the UTC instant until which the message is held\r\n   * locked in the queue/subscription. When the lock expires, the `deliveryCount` is incremented\r\n   * and the message is again available for retrieval.\r\n   */\r\n  lockedUntilUtc?: Date;\r\n  /**\r\n   * @property {number} [enqueuedSequenceNumber] The original sequence number of the message. For\r\n   * messages that have been auto-forwarded, this property reflects the sequence number that had\r\n   * first been assigned to the message at its original point of submission.\r\n   * @readonly\r\n   */\r\n  readonly enqueuedSequenceNumber?: number;\r\n  /**\r\n   * @property {number} [sequenceNumber] The unique number assigned to a message by Service Bus.\r\n   * The sequence number is a unique 64-bit integer assigned to a message as it is accepted\r\n   * and stored by the broker and functions as its true identifier. For partitioned entities,\r\n   * the topmost 16 bits reflect the partition identifier. Sequence numbers monotonically increase.\r\n   * They roll over to 0 when the 48-64 bit range is exhausted.\r\n   * @readonly\r\n   */\r\n  readonly sequenceNumber?: Long;\r\n  /**\r\n   * @property {string} [deadLetterSource] The name of the queue or subscription that this message\r\n   * was enqueued on, before it was deadlettered. Only set in messages that have been dead-lettered\r\n   * and subsequently auto-forwarded from the dead-letter queue to another entity. Indicates the\r\n   * entity in which the message was dead-lettered.\r\n   * @readonly\r\n   */\r\n  readonly deadLetterSource?: string;\r\n  /**\r\n   * The associated delivery of the received message.\r\n   */\r\n  readonly delivery: Delivery;\r\n  /**\r\n   * @property {AmqpMessage} _amqpMessage The underlying raw amqp message.\r\n   * @readonly\r\n   */\r\n  readonly _amqpMessage: AmqpMessage;\r\n  /**\r\n   * @property {ClientEntityContext} _context The client entity context.\r\n   * @readonly\r\n   */\r\n  private readonly _context: ClientEntityContext;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(context: ClientEntityContext, msg: AmqpMessage, delivery: Delivery) {\r\n    Object.assign(this, ReceivedMessageInfo.fromAmqpMessage(msg, delivery));\r\n    this._context = context;\r\n    if (msg.body) {\r\n      this.body = this._context.namespace.dataTransformer.decode(msg.body);\r\n    }\r\n    this._amqpMessage = msg;\r\n    this.delivery = delivery;\r\n  }\r\n\r\n  /**\r\n   * Completes a message using it's lock token. This will delete the message from ServiceBus.\r\n   * @returns Promise<void>.\r\n   */\r\n  async complete(): Promise<void> {\r\n    log.message(\r\n      \"[%s] Completing the message with id '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this.messageId\r\n    );\r\n    if (this._context.requestResponseLockedMessages.has(this.lockToken!)) {\r\n      await this._context.managementClient!.updateDispositionStatus(\r\n        [this.lockToken!],\r\n        DispositionStatus.completed,\r\n        {\r\n          sessionId: this.sessionId\r\n        }\r\n      );\r\n\r\n      // Remove the message from the internal map of deferred messages\r\n      this._context.requestResponseLockedMessages.delete(this.lockToken!);\r\n      return;\r\n    }\r\n    const receiver = this._context.getReceiver(this.delivery.link.name, this.sessionId);\r\n\r\n    if (receiver.receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    if (this.delivery.remote_settled) {\r\n      throw new Error(\"This message has been already settled.\");\r\n    }\r\n    return receiver.settleMessage(this, DispositionType.complete);\r\n  }\r\n  /**\r\n   * Abandons a message using it's lock token. This will make the message available again in\r\n   * Service Bus for processing.\r\n   * @param {{ [key: string]: any }} propertiesToModify The properties of the message to modify while\r\n   * abandoning the message. Abandoning a message will increase the delivery count on the message.\r\n   * @return Promise<void>.\r\n   */\r\n  async abandon(propertiesToModify?: { [key: string]: any }): Promise<void> {\r\n    // TODO: Figure out a mechanism to convert specified properties to message_annotations.\r\n    log.message(\r\n      \"[%s] Abandoning the message with id '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this.messageId\r\n    );\r\n    if (this._context.requestResponseLockedMessages.has(this.lockToken!)) {\r\n      await this._context.managementClient!.updateDispositionStatus(\r\n        [this.lockToken!],\r\n        DispositionStatus.abandoned,\r\n        { propertiesToModify: propertiesToModify, sessionId: this.sessionId }\r\n      );\r\n\r\n      // Remove the message from the internal map of deferred messages\r\n      this._context.requestResponseLockedMessages.delete(this.lockToken!);\r\n      return;\r\n    }\r\n    const receiver = this._context.getReceiver(this.delivery.link.name, this.sessionId);\r\n\r\n    if (receiver.receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    if (this.delivery.remote_settled) {\r\n      throw new Error(\"This message has been already settled.\");\r\n    }\r\n    return receiver.settleMessage(this, DispositionType.abandon, {\r\n      propertiesToModify: propertiesToModify\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Defers the processing of the message. In order to receive this message again in the future,\r\n   * you will need to save the `sequenceNumber` and receive it\r\n   * using `receiveDeferredMessage(sequenceNumber)`. Deferring messages does not impact message's\r\n   * expiration, meaning that deferred messages can still expire.\r\n   * @param [propertiesToModify] The properties of the message to modify while\r\n   * deferring the message\r\n   * @returns Promise<void>\r\n   */\r\n  async defer(propertiesToModify?: { [key: string]: any }): Promise<void> {\r\n    log.message(\r\n      \"[%s] Deferring the message with id '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this.messageId\r\n    );\r\n    if (this._context.requestResponseLockedMessages.has(this.lockToken!)) {\r\n      await this._context.managementClient!.updateDispositionStatus(\r\n        [this.lockToken!],\r\n        DispositionStatus.defered,\r\n        { propertiesToModify: propertiesToModify, sessionId: this.sessionId }\r\n      );\r\n\r\n      // Remove the message from the internal map of deferred messages\r\n      this._context.requestResponseLockedMessages.delete(this.lockToken!);\r\n      return;\r\n    }\r\n    const receiver = this._context.getReceiver(this.delivery.link.name, this.sessionId);\r\n\r\n    if (receiver.receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    if (this.delivery.remote_settled) {\r\n      throw new Error(\"This message has been already settled.\");\r\n    }\r\n    return receiver.settleMessage(this, DispositionType.defer, {\r\n      propertiesToModify: propertiesToModify\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Moves the message to the deadletter sub-queue.\r\n   * @param [options] The DeadLetter options that can be provided while\r\n   * rejecting the message.\r\n   * @returns Promise<void>\r\n   */\r\n  async deadLetter(options?: DeadLetterOptions): Promise<void> {\r\n    const error: AmqpError = {\r\n      condition: Constants.deadLetterName\r\n    };\r\n    if (options) {\r\n      error.info = {\r\n        DeadLetterReason: options.deadletterReason,\r\n        DeadLetterErrorDescription: options.deadLetterErrorDescription\r\n      };\r\n    }\r\n    log.message(\r\n      \"[%s] Deadlettering the message with id '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this.messageId\r\n    );\r\n    if (this._context.requestResponseLockedMessages.has(this.lockToken!)) {\r\n      await this._context.managementClient!.updateDispositionStatus(\r\n        [this.lockToken!],\r\n        DispositionStatus.suspended,\r\n        {\r\n          deadLetterReason: error.condition,\r\n          deadLetterDescription: error.description,\r\n          sessionId: this.sessionId\r\n        }\r\n      );\r\n\r\n      // Remove the message from the internal map of deferred messages\r\n      this._context.requestResponseLockedMessages.delete(this.lockToken!);\r\n      return;\r\n    }\r\n    const receiver = this._context.getReceiver(this.delivery.link.name, this.sessionId);\r\n\r\n    if (receiver.receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    if (this.delivery.remote_settled) {\r\n      throw new Error(\"This message has been already settled.\");\r\n    }\r\n    return receiver.settleMessage(this, DispositionType.deadletter, {\r\n      error: error\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a clone of the current message to allow it to be re-sent to the queue\r\n   * @returns ServiceBusMessage\r\n   */\r\n  clone(): SendableMessageInfo {\r\n    // We are returning a SendableMessageInfo object because that object can then be sent to ServiceBus\r\n    const clone: SendableMessageInfo = {\r\n      body: this.body,\r\n      contentType: this.contentType,\r\n      correlationId: this.correlationId,\r\n      label: this.label,\r\n      messageId: this.messageId,\r\n      partitionKey: this.partitionKey,\r\n      replyTo: this.replyTo,\r\n      replyToSessionId: this.replyToSessionId,\r\n      scheduledEnqueueTimeUtc: this.scheduledEnqueueTimeUtc,\r\n      sessionId: this.sessionId,\r\n      timeToLive: this.timeToLive,\r\n      to: this.to,\r\n      userProperties: this.userProperties,\r\n      viaPartitionKey: this.viaPartitionKey\r\n    };\r\n\r\n    return clone;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n  translate,\r\n  Constants,\r\n  ErrorNameConditionMapper,\r\n  MessagingError,\r\n  Func\r\n} from \"@azure/amqp-common\";\r\nimport {\r\n  Receiver,\r\n  OnAmqpEvent,\r\n  EventContext,\r\n  ReceiverOptions,\r\n  ReceiverEvents,\r\n  isAmqpError\r\n} from \"rhea-promise\";\r\nimport * as log from \"../log\";\r\nimport {\r\n  OnError,\r\n  OnAmqpEventAsPromise,\r\n  PromiseLike,\r\n  DispositionOptions,\r\n  OnMessage\r\n} from \"../core/messageReceiver\";\r\nimport { LinkEntity } from \"../core/linkEntity\";\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\nimport {\r\n  convertTicksToDate,\r\n  calculateRenewAfterDuration,\r\n  throwErrorIfConnectionClosed\r\n} from \"../util/utils\";\r\nimport { ServiceBusMessage, DispositionType, ReceiveMode } from \"../serviceBusMessage\";\r\nimport { messageDispositionTimeout } from \"../util/constants\";\r\n\r\n/**\r\n * Enum to denote who is calling the session receiver\r\n * @internal\r\n */\r\nexport enum SessionCallee {\r\n  standalone = \"standalone\",\r\n  sessionManager = \"sessionManager\"\r\n}\r\n\r\n/**\r\n * Describes the options that need to be provided while creating a message session receiver link.\r\n * @internal\r\n */\r\nexport interface CreateMessageSessionReceiverLinkOptions {\r\n  onClose: OnAmqpEventAsPromise;\r\n  onSessionClose: OnAmqpEventAsPromise;\r\n  onError: OnAmqpEvent;\r\n  onSessionError: OnAmqpEvent;\r\n  onSettled: OnAmqpEvent;\r\n  sessionId?: string;\r\n}\r\n\r\n/**\r\n * Describes the options for creating a SessionReceiver.\r\n */\r\nexport interface SessionReceiverOptions {\r\n  /**\r\n   * @property {string} [sessionId] The sessionId for the message session. If none is provided,\r\n   * the SessionReceiver gets created for a randomly chosen session from available sessions\r\n   */\r\n  sessionId?: string;\r\n  /**\r\n   * @property {number} [receiveMode] The mode in which messages should be received.\r\n   * Possible values are `ReceiveMode.peekLock` (default) and `ReceiveMode.receiveAndDelete`\r\n   */\r\n  receiveMode?: ReceiveMode;\r\n  /**\r\n   * @property {number} [maxSessionAutoRenewLockDurationInSeconds] The maximum duration in seconds\r\n   * until which, the lock on the session will be renewed automatically.\r\n   * - **Default**: `300` seconds (5 minutes).\r\n   * - **To disable autolock renewal**, set `maxSessionAutoRenewLockDurationInSeconds` to `0`.\r\n   */\r\n  maxSessionAutoRenewLockDurationInSeconds?: number;\r\n}\r\n\r\n/**\r\n * Describes the options to control receiving of messages in streaming mode.\r\n */\r\nexport interface SessionMessageHandlerOptions {\r\n  /**\r\n   * @property {boolean} [autoComplete] Indicates whether the message (if not settled by the user)\r\n   * should be automatically completed after the user provided onMessage handler has been executed.\r\n   * Completing a message, removes it from the Queue/Subscription.\r\n   * - **Default**: `true`.\r\n   */\r\n  autoComplete?: boolean;\r\n  /**\r\n   * @property {number} [newMessageWaitTimeoutInSeconds] The maximum amount of time the receiver\r\n   * will wait to receive a new message. If no new message is received in this time, then the\r\n   * receiver will be closed.\r\n   *\r\n   * Caution: When setting this value, take into account the time taken to process messages. Once\r\n   * the receiver is closed, operations like complete()/abandon()/defer()/deadletter() cannot be\r\n   * invoked on messages.\r\n   *\r\n   * If this option is not provided, then receiver link will stay open until manually closed.\r\n   */\r\n  newMessageWaitTimeoutInSeconds?: number;\r\n  /**\r\n   * @property {number} [maxConcurrentCalls] The maximum number of concurrent calls that the library\r\n   * can make to the user's message handler. Once this limit has been reached, more messages will\r\n   * not be received until atleast one of the calls to the user's message handler has completed.\r\n   * - **Default**: `1`.\r\n   */\r\n  maxConcurrentCalls?: number;\r\n}\r\n/**\r\n * @internal\r\n * Describes the options for creating a Session Manager.\r\n */\r\nexport interface SessionManagerOptions extends SessionMessageHandlerOptions {\r\n  /**\r\n   * @property {number} [maxConcurrentSessions] The maximum number of sessions that the user wants to\r\n   * handle concurrently.\r\n   * - **Default**: `2000`.\r\n   */\r\n  maxConcurrentSessions?: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Describes all the options that can be set while instantiating a MessageSession object.\r\n */\r\nexport type MessageSessionOptions = SessionManagerOptions &\r\n  SessionReceiverOptions & {\r\n    callee?: SessionCallee;\r\n  };\r\n\r\n/**\r\n * @internal\r\n * Describes the receiver for a Message Session.\r\n */\r\nexport class MessageSession extends LinkEntity {\r\n  /**\r\n   * @property {Date} [sessionLockedUntilUtc] Provides the duration until which the session is locked.\r\n   */\r\n  sessionLockedUntilUtc?: Date;\r\n  /**\r\n   * @property {string} [sessionId] The sessionId for the message session.\r\n   */\r\n  sessionId?: string;\r\n  /**\r\n   * @property {number} [maxConcurrentSessions] The maximum number of concurrent sessions that the\r\n   * client should initate.\r\n   * - **Default**: `1`.\r\n   */\r\n  maxConcurrentSessions?: number;\r\n  /**\r\n   * @property {number} [maxConcurrentCalls] The maximum number of messages that should be\r\n   * processed concurrently in a session while in streaming mode. Once this limit has been reached,\r\n   * more messages will not be received until the user's message handler has completed processing current message.\r\n   * - **Default**: `1` (message in a session at a time).\r\n   */\r\n  maxConcurrentCalls: number = 1;\r\n  /**\r\n   * @property {number} [receiveMode] The mode in which messages should be received.\r\n   * Default: ReceiveMode.peekLock\r\n   */\r\n  receiveMode: ReceiveMode;\r\n  /**\r\n   * @property {boolean} autoComplete Indicates whether `Message.complete()` should be called\r\n   * automatically after the message processing is complete while receiving messages with handlers\r\n   * or while messages are received using receiveBatch(). Default: false.\r\n   */\r\n  autoComplete: boolean;\r\n  /**\r\n   * @property {number} maxAutoRenewDurationInSeconds The maximum duration within which the\r\n   * lock will be renewed automatically. This value should be greater than the longest message\r\n   * lock duration; for example, the `lockDuration` property on the received message.\r\n   *\r\n   * Default: `300` (5 minutes);\r\n   */\r\n  maxAutoRenewDurationInSeconds: number;\r\n  /**\r\n   * @property {number} [newMessageWaitTimeoutInSeconds] The maximum amount of idle time the session\r\n   * reaceiver will wait ater a message has been received. If no messages are received in that\r\n   * time frame then the session will be closed.\r\n   */\r\n  newMessageWaitTimeoutInSeconds?: number;\r\n  /**\r\n   * @property {boolean} autoRenewLock Should lock renewal happen automatically.\r\n   */\r\n  autoRenewLock: boolean;\r\n  /**\r\n   * @property {SessionCallee} callee Describes who instantied the MessageSession. Whether it was\r\n   * called by the SessionManager or it was called standalone.\r\n   * - Default: \"standalone\"\r\n   */\r\n  callee: SessionCallee;\r\n  /**\r\n   * Denotes if we are currently receiving messages\r\n   */\r\n  isReceivingMessages: boolean;\r\n  /**\r\n   * @property {Receiver} [_receiver] The AMQP receiver link.\r\n   */\r\n  private _receiver?: Receiver;\r\n  /**\r\n   * @property {Map<number, Promise<any>>} _deliveryDispositionMap Maintains a map of deliveries that\r\n   * are being actively disposed. It acts as a store for correlating the responses received for\r\n   * active dispositions.\r\n   */\r\n  private _deliveryDispositionMap: Map<number, PromiseLike> = new Map<number, PromiseLike>();\r\n  /**\r\n   * @property {OnMessage} _onMessage The message handler provided by the user that will\r\n   * be wrapped inside _onAmqpMessage.\r\n   */\r\n  private _onMessage!: OnMessage;\r\n  /**\r\n   * @property {OnError} _onError The error handler provided by the user that will be wrapped\r\n   * inside _onAmqpError.\r\n   */\r\n  private _onError?: OnError;\r\n  /**\r\n   * @property {OnError} _notifyError If the user provided error handler is present then it will\r\n   * notify the user's error handler about the error.\r\n   */\r\n  private _notifyError: OnError;\r\n  /**\r\n   * @property {OnAmqpEventAsPromise} _onAmqpClose The message handler that will be set as the handler on the\r\n   * underlying rhea receiver for the \"receiver_close\" event.\r\n   */\r\n  private _onAmqpClose: OnAmqpEventAsPromise;\r\n  /**\r\n   * @property {OnAmqpEvent} _onSessionError The message handler that will be set as the handler on\r\n   * the underlying rhea receiver's session for the \"session_error\" event.\r\n   */\r\n  private _onSessionError: OnAmqpEvent;\r\n  /**\r\n   * @property {OnAmqpEventAsPromise} _onSessionClose The message handler that will be set as the handler on\r\n   * the underlying rhea receiver's session for the \"session_close\" event.\r\n   */\r\n  private _onSessionClose: OnAmqpEventAsPromise;\r\n  /**\r\n   * @property {OnAmqpEvent} _onAmqpError The message handler that will be set as the handler on the\r\n   * underlying rhea receiver for the \"receiver_error\" event.\r\n   */\r\n  private _onAmqpError: OnAmqpEvent;\r\n  /**\r\n   * @property {OnAmqpEvent} _onSettled The message handler that will be set as the handler on the\r\n   * underlying rhea receiver for the \"settled\" event.\r\n   */\r\n  private _onSettled: OnAmqpEvent;\r\n  /**\r\n   * @property {NodeJS.Timer} _sessionLockRenewalTimer The session lock renewal timer that keeps\r\n   * track of when the MessageSession is due for session lock renewal.\r\n   */\r\n  private _sessionLockRenewalTimer?: NodeJS.Timer;\r\n  /**\r\n   * @property {NodeJS.Timer} _newMessageReceivedTimer The new message received timer that keeps\r\n   * track of closing the MessageSession if no message was received in the configured\r\n   * `newMessageWaitTimeoutInSeconds` seconds.\r\n   */\r\n  private _newMessageReceivedTimer?: NodeJS.Timer;\r\n\r\n  private _totalAutoLockRenewDuration: number;\r\n\r\n  constructor(context: ClientEntityContext, options?: MessageSessionOptions) {\r\n    super(context.entityPath, context, {\r\n      address: context.entityPath,\r\n      audience: `${context.namespace.config.endpoint}${context.entityPath}`\r\n    });\r\n    this._context.isSessionEnabled = true;\r\n    this.isReceivingMessages = false;\r\n    if (!options) options = {};\r\n    this.autoComplete = false;\r\n    this.sessionId = options.sessionId;\r\n    this.receiveMode = options.receiveMode || ReceiveMode.peekLock;\r\n    this.callee = options.callee || SessionCallee.standalone;\r\n    this.maxAutoRenewDurationInSeconds =\r\n      options.maxSessionAutoRenewLockDurationInSeconds != undefined\r\n        ? options.maxSessionAutoRenewLockDurationInSeconds\r\n        : 300;\r\n    this._totalAutoLockRenewDuration = Date.now() + this.maxAutoRenewDurationInSeconds * 1000;\r\n    this.autoRenewLock =\r\n      this.maxAutoRenewDurationInSeconds > 0 && this.receiveMode === ReceiveMode.peekLock;\r\n\r\n    // setting all the handlers\r\n    this._onSettled = (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const delivery = context.delivery;\r\n      if (delivery) {\r\n        const id = delivery.id;\r\n        const state = delivery.remote_state;\r\n        const settled = delivery.remote_settled;\r\n        log.receiver(\r\n          \"[%s] Delivery with id %d, remote_settled: %s, remote_state: %o has been \" + \"received.\",\r\n          connectionId,\r\n          id,\r\n          settled,\r\n          state && state.error ? state.error : state\r\n        );\r\n        if (settled && this._deliveryDispositionMap.has(id)) {\r\n          const promise = this._deliveryDispositionMap.get(id) as PromiseLike;\r\n          clearTimeout(promise.timer);\r\n          log.receiver(\r\n            \"[%s] Found the delivery with id %d in the map and cleared the timer.\",\r\n            connectionId,\r\n            id\r\n          );\r\n          const deleteResult = this._deliveryDispositionMap.delete(id);\r\n          log.receiver(\r\n            \"[%s] Successfully deleted the delivery with id %d from the map.\",\r\n            connectionId,\r\n            id,\r\n            deleteResult\r\n          );\r\n          if (state && state.error && (state.error.condition || state.error.description)) {\r\n            const error = translate(state.error);\r\n            return promise.reject(error);\r\n          }\r\n\r\n          return promise.resolve();\r\n        }\r\n      }\r\n    };\r\n\r\n    this._notifyError = (error: MessagingError | Error) => {\r\n      if (this._onError) {\r\n        this._onError(error);\r\n        log.error(\r\n          \"[%s] Notified the user's error handler about the error received by the \" +\r\n            \"Receiver '%s'.\",\r\n          this._context.namespace.connectionId,\r\n          this.name\r\n        );\r\n      }\r\n    };\r\n\r\n    this._onAmqpError = (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const receiverError = context.receiver && context.receiver.error;\r\n      if (receiverError) {\r\n        const sbError = translate(receiverError);\r\n        if (sbError.name === \"SessionLockLostError\") {\r\n          this._context.expiredMessageSessions[this.sessionId!] = true;\r\n          sbError.message = `The session lock has expired on the session with id ${\r\n            this.sessionId\r\n          }.`;\r\n        }\r\n        log.error(\r\n          \"[%s] An error occurred for Receiver '%s': %O.\",\r\n          connectionId,\r\n          this.name,\r\n          sbError\r\n        );\r\n        this._notifyError(sbError);\r\n      }\r\n    };\r\n\r\n    this._onSessionError = (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const sessionError = context.session && context.session.error;\r\n      if (sessionError) {\r\n        const sbError = translate(sessionError);\r\n        log.error(\r\n          \"[%s] An error occurred on the session for Receiver '%s': %O.\",\r\n          connectionId,\r\n          this.name,\r\n          sbError\r\n        );\r\n        this._notifyError(sbError);\r\n      }\r\n    };\r\n\r\n    this._onAmqpClose = async (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const receiverError = context.receiver && context.receiver.error;\r\n      const receiver = this._receiver || context.receiver!;\r\n      let clearExpiredSessionFlag = true;\r\n      if (receiverError) {\r\n        const sbError = translate(receiverError);\r\n        if (sbError.name === \"SessionLockLostError\") {\r\n          clearExpiredSessionFlag = false;\r\n        }\r\n        log.error(\r\n          \"[%s] 'receiver_close' event occurred for receiver '%s' for sessionId '%s'. \" +\r\n            \"The associated error is: %O\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId,\r\n          sbError\r\n        );\r\n        // no need to notify the user's error handler since rhea guarantees that receiver_error\r\n        // will always be emitted before receiver_close.\r\n      }\r\n      if (receiver && !receiver.isItselfClosed()) {\r\n        log.error(\r\n          \"[%s] 'receiver_close' event occurred on the receiver '%s' for sessionId '%s' \" +\r\n            \"and the sdk did not initiate this. Hence, let's gracefully close the receiver.\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId\r\n        );\r\n        try {\r\n          await this.close();\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] An error occurred while closing the receiver '%s' for sessionId '%s': %O.\",\r\n            connectionId,\r\n            this.name,\r\n            this.sessionId,\r\n            err\r\n          );\r\n        }\r\n      } else {\r\n        log.error(\r\n          \"[%s] 'receiver_close' event occurred on the receiver '%s' for sessionId '%s' \" +\r\n            \"because the sdk initiated it. Hence no need to gracefully close the receiver\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId\r\n        );\r\n      }\r\n\r\n      if (this.sessionId && clearExpiredSessionFlag) {\r\n        delete this._context.expiredMessageSessions[this.sessionId];\r\n      }\r\n    };\r\n\r\n    this._onSessionClose = async (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const receiver = this._receiver || context.receiver!;\r\n      const sessionError = context.session && context.session.error;\r\n      if (sessionError) {\r\n        const sbError = translate(sessionError);\r\n        log.error(\r\n          \"[%s] 'session_close' event occurred for receiver '%s' for sessionId '%s'. \" +\r\n            \"The associated error is: %O\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId,\r\n          sbError\r\n        );\r\n        // no need to notify the user's error handler since rhea guarantees that session_error\r\n        // will always be emitted before session_close.\r\n      }\r\n\r\n      if (receiver && !receiver.isSessionItselfClosed()) {\r\n        log.error(\r\n          \"[%s] 'session_close' event occurred on the receiver '%s' for sessionId '%s' \" +\r\n            \"and the sdk did not initiate this. Hence, let's gracefully close the receiver.\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId\r\n        );\r\n        try {\r\n          await this.close();\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] An error occurred while closing the receiver '%s' for sessionId '%s': %O.\",\r\n            connectionId,\r\n            this.name,\r\n            this.sessionId,\r\n            err\r\n          );\r\n        }\r\n      } else {\r\n        log.error(\r\n          \"[%s] 'session_close' event occurred on the receiver '%s' for sessionId '%s' \" +\r\n            \"because the sdk initiated it. Hence no need to gracefully close the receiver\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId\r\n        );\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Closes the underlying AMQP receiver link.\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      log.messageSession(\r\n        \"[%s] Closing the MessageSession '%s' for queue '%s'.\",\r\n        this._context.namespace.connectionId,\r\n        this.sessionId,\r\n        this.name\r\n      );\r\n\r\n      this.isReceivingMessages = false;\r\n      if (this._newMessageReceivedTimer) clearTimeout(this._newMessageReceivedTimer);\r\n      if (this._sessionLockRenewalTimer) clearTimeout(this._sessionLockRenewalTimer);\r\n      log.messageSession(\r\n        \"[%s] Cleared the timers for 'no new message received' task and \" +\r\n          \"'session lock renewal' task.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      if (this._receiver) {\r\n        const receiverLink = this._receiver;\r\n        this._deleteFromCache();\r\n        await this._closeLink(receiverLink);\r\n      }\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] An error occurred while closing the message session with id '%s': %O.\",\r\n        this._context.namespace.connectionId,\r\n        this.sessionId,\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the AMQP receiver link is open. If open then returns true else returns false.\r\n   */\r\n  isOpen(): boolean {\r\n    const result: boolean = this._receiver! && this._receiver!.isOpen();\r\n    log.messageSession(\r\n      \"[%s] Receiver '%s' for sessionId '%s' is open? -> %s\",\r\n      this._context.namespace.connectionId,\r\n      this.name,\r\n      this.sessionId,\r\n      result\r\n    );\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Registers handlers to deal with the incoming stream of messages over an AMQP receiver link\r\n   * from a Queue/Subscription.\r\n   * To stop receiving messages, call `close()` on the SessionReceiver or set the property\r\n   * `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.\r\n   *\r\n   * @param onMessage - Handler for processing each incoming message.\r\n   * @param onError - Handler for any error that occurs while receiving or processing messages.\r\n   * @param options - Options to control whether messages should be automatically completed. You can\r\n   * also provide a timeout in seconds to denote the amount of time to wait for a new message\r\n   * before closing the receiver.\r\n   *\r\n   * @returns void\r\n   */\r\n  receive(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this.isReceivingMessages) {\r\n      throw new Error(\r\n        `MessageSession '${this.name}' with sessionId '${this.sessionId}' is ` +\r\n          `already receiving messages.`\r\n      );\r\n    }\r\n    if (typeof onMessage !== \"function\") {\r\n      throw new Error(\"'onSessionMessage' is a required parameter and must be of type 'function'.\");\r\n    }\r\n    if (typeof onError !== \"function\") {\r\n      throw new Error(\"'onError' is a required parameter and must be of type 'function'.\");\r\n    }\r\n    if (!options) options = {};\r\n    this.isReceivingMessages = true;\r\n    if (typeof options.maxConcurrentCalls === \"number\" && options.maxConcurrentCalls > 0) {\r\n      this.maxConcurrentCalls = options.maxConcurrentCalls;\r\n    }\r\n    this.newMessageWaitTimeoutInSeconds = options.newMessageWaitTimeoutInSeconds;\r\n\r\n    // If explicitly set to false then autoComplete is false else true (default).\r\n    this.autoComplete = options.autoComplete === false ? options.autoComplete : true;\r\n    this._onMessage = onMessage;\r\n    this._onError = onError;\r\n    const connectionId = this._context.namespace.connectionId;\r\n\r\n    /**\r\n     * Resets the timer when a new message is received for Session Manager.\r\n     * It will close the receiver gracefully, if no\r\n     * messages were received for the configured newMessageWaitTimeoutInSeconds\r\n     */\r\n    const resetTimerOnNewMessageReceived = () => {\r\n      if (this._newMessageReceivedTimer) clearTimeout(this._newMessageReceivedTimer);\r\n      if (this.newMessageWaitTimeoutInSeconds) {\r\n        this._newMessageReceivedTimer = setTimeout(async () => {\r\n          const msg =\r\n            `MessageSession '${this.sessionId}' with name '${this.name}' did not receive ` +\r\n            `any messages in the last ${\r\n              this.newMessageWaitTimeoutInSeconds\r\n            } seconds. Hence closing it.`;\r\n          log.error(\"[%s] %s\", this._context.namespace.connectionId, msg);\r\n\r\n          if (this.callee === SessionCallee.sessionManager) {\r\n            // The session manager will not forward this error to user.\r\n            // Instead, this is taken as a indicator to create a new session client for the next session.\r\n            const error = translate({\r\n              condition: \"com.microsoft:message-wait-timeout\",\r\n              description: msg\r\n            });\r\n            this._notifyError(translate(error));\r\n          }\r\n          await this.close();\r\n        }, this.newMessageWaitTimeoutInSeconds * 1000);\r\n      }\r\n    };\r\n\r\n    if (this._receiver && this._receiver.isOpen()) {\r\n      const onSessionMessage = async (context: EventContext) => {\r\n        // If the receiver got closed in PeekLock mode, avoid processing the message as we\r\n        // cannot settle the message.\r\n        if (\r\n          this.receiveMode === ReceiveMode.peekLock &&\r\n          (!this._receiver || !this._receiver.isOpen())\r\n        ) {\r\n          log.error(\r\n            \"[%s] Not calling the user's message handler for the current message \" +\r\n              \"as the receiver '%s' is closed\",\r\n            connectionId,\r\n            this.name\r\n          );\r\n          return;\r\n        }\r\n\r\n        resetTimerOnNewMessageReceived();\r\n        const bMessage: ServiceBusMessage = new ServiceBusMessage(\r\n          this._context,\r\n          context.message!,\r\n          context.delivery!\r\n        );\r\n        try {\r\n          await this._onMessage(bMessage);\r\n        } catch (err) {\r\n          // This ensures we call users' error handler when users' message handler throws.\r\n          if (!isAmqpError(err)) {\r\n            log.error(\r\n              \"[%s] An error occurred while running user's message handler for the message \" +\r\n                \"with id '%s' on the receiver '%s': %O\",\r\n              connectionId,\r\n              bMessage.messageId,\r\n              this.name,\r\n              err\r\n            );\r\n            this._onError!(err);\r\n          }\r\n\r\n          const error = translate(err);\r\n          // Nothing much to do if user's message handler throws. Let us try abandoning the message.\r\n          if (\r\n            !bMessage.delivery.remote_settled &&\r\n            this.receiveMode === ReceiveMode.peekLock &&\r\n            this.isOpen() // only try to abandon the messages if the connection is still open\r\n          ) {\r\n            try {\r\n              log.error(\r\n                \"[%s] Abandoning the message with id '%s' on the receiver '%s' since \" +\r\n                  \"an error occured: %O.\",\r\n                connectionId,\r\n                bMessage.messageId,\r\n                this.name,\r\n                error\r\n              );\r\n              await bMessage.abandon();\r\n            } catch (abandonError) {\r\n              const translatedError = translate(abandonError);\r\n              log.error(\r\n                \"[%s] An error occurred while abandoning the message with id '%s' on the \" +\r\n                  \"receiver '%s': %O.\",\r\n                connectionId,\r\n                bMessage.messageId,\r\n                this.name,\r\n                translatedError\r\n              );\r\n              this._notifyError(translatedError);\r\n            }\r\n          }\r\n          return;\r\n        } finally {\r\n          if (this._receiver) {\r\n            this._receiver!.addCredit(1);\r\n          }\r\n        }\r\n\r\n        // If we've made it this far, then user's message handler completed fine. Let us try\r\n        // completing the message.\r\n        if (\r\n          this.autoComplete &&\r\n          this.receiveMode === ReceiveMode.peekLock &&\r\n          !bMessage.delivery.remote_settled\r\n        ) {\r\n          try {\r\n            log.messageSession(\r\n              \"[%s] Auto completing the message with id '%s' on \" + \"the receiver '%s'.\",\r\n              connectionId,\r\n              bMessage.messageId,\r\n              this.name\r\n            );\r\n            await bMessage.complete();\r\n          } catch (completeError) {\r\n            const translatedError = translate(completeError);\r\n            log.error(\r\n              \"[%s] An error occurred while completing the message with id '%s' on the \" +\r\n                \"receiver '%s': %O.\",\r\n              connectionId,\r\n              bMessage.messageId,\r\n              this.name,\r\n              translatedError\r\n            );\r\n            this._notifyError(translatedError);\r\n          }\r\n        }\r\n      };\r\n      // setting the \"message\" event listener.\r\n      this._receiver.on(ReceiverEvents.message, onSessionMessage);\r\n      // adding credit\r\n      this._receiver!.addCredit(this.maxConcurrentCalls);\r\n    } else {\r\n      this.isReceivingMessages = false;\r\n      const msg =\r\n        `MessageSession with sessionId '${this.sessionId}' and name '${this.name}' ` +\r\n        `has either not been created or is not open.`;\r\n      log.error(\"[%s] %s\", this._context.namespace.connectionId, msg);\r\n      this._notifyError(new Error(msg));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a batch of messages based on given count and timeout over an AMQP receiver link\r\n   * from a Queue/Subscription.\r\n   *\r\n   * @param maxMessageCount      The maximum number of messages to receive from Queue/Subscription.\r\n   * @param idleTimeoutInSeconds The maximum wait time in seconds for which the Receiver\r\n   * should wait to receive the first message. If no message is received by this time,\r\n   * the returned promise gets resolved to an empty array.\r\n   * - **Default**: `60` seconds.\r\n   * @returns Promise<ServiceBusMessage[]> A promise that resolves with an array of Message objects.\r\n   */\r\n  async receiveBatch(\r\n    maxMessageCount: number,\r\n    idleTimeoutInSeconds?: number\r\n  ): Promise<ServiceBusMessage[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this.isReceivingMessages) {\r\n      throw new Error(\r\n        `MessageSession '${this.name}' with sessionId '${this.sessionId}' is ` +\r\n          `already receiving messages.`\r\n      );\r\n    }\r\n\r\n    if (!maxMessageCount || (maxMessageCount && typeof maxMessageCount !== \"number\")) {\r\n      throw new Error(\r\n        \"'maxMessageCount' is a required parameter of type number with a value \" + \"greater than 0.\"\r\n      );\r\n    }\r\n\r\n    if (idleTimeoutInSeconds == undefined) {\r\n      idleTimeoutInSeconds = Constants.defaultOperationTimeoutInSeconds;\r\n    }\r\n\r\n    const brokeredMessages: ServiceBusMessage[] = [];\r\n    this.isReceivingMessages = true;\r\n\r\n    return new Promise<ServiceBusMessage[]>((resolve, reject) => {\r\n      let onReceiveMessage: OnAmqpEventAsPromise;\r\n      let onReceiveDrain: OnAmqpEvent;\r\n      let firstMessageWaitTimer: any;\r\n      let actionAfterWaitTimeout: Func<void, void>;\r\n\r\n      const setnewMessageWaitTimeoutInSeconds = (value?: number) => {\r\n        this.newMessageWaitTimeoutInSeconds = value;\r\n      };\r\n\r\n      setnewMessageWaitTimeoutInSeconds(1);\r\n\r\n      this._onError = (error: MessagingError | Error) => {\r\n        this.isReceivingMessages = false;\r\n        // Resetting the newMessageWaitTimeoutInSeconds to undefined since we are done receiving\r\n        // a batch of messages.\r\n        setnewMessageWaitTimeoutInSeconds();\r\n        if (firstMessageWaitTimer) {\r\n          clearTimeout(firstMessageWaitTimer);\r\n        }\r\n        // Removing listeners, so that the next receiveBatch() call can set them again.\r\n        if (this._receiver) {\r\n          this._receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\r\n          this._receiver.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n        }\r\n        reject(error);\r\n      };\r\n\r\n      // Final action to be performed after maxMessageCount is reached or the maxWaitTime is over.\r\n      const finalAction = () => {\r\n        if (this._newMessageReceivedTimer) {\r\n          clearTimeout(this._newMessageReceivedTimer);\r\n        }\r\n        if (firstMessageWaitTimer) {\r\n          clearTimeout(firstMessageWaitTimer);\r\n        }\r\n\r\n        // Unsetting the newMessageWaitTimeoutInSeconds to undefined since we are done receiving\r\n        // a batch of messages.\r\n        setnewMessageWaitTimeoutInSeconds();\r\n\r\n        // Removing listeners, so that the next receiveBatch() call can set them again.\r\n        if (this._receiver) {\r\n          this._receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\r\n        }\r\n\r\n        if (this._receiver && this._receiver.credit > 0) {\r\n          log.messageSession(\r\n            \"[%s] Receiver '%s': Draining leftover credits(%d).\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this._receiver.credit\r\n          );\r\n\r\n          // Setting drain must be accompanied by a flow call (aliased to addCredit in this case).\r\n          this._receiver.drain = true;\r\n          this._receiver.addCredit(1);\r\n        } else {\r\n          if (this._receiver) {\r\n            this._receiver.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n          }\r\n\r\n          this.isReceivingMessages = false;\r\n          log.messageSession(\r\n            \"[%s] Receiver '%s': Resolving receiveBatch() with %d messages.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            brokeredMessages.length\r\n          );\r\n          resolve(brokeredMessages);\r\n        }\r\n      };\r\n\r\n      /**\r\n       * Resets the timer when a new message is received. If no messages were received for\r\n       * `newMessageWaitTimeoutInSeconds`, the messages received till now are returned. The\r\n       * receiver link stays open for the next receive call, but doesnt receive messages until\r\n       */\r\n      const resetTimerOnNewMessageReceived = () => {\r\n        if (this._newMessageReceivedTimer) clearTimeout(this._newMessageReceivedTimer);\r\n        if (this.newMessageWaitTimeoutInSeconds) {\r\n          this._newMessageReceivedTimer = setTimeout(async () => {\r\n            const msg =\r\n              `MessageSession '${this.sessionId}' with name '${this.name}' did not receive ` +\r\n              `any messages in the last ${\r\n                this.newMessageWaitTimeoutInSeconds\r\n              } seconds. Hence closing it.`;\r\n            log.error(\"[%s] %s\", this._context.namespace.connectionId, msg);\r\n            finalAction();\r\n            if (this.callee === SessionCallee.sessionManager) {\r\n              await this.close();\r\n            }\r\n          }, this.newMessageWaitTimeoutInSeconds * 1000);\r\n        }\r\n      };\r\n\r\n      // Action to be performed after the max wait time is over.\r\n      actionAfterWaitTimeout = () => {\r\n        log.batching(\r\n          \"[%s] Batching Receiver '%s'  max wait time in seconds %d over.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          idleTimeoutInSeconds\r\n        );\r\n        return finalAction();\r\n      };\r\n\r\n      // Action to be performed on the \"receiver_drained\" event.\r\n      onReceiveDrain = (context: EventContext) => {\r\n        this._receiver!.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n        this._receiver!.drain = false;\r\n\r\n        this.isReceivingMessages = false;\r\n\r\n        log.messageSession(\r\n          \"[%s] Receiver '%s' drained. Resolving receiveBatch() with %d messages.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          brokeredMessages.length\r\n        );\r\n\r\n        resolve(brokeredMessages);\r\n      };\r\n\r\n      // Action to be performed on the \"message\" event.\r\n      onReceiveMessage = async (context: EventContext) => {\r\n        if (firstMessageWaitTimer) {\r\n          clearTimeout(firstMessageWaitTimer);\r\n          firstMessageWaitTimer = undefined;\r\n        }\r\n        resetTimerOnNewMessageReceived();\r\n        try {\r\n          const data: ServiceBusMessage = new ServiceBusMessage(\r\n            this._context,\r\n            context.message!,\r\n            context.delivery!\r\n          );\r\n          if (brokeredMessages.length < maxMessageCount) {\r\n            brokeredMessages.push(data);\r\n          }\r\n        } catch (err) {\r\n          // Removing listeners, so that the next receiveBatch() call can set them again.\r\n          if (this._receiver) {\r\n            this._receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\r\n            this._receiver.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n          }\r\n          reject(`Error while converting AmqpMessage to ReceivedSBMessage: ${err}`);\r\n        }\r\n        if (brokeredMessages.length === maxMessageCount) {\r\n          finalAction();\r\n        }\r\n      };\r\n\r\n      const addCreditAndSetTimer = (reuse?: boolean) => {\r\n        log.batching(\r\n          \"[%s] Receiver '%s', adding credit for receiving %d messages.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          maxMessageCount\r\n        );\r\n        // By adding credit here, we let the service know that at max we can handle `maxMessageCount`\r\n        // number of messages concurrently. We will return the user an array of messages that can\r\n        // be of size upto maxMessageCount. Then the user needs to accordingly dispose\r\n        // (complete,/abandon/defer/deadletter) the messages from the array.\r\n        this._receiver!.addCredit(maxMessageCount);\r\n        let msg: string = \"[%s] Setting the wait timer for %d seconds for receiver '%s'.\";\r\n        if (reuse) msg += \" Receiver link already present, hence reusing it.\";\r\n        log.batching(msg, this._context.namespace.connectionId, idleTimeoutInSeconds, this.name);\r\n        firstMessageWaitTimer = setTimeout(\r\n          actionAfterWaitTimeout,\r\n          (idleTimeoutInSeconds as number) * 1000\r\n        );\r\n      };\r\n\r\n      if (this.isOpen()) {\r\n        this._receiver!.on(ReceiverEvents.message, onReceiveMessage);\r\n        this._receiver!.on(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n        addCreditAndSetTimer(true);\r\n      } else {\r\n        const msg =\r\n          `MessageSession \"${this.name}\" with sessionId \"${this.sessionId}\", ` +\r\n          `is already closed. Hence cannot receive messages in a batch.`;\r\n        log.error(\"[%s] %s\", this._context.namespace.connectionId, msg);\r\n        reject(new Error(msg));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Settles the message with the specified disposition.\r\n   * @param message The ServiceBus Message that needs to be settled.\r\n   * @param operation The disposition type.\r\n   * @param options Optional parameters that can be provided while disposing the message.\r\n   */\r\n  async settleMessage(\r\n    message: ServiceBusMessage,\r\n    operation: DispositionType,\r\n    options?: DispositionOptions\r\n  ): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!options) options = {};\r\n      if (operation.match(/^(complete|abandon|defer|deadletter)$/) == undefined) {\r\n        return reject(new Error(`operation: '${operation}' is not a valid operation.`));\r\n      }\r\n      const delivery = message.delivery;\r\n      const timer = setTimeout(() => {\r\n        this._deliveryDispositionMap.delete(delivery.id);\r\n        log.receiver(\r\n          \"[%s] Disposition for delivery id: %d, did not complete in %d milliseconds. \" +\r\n            \"Hence resolving the promise.\",\r\n          this._context.namespace.connectionId,\r\n          delivery.id,\r\n          messageDispositionTimeout\r\n        );\r\n        return resolve();\r\n      }, messageDispositionTimeout);\r\n      this._deliveryDispositionMap.set(delivery.id, {\r\n        resolve: resolve,\r\n        reject: reject,\r\n        timer: timer\r\n      });\r\n      if (operation === DispositionType.complete) {\r\n        delivery.accept();\r\n      } else if (operation === DispositionType.abandon) {\r\n        const params: any = {\r\n          undeliverable_here: false\r\n        };\r\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\r\n        delivery.modified(params);\r\n      } else if (operation === DispositionType.defer) {\r\n        const params: any = {\r\n          undeliverable_here: true\r\n        };\r\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\r\n        delivery.modified(params);\r\n      } else if (operation === DispositionType.deadletter) {\r\n        delivery.reject(options.error || {});\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes the MessageSession from the internal cache.\r\n   */\r\n  private _deleteFromCache(): void {\r\n    this._receiver = undefined;\r\n    delete this._context.messageSessions[this.sessionId!];\r\n    log.error(\r\n      \"[%s] Deleted the receiver '%s' with sessionId '%s' from the client cache.\",\r\n      this._context.namespace.connectionId,\r\n      this.name,\r\n      this.sessionId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a new AMQP receiver under a new AMQP session.\r\n   */\r\n  private async _init(): Promise<void> {\r\n    const connectionId = this._context.namespace.connectionId;\r\n    try {\r\n      if (!this.isOpen() && !this.isConnecting) {\r\n        log.error(\r\n          \"[%s] The receiver '%s' with address '%s' is not open and is not currently \" +\r\n            \"establishing itself. Hence let's try to connect.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n        this.isConnecting = true;\r\n        await this._negotiateClaim();\r\n\r\n        const options = this._createMessageSessionOptions();\r\n\r\n        log.error(\r\n          \"[%s] Trying to create receiver '%s' with options %O\",\r\n          connectionId,\r\n          this.name,\r\n          options\r\n        );\r\n\r\n        this._receiver = await this._context.namespace.connection.createReceiver(options);\r\n        this.isConnecting = false;\r\n        const receivedSessionId =\r\n          this._receiver.source &&\r\n          this._receiver.source.filter &&\r\n          this._receiver.source.filter[Constants.sessionFilterName];\r\n        let errorMessage: string = \"\";\r\n        // SB allows a sessionId with empty string value :)\r\n        if (receivedSessionId == undefined) {\r\n          errorMessage =\r\n            `Received an incorrect sessionId '${receivedSessionId}' while creating ` +\r\n            `the receiver '${this.name}'.`;\r\n        }\r\n        if (this.sessionId != undefined && receivedSessionId !== this.sessionId) {\r\n          errorMessage =\r\n            `Received sessionId '${receivedSessionId}' does not match the provided ` +\r\n            `sessionId '${this.sessionId}' while creating the receiver '${this.name}'.`;\r\n        }\r\n        if (errorMessage) {\r\n          const error = translate({\r\n            description: errorMessage,\r\n            condition: ErrorNameConditionMapper.SessionCannotBeLockedError\r\n          });\r\n          log.error(\"[%s] %O\", this._context.namespace.connectionId, error);\r\n          throw error;\r\n        }\r\n        if (this.sessionId == undefined) this.sessionId = receivedSessionId;\r\n        this.sessionLockedUntilUtc = convertTicksToDate(\r\n          this._receiver.properties[\"com.microsoft:locked-until-utc\"]\r\n        );\r\n        log.messageSession(\r\n          \"[%s] Session with id '%s' is locked until: '%s'.\",\r\n          connectionId,\r\n          this.sessionId,\r\n          this.sessionLockedUntilUtc.toISOString()\r\n        );\r\n        log.error(\r\n          \"[%s] Receiver '%s' for sessionId '%s' has established itself.\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId\r\n        );\r\n        log.messageSession(\r\n          \"Promise to create the receiver resolved. \" + \"Created receiver with name: \",\r\n          this.name\r\n        );\r\n        log.messageSession(\r\n          \"[%s] Receiver '%s' created with receiver options: %O\",\r\n          connectionId,\r\n          this.name,\r\n          options\r\n        );\r\n        if (!this._context.messageSessions[this.sessionId!]) {\r\n          this._context.messageSessions[this.sessionId!] = this;\r\n        }\r\n        this._totalAutoLockRenewDuration = Date.now() + this.maxAutoRenewDurationInSeconds * 1000;\r\n        await this._ensureTokenRenewal();\r\n        await this._ensureSessionLockRenewal();\r\n      } else {\r\n        log.error(\r\n          \"[%s] The receiver '%s' for sessionId '%s' is open -> %s and is connecting \" +\r\n            \"-> %s. Hence not reconnecting.\",\r\n          connectionId,\r\n          this.name,\r\n          this.sessionId,\r\n          this.isOpen(),\r\n          this.isConnecting\r\n        );\r\n      }\r\n    } catch (err) {\r\n      this.isConnecting = false;\r\n      err = translate(err);\r\n      log.error(\r\n        \"[%s] An error occured while creating the receiver '%s': %O\",\r\n        this._context.namespace.connectionId,\r\n        this.name,\r\n        err\r\n      );\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the options that need to be specified while creating an AMQP receiver link.\r\n   */\r\n  private _createMessageSessionOptions(): ReceiverOptions {\r\n    const rcvrOptions: ReceiverOptions = {\r\n      name: this.name,\r\n      autoaccept: false,\r\n      // receiveAndDelete -> first(0), peekLock -> second (1)\r\n      rcv_settle_mode: this.receiveMode === ReceiveMode.receiveAndDelete ? 0 : 1,\r\n      // receiveAndDelete -> settled (1), peekLock -> unsettled (0)\r\n      snd_settle_mode: this.receiveMode === ReceiveMode.receiveAndDelete ? 1 : 0,\r\n      source: {\r\n        address: this.address,\r\n        filter: {}\r\n      },\r\n      credit_window: 0,\r\n      onClose: (context) =>\r\n        this._onAmqpClose(context).catch(() => {\r\n          /* */\r\n        }),\r\n      onSessionClose: (context) =>\r\n        this._onSessionClose(context).catch(() => {\r\n          /* */\r\n        }),\r\n      onError: this._onAmqpError,\r\n      onSessionError: this._onSessionError,\r\n      onSettled: this._onSettled\r\n    };\r\n    (rcvrOptions.source as any).filter[Constants.sessionFilterName] = this.sessionId;\r\n    return rcvrOptions;\r\n  }\r\n\r\n  /**\r\n   * Ensures that the session lock is renewed before it expires. The lock will not be renewed for\r\n   * more than the configured totalAutoLockRenewDuration.\r\n   */\r\n  private _ensureSessionLockRenewal(): void {\r\n    if (\r\n      this.autoRenewLock &&\r\n      new Date(this._totalAutoLockRenewDuration) > this.sessionLockedUntilUtc! &&\r\n      Date.now() < this._totalAutoLockRenewDuration &&\r\n      this.isOpen()\r\n    ) {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const nextRenewalTimeout = calculateRenewAfterDuration(this.sessionLockedUntilUtc!);\r\n      this._sessionLockRenewalTimer = setTimeout(async () => {\r\n        try {\r\n          log.messageSession(\r\n            \"[%s] Attempting to renew the session lock for MessageSession '%s' \" +\r\n              \"with name '%s'.\",\r\n            connectionId,\r\n            this.sessionId,\r\n            this.name\r\n          );\r\n          this.sessionLockedUntilUtc = await this._context.managementClient!.renewSessionLock(\r\n            this.sessionId!,\r\n            {\r\n              delayInSeconds: 0,\r\n              timeoutInSeconds: 10,\r\n              times: 4\r\n            }\r\n          );\r\n          log.receiver(\r\n            \"[%s] Successfully renewed the session lock for MessageSession '%s' \" +\r\n              \"with name '%s'.\",\r\n            connectionId,\r\n            this.sessionId,\r\n            this.name\r\n          );\r\n          log.receiver(\r\n            \"[%s] Calling _ensureSessionLockRenewal() again for MessageSession '%s'.\",\r\n            connectionId,\r\n            this.sessionId\r\n          );\r\n          this._ensureSessionLockRenewal();\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] An error occurred while renewing the session lock for MessageSession \" +\r\n              \"'%s' with name '%s': %O\",\r\n            this._context.namespace.connectionId,\r\n            this.sessionId,\r\n            this.name,\r\n            err\r\n          );\r\n        }\r\n      }, nextRenewalTimeout);\r\n      log.messageSession(\r\n        \"[%s] MessageSession '%s' with name '%s', has next session lock renewal \" +\r\n          \"in %d seconds @(%s).\",\r\n        this._context.namespace.connectionId,\r\n        this.sessionId,\r\n        this.name,\r\n        nextRenewalTimeout / 1000,\r\n        new Date(Date.now() + nextRenewalTimeout).toString()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance of the MessageSession based on the provided parameters.\r\n   * @param context The client entity context\r\n   * @param options Options that can be provided while creating the MessageSession.\r\n   */\r\n  static async create(\r\n    context: ClientEntityContext,\r\n    options?: MessageSessionOptions\r\n  ): Promise<MessageSession> {\r\n    throwErrorIfConnectionClosed(context.namespace);\r\n    const messageSession = new MessageSession(context, options);\r\n    await messageSession._init();\r\n    return messageSession;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as log from \"../log\";\r\nimport {\r\n  messageProperties,\r\n  Sender,\r\n  EventContext,\r\n  OnAmqpEvent,\r\n  SenderOptions,\r\n  SenderEvents,\r\n  message,\r\n  AmqpError,\r\n  generate_uuid\r\n} from \"rhea-promise\";\r\nimport {\r\n  defaultLock,\r\n  Func,\r\n  retry,\r\n  translate,\r\n  AmqpMessage,\r\n  ErrorNameConditionMapper,\r\n  RetryConfig,\r\n  RetryOperationType,\r\n  Constants,\r\n  randomNumberFromInterval\r\n} from \"@azure/amqp-common\";\r\nimport { SendableMessageInfo } from \"../serviceBusMessage\";\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\nimport { LinkEntity } from \"./linkEntity\";\r\nimport { getUniqueName, throwErrorIfConnectionClosed } from \"../util/utils\";\r\n\r\n/**\r\n * @internal\r\n */\r\ninterface CreateSenderOptions {\r\n  newName?: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Describes the MessageSender that will send messages to ServiceBus.\r\n * @class MessageSender\r\n */\r\nexport class MessageSender extends LinkEntity {\r\n  /**\r\n   * @property {string} senderLock The unqiue lock name per connection that is used to acquire the\r\n   * lock for establishing a sender link by an entity on that connection.\r\n   * @readonly\r\n   */\r\n  readonly senderLock: string = `sender-${generate_uuid()}`;\r\n  /**\r\n   * @property {OnAmqpEvent} _onAmqpError The handler function to handle errors that happen on the\r\n   * underlying sender.\r\n   * @readonly\r\n   */\r\n  private readonly _onAmqpError: OnAmqpEvent;\r\n  /**\r\n   * @property {OnAmqpEvent} _onAmqpClose The handler function to handle \"sender_close\" event\r\n   * that happens on the underlying sender.\r\n   * @readonly\r\n   */\r\n  private readonly _onAmqpClose: OnAmqpEvent;\r\n  /**\r\n   * @property {OnAmqpEvent} _onSessionError The message handler that will be set as the handler on\r\n   * the underlying rhea sender's session for the \"session_error\" event.\r\n   * @private\r\n   */\r\n  private _onSessionError: OnAmqpEvent;\r\n  /**\r\n   * @property {OnAmqpEvent} _onSessionClose The message handler that will be set as the handler on\r\n   * the underlying rhea sender's session for the \"session_close\" event.\r\n   * @private\r\n   */\r\n  private _onSessionClose: OnAmqpEvent;\r\n  /**\r\n   * @property {Sender} [_sender] The AMQP sender link.\r\n   * @private\r\n   */\r\n  private _sender?: Sender;\r\n\r\n  /**\r\n   * Creates a new MessageSender instance.\r\n   * @constructor\r\n   * @param {ClientEntityContext} context The client entity context.\r\n   */\r\n  constructor(context: ClientEntityContext) {\r\n    super(context.entityPath, context, {\r\n      address: context.entityPath,\r\n      audience: `${context.namespace.config.endpoint}${context.entityPath}`\r\n    });\r\n    this._onAmqpError = (context: EventContext) => {\r\n      const senderError = context.sender && context.sender.error;\r\n      if (senderError) {\r\n        const err = translate(senderError);\r\n        log.error(\r\n          \"[%s] An error occurred for sender '%s': %O.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          err\r\n        );\r\n      }\r\n    };\r\n\r\n    this._onSessionError = (context: EventContext) => {\r\n      const sessionError = context.session && context.session.error;\r\n      if (sessionError) {\r\n        const err = translate(sessionError);\r\n        log.error(\r\n          \"[%s] An error occurred on the session of sender '%s': %O.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          err\r\n        );\r\n      }\r\n    };\r\n\r\n    this._onAmqpClose = async (context: EventContext) => {\r\n      const sender = this._sender || context.sender!;\r\n      const senderError = context.sender && context.sender.error;\r\n      if (senderError) {\r\n        log.error(\r\n          \"[%s] 'sender_close' event occurred for sender '%s' with address '%s'. \" +\r\n            \"The associated error is: %O\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address,\r\n          senderError\r\n        );\r\n      }\r\n      if (sender && !sender.isItselfClosed()) {\r\n        if (!this.isConnecting) {\r\n          log.error(\r\n            \"[%s] 'sender_close' event occurred on the sender '%s' with address '%s' \" +\r\n              \"and the sdk did not initiate this. The sender is not reconnecting. Hence, calling \" +\r\n              \"detached from the _onAmqpClose() handler.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n          await this.detached(senderError);\r\n        } else {\r\n          log.error(\r\n            \"[%s] 'sender_close' event occurred on the sender '%s' with address '%s' \" +\r\n              \"and the sdk did not initate this. Moreover the sender is already re-connecting. \" +\r\n              \"Hence not calling detached from the _onAmqpClose() handler.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        }\r\n      } else {\r\n        log.error(\r\n          \"[%s] 'sender_close' event occurred on the sender '%s' with address '%s' \" +\r\n            \"because the sdk initiated it. Hence not calling detached from the _onAmqpClose\" +\r\n            \"() handler.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n      }\r\n    };\r\n\r\n    this._onSessionClose = async (context: EventContext) => {\r\n      const sender = this._sender || context.sender!;\r\n      const sessionError = context.session && context.session.error;\r\n      if (sessionError) {\r\n        log.error(\r\n          \"[%s] 'session_close' event occurred for sender '%s' with address '%s'. \" +\r\n            \"The associated error is: %O\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address,\r\n          sessionError\r\n        );\r\n      }\r\n      if (sender && !sender.isSessionItselfClosed()) {\r\n        if (!this.isConnecting) {\r\n          log.error(\r\n            \"[%s] 'session_close' event occurred on the session of sender '%s' with \" +\r\n              \"address '%s' and the sdk did not initiate this. Hence calling detached from the \" +\r\n              \"_onSessionClose() handler.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n          await this.detached(sessionError);\r\n        } else {\r\n          log.error(\r\n            \"[%s] 'session_close' event occurred on the session of sender '%s' with \" +\r\n              \"address '%s' and the sdk did not initiate this. Moreover the sender is already \" +\r\n              \"re-connecting. Hence not calling detached from the _onSessionClose() handler.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        }\r\n      } else {\r\n        log.error(\r\n          \"[%s] 'session_close' event occurred on the session of sender '%s' with address \" +\r\n            \"'%s' because the sdk initiated it. Hence not calling detached from the _onSessionClose\" +\r\n            \"() handler.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Will reconnect the sender link if necessary.\r\n   * @param {AmqpError | Error} [senderError] The sender error if any.\r\n   * @returns {Promise<void>} Promise<void>.\r\n   */\r\n  async detached(senderError?: AmqpError | Error): Promise<void> {\r\n    try {\r\n      const wasCloseInitiated = this._sender && this._sender.isItselfClosed();\r\n      // Clears the token renewal timer. Closes the link and its session if they are open.\r\n      // Removes the link and its session if they are present in rhea's cache.\r\n      await this._closeLink(this._sender);\r\n      // We should attempt to reopen only when the sender(sdk) did not initiate the close\r\n      let shouldReopen = false;\r\n      if (senderError && !wasCloseInitiated) {\r\n        const translatedError = translate(senderError);\r\n        if (translatedError.retryable) {\r\n          shouldReopen = true;\r\n          log.error(\r\n            \"[%s] close() method of Sender '%s' with address '%s' was not called. There \" +\r\n              \"was an accompanying error an it is retryable. This is a candidate for re-establishing \" +\r\n              \"the sender link.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        } else {\r\n          log.error(\r\n            \"[%s] close() method of Sender '%s' with address '%s' was not called. There \" +\r\n              \"was an accompanying error and it is NOT retryable. Hence NOT re-establishing \" +\r\n              \"the sender link.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        }\r\n      } else if (!wasCloseInitiated) {\r\n        shouldReopen = true;\r\n        log.error(\r\n          \"[%s] close() method of Sender '%s' with address '%s' was not called. There \" +\r\n            \"was no accompanying error as well. This is a candidate for re-establishing \" +\r\n            \"the sender link.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n      } else {\r\n        const state: any = {\r\n          wasCloseInitiated: wasCloseInitiated,\r\n          senderError: senderError,\r\n          _sender: this._sender\r\n        };\r\n        log.error(\r\n          \"[%s] Something is busted. State of sender '%s' with address '%s' is: %O\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address,\r\n          state\r\n        );\r\n      }\r\n      if (shouldReopen) {\r\n        await defaultLock.acquire(this.senderLock, () => {\r\n          const options: SenderOptions = this._createSenderOptions({\r\n            newName: true\r\n          });\r\n          // shall retry forever at an interval of 15 seconds if the error is a retryable error\r\n          // else bail out when the error is not retryable or the oepration succeeds.\r\n          const config: RetryConfig<void> = {\r\n            operation: () => this._init(options),\r\n            connectionId: this._context.namespace.connectionId!,\r\n            operationType: RetryOperationType.senderLink,\r\n            times: Constants.defaultConnectionRetryAttempts,\r\n            delayInSeconds: 15\r\n          };\r\n          return retry<void>(config);\r\n        });\r\n      }\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] An error occurred while processing detached() of Sender '%s' with address \" +\r\n          \"'%s': %O\",\r\n        this._context.namespace.connectionId,\r\n        this.name,\r\n        this.address,\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes the sender fromt the context. Clears the token renewal timer. Closes the sender link.\r\n   * @return {Promise<void>} Promise<void>\r\n   */\r\n  async close(): Promise<void> {\r\n    if (this._sender) {\r\n      log.sender(\r\n        \"[%s] Closing the Sender for the entity '%s'.\",\r\n        this._context.namespace.connectionId,\r\n        this._context.entityPath\r\n      );\r\n      const senderLink = this._sender;\r\n      this._deleteFromCache();\r\n      await this._closeLink(senderLink);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the AMQP sender link is open. If open then returns true else returns false.\r\n   * @return {boolean} boolean\r\n   */\r\n  isOpen(): boolean {\r\n    const result: boolean = this._sender! && this._sender!.isOpen();\r\n    log.error(\r\n      \"[%s] Sender '%s' with address '%s' is open? -> %s\",\r\n      this._context.namespace.connectionId,\r\n      this.name,\r\n      this.address,\r\n      result\r\n    );\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Sends the given message, with the given options on this link\r\n   *\r\n   * @param {SendableMessageInfo} data Message to send.  Will be sent as UTF8-encoded JSON string.\r\n   * @returns {Promise<void>}\r\n   */\r\n  async send(data: SendableMessageInfo): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    try {\r\n      if (!data || (data && typeof data !== \"object\")) {\r\n        throw new Error(\"data is required and it must be of type object.\");\r\n      }\r\n\r\n      if (!this.isOpen()) {\r\n        log.sender(\r\n          \"Acquiring lock %s for initializing the session, sender and \" +\r\n            \"possibly the connection.\",\r\n          this.senderLock\r\n        );\r\n        await defaultLock.acquire(this.senderLock, () => {\r\n          return this._init();\r\n        });\r\n      }\r\n      const message = SendableMessageInfo.toAmqpMessage(data);\r\n      message.body = this._context.namespace.dataTransformer.encode(data.body);\r\n      return await this._trySend(message);\r\n    } catch (err) {\r\n      log.error(\"An error occurred while sending the message %O\", err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a batch of Message to the ServiceBus in a single AMQP message. The \"message_annotations\",\r\n   * \"application_properties\" and \"properties\" of the first message will be set as that\r\n   * of the envelope (batch message).\r\n   * @param {Array<Message>} datas  An array of Message objects to be sent in a\r\n   * Batch message.\r\n   * @return {Promise<void>}\r\n   */\r\n  async sendBatch(datas: SendableMessageInfo[]): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    try {\r\n      if (!datas || (datas && !Array.isArray(datas))) {\r\n        throw new Error(\"data is required and it must be an Array.\");\r\n      }\r\n\r\n      if (!this.isOpen()) {\r\n        log.sender(\r\n          \"Acquiring lock %s for initializing the session, sender and \" +\r\n            \"possibly the connection.\",\r\n          this.senderLock\r\n        );\r\n        await defaultLock.acquire(this.senderLock, () => {\r\n          return this._init();\r\n        });\r\n      }\r\n      log.sender(\r\n        \"[%s] Sender '%s', trying to send Message[]: %O\",\r\n        this._context.namespace.connectionId,\r\n        this.name,\r\n        datas\r\n      );\r\n      const messages: AmqpMessage[] = [];\r\n      // Convert Message to AmqpMessage.\r\n      for (let i = 0; i < datas.length; i++) {\r\n        const message = SendableMessageInfo.toAmqpMessage(datas[i]);\r\n        message.body = this._context.namespace.dataTransformer.encode(datas[i].body);\r\n        messages[i] = message;\r\n      }\r\n      // Encode every amqp message and then convert every encoded message to amqp data section\r\n      const batchMessage: AmqpMessage = {\r\n        body: message.data_sections(messages.map(message.encode))\r\n      };\r\n      // Set message_annotations, application_properties and properties of the first message as\r\n      // that of the envelope (batch message).\r\n      if (messages[0].message_annotations) {\r\n        batchMessage.message_annotations = messages[0].message_annotations;\r\n      }\r\n      if (messages[0].application_properties) {\r\n        batchMessage.application_properties = messages[0].application_properties;\r\n      }\r\n      for (const prop of messageProperties) {\r\n        if ((messages[0] as any)[prop]) {\r\n          (batchMessage as any)[prop] = (messages[0] as any)[prop];\r\n        }\r\n      }\r\n\r\n      // Finally encode the envelope (batch message).\r\n      const encodedBatchMessage = message.encode(batchMessage);\r\n      log.sender(\r\n        \"[%s]Sender '%s', sending encoded batch message.\",\r\n        this._context.namespace.connectionId,\r\n        this.name,\r\n        encodedBatchMessage\r\n      );\r\n      return await this._trySend(encodedBatchMessage, undefined, 0x80013700);\r\n    } catch (err) {\r\n      log.error(\"An error occurred while sending the batch message %O\", err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  private _deleteFromCache(): void {\r\n    this._sender = undefined;\r\n    delete this._context.sender;\r\n    log.error(\r\n      \"[%s] Deleted the sender '%s' with address '%s' from the client cache.\",\r\n      this._context.namespace.connectionId,\r\n      this.name,\r\n      this.address\r\n    );\r\n  }\r\n\r\n  private _createSenderOptions(options: CreateSenderOptions): SenderOptions {\r\n    if (options.newName) this.name = getUniqueName(this._context.entityPath);\r\n    const srOptions: SenderOptions = {\r\n      name: this.name,\r\n      target: {\r\n        address: this.address\r\n      },\r\n      onError: this._onAmqpError,\r\n      onClose: this._onAmqpClose,\r\n      onSessionError: this._onSessionError,\r\n      onSessionClose: this._onSessionClose\r\n    };\r\n    log.sender(\"Creating sender with options: %O\", srOptions);\r\n    return srOptions;\r\n  }\r\n\r\n  /**\r\n   * Tries to send the message to ServiceBus if there is enough credit to send them\r\n   * and the circular buffer has available space to settle the message after sending them.\r\n   *\r\n   * We have implemented a synchronous send over here in the sense that we shall be waiting\r\n   * for the message to be accepted or rejected and accordingly resolve or reject the promise.\r\n   *\r\n   * @param message The message to be sent to ServiceBus.\r\n   * @return {Promise<Delivery>} Promise<Delivery>\r\n   */\r\n  private _trySend(message: SendableMessageInfo, tag?: any, format?: number): Promise<void> {\r\n    const sendEventPromise = () =>\r\n      new Promise<void>((resolve, reject) => {\r\n        let waitTimer: any;\r\n        log.sender(\r\n          \"[%s] Sender '%s', credit: %d available: %d\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this._sender!.credit,\r\n          this._sender!.session.outgoing.available()\r\n        );\r\n        if (this._sender!.sendable()) {\r\n          log.sender(\r\n            \"[%s] Sender '%s', sending message: %O\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            message\r\n          );\r\n          let onRejected: Func<EventContext, void>;\r\n          let onReleased: Func<EventContext, void>;\r\n          let onModified: Func<EventContext, void>;\r\n          let onAccepted: Func<EventContext, void>;\r\n          const removeListeners = (): void => {\r\n            clearTimeout(waitTimer);\r\n            this._sender!.removeListener(SenderEvents.rejected, onRejected);\r\n            this._sender!.removeListener(SenderEvents.accepted, onAccepted);\r\n            this._sender!.removeListener(SenderEvents.released, onReleased);\r\n            this._sender!.removeListener(SenderEvents.modified, onModified);\r\n          };\r\n\r\n          onAccepted = (context: EventContext) => {\r\n            // Since we will be adding listener for accepted and rejected event every time\r\n            // we send a message, we need to remove listener for both the events.\r\n            // This will ensure duplicate listeners are not added for the same event.\r\n            removeListeners();\r\n            log.sender(\r\n              \"[%s] Sender '%s', got event accepted.\",\r\n              this._context.namespace.connectionId,\r\n              this.name\r\n            );\r\n            resolve();\r\n          };\r\n          onRejected = (context: EventContext) => {\r\n            removeListeners();\r\n            log.error(\r\n              \"[%s] Sender '%s', got event rejected.\",\r\n              this._context.namespace.connectionId,\r\n              this.name\r\n            );\r\n            const err = translate(context!.delivery!.remote_state!.error);\r\n            log.error(err);\r\n            reject(err);\r\n          };\r\n          onReleased = (context: EventContext) => {\r\n            removeListeners();\r\n            log.error(\r\n              \"[%s] Sender '%s', got event released.\",\r\n              this._context.namespace.connectionId,\r\n              this.name\r\n            );\r\n            let err: Error;\r\n            if (context!.delivery!.remote_state!.error) {\r\n              err = translate(context!.delivery!.remote_state!.error);\r\n            } else {\r\n              err = new Error(\r\n                `[${this._context.namespace.connectionId}]Sender '${this.name}', ` +\r\n                  `received a release disposition.Hence we are rejecting the promise.`\r\n              );\r\n            }\r\n            log.error(err);\r\n            reject(err);\r\n          };\r\n          onModified = (context: EventContext) => {\r\n            removeListeners();\r\n            log.error(\r\n              \"[%s] Sender '%s', got event modified.\",\r\n              this._context.namespace.connectionId,\r\n              this.name\r\n            );\r\n            let err: Error;\r\n            if (context!.delivery!.remote_state!.error) {\r\n              err = translate(context!.delivery!.remote_state!.error);\r\n            } else {\r\n              err = new Error(\r\n                `[${this._context.namespace.connectionId}]Sender \"${this.name}\", ` +\r\n                  `received a modified disposition.Hence we are rejecting the promise.`\r\n              );\r\n            }\r\n            log.error(err);\r\n            reject(err);\r\n          };\r\n\r\n          const actionAfterTimeout = () => {\r\n            removeListeners();\r\n            const desc: string =\r\n              `[${this._context.namespace.connectionId}] Sender \"${this.name}\" ` +\r\n              `with address \"${this.address}\", was not able to send the message right now, due ` +\r\n              `to operation timeout.`;\r\n            log.error(desc);\r\n            const e: AmqpError = {\r\n              condition: ErrorNameConditionMapper.ServiceUnavailableError,\r\n              description: desc\r\n            };\r\n            return reject(translate(e));\r\n          };\r\n\r\n          this._sender!.on(SenderEvents.accepted, onAccepted);\r\n          this._sender!.on(SenderEvents.rejected, onRejected);\r\n          this._sender!.on(SenderEvents.modified, onModified);\r\n          this._sender!.on(SenderEvents.released, onReleased);\r\n          waitTimer = setTimeout(\r\n            actionAfterTimeout,\r\n            Constants.defaultOperationTimeoutInSeconds * 1000\r\n          );\r\n          const delivery = this._sender!.send(message, tag, format);\r\n          log.sender(\r\n            \"[%s] Sender '%s', sent message with delivery id: %d\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            delivery.id\r\n          );\r\n        } else {\r\n          // let us retry to send the message after some time.\r\n          const msg =\r\n            `[${this._context.namespace.connectionId}] Sender \"${this.name}\", ` +\r\n            `cannot send the message right now. Please try later.`;\r\n          log.error(msg);\r\n          const amqpError: AmqpError = {\r\n            condition: ErrorNameConditionMapper.SenderBusyError,\r\n            description: msg\r\n          };\r\n          reject(translate(amqpError));\r\n        }\r\n      });\r\n\r\n    const jitterInSeconds = randomNumberFromInterval(1, 4);\r\n    const config: RetryConfig<void> = {\r\n      operation: sendEventPromise,\r\n      connectionId: this._context.namespace.connectionId!,\r\n      operationType: RetryOperationType.sendMessage,\r\n      times: Constants.defaultRetryAttempts,\r\n      delayInSeconds: Constants.defaultDelayBetweenOperationRetriesInSeconds + jitterInSeconds\r\n    };\r\n\r\n    return retry<void>(config);\r\n  }\r\n\r\n  /**\r\n   * Initializes the sender session on the connection.\r\n   */\r\n  private async _init(options?: SenderOptions): Promise<void> {\r\n    try {\r\n      // isOpen isConnecting  Should establish\r\n      // true     false          No\r\n      // true     true           No\r\n      // false    true           No\r\n      // false    false          Yes\r\n      if (!this.isOpen()) {\r\n        log.error(\r\n          \"[%s] The sender '%s' with address '%s' is not open and is not currently \" +\r\n            \"establishing itself. Hence let's try to connect.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n        this.isConnecting = true;\r\n        await this._negotiateClaim();\r\n        log.error(\r\n          \"[%s] Trying to create sender '%s'...\",\r\n          this._context.namespace.connectionId,\r\n          this.name\r\n        );\r\n        if (!options) {\r\n          options = this._createSenderOptions({});\r\n        }\r\n        this._sender = await this._context.namespace.connection.createSender(options);\r\n        this.isConnecting = false;\r\n        log.error(\r\n          \"[%s] Sender '%s' with address '%s' has established itself.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n        this._sender.setMaxListeners(1000);\r\n        log.error(\r\n          \"[%s] Promise to create the sender resolved. Created sender with name: %s\",\r\n          this._context.namespace.connectionId,\r\n          this.name\r\n        );\r\n        log.error(\r\n          \"[%s] Sender '%s' created with sender options: %O\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          options\r\n        );\r\n        // It is possible for someone to close the sender and then start it again.\r\n        // Thus make sure that the sender is present in the client cache.\r\n        if (!this._sender) this._context.sender = this;\r\n        await this._ensureTokenRenewal();\r\n      }\r\n    } catch (err) {\r\n      err = translate(err);\r\n      log.error(\r\n        \"[%s] An error occurred while creating the sender %s\",\r\n        this._context.namespace.connectionId,\r\n        this.name,\r\n        err\r\n      );\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new sender to the specifiec ServiceBus entity, and optionally to a given\r\n   * partition if it is not present in the context or returns the one present in the context.\r\n   * @static\r\n   * @returns {Promise<MessageSender>}\r\n   */\r\n  static create(context: ClientEntityContext): MessageSender {\r\n    throwErrorIfConnectionClosed(context.namespace);\r\n    if (!context.sender) {\r\n      context.sender = new MessageSender(context);\r\n    }\r\n    return context.sender;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as Long from \"long\";\r\nimport * as log from \"./log\";\r\nimport { MessageSender } from \"./core/messageSender\";\r\nimport { SendableMessageInfo } from \"./serviceBusMessage\";\r\nimport { ScheduleMessage } from \"./core/managementClient\";\r\nimport { ClientEntityContext } from \"./clientEntityContext\";\r\nimport { throwErrorIfConnectionClosed } from \"./util/utils\";\r\n\r\n/**\r\n * The Sender class can be used to send messages, schedule messages to be sent at a later time\r\n * and cancel such scheduled messages.\r\n * Use the `getSender` function on the QueueClient or TopicClient to instantiate a Sender.\r\n * The Sender class is an abstraction over the underlying AMQP sender link.\r\n * @class Sender\r\n */\r\nexport class Sender {\r\n  /**\r\n   * @property {ClientEntityContext} _context Describes the amqp connection context for the Client.\r\n   */\r\n  private _context: ClientEntityContext;\r\n  private _isClosed: boolean = false;\r\n\r\n  /**\r\n   * @property {boolean} [isClosed] Denotes if close() was called on this sender.\r\n   * @readonly\r\n   */\r\n  public get isClosed(): boolean {\r\n    return this._isClosed;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(context: ClientEntityContext) {\r\n    throwErrorIfConnectionClosed(context.namespace);\r\n    this._context = context;\r\n  }\r\n  /**\r\n   * Sends the given message after creating an AMQP Sender link if it doesnt already exists.\r\n   *\r\n   * To send a message to a `session` and/or `partition` enabled Queue/Topic, set the `sessionId`\r\n   * and/or `partitionKey` properties respectively on the message.\r\n   *\r\n   * @param message - Message to send.\r\n   * @returns Promise<void>\r\n   */\r\n  async send(message: SendableMessageInfo): Promise<void> {\r\n    this.throwIfSenderOrConnectionClosed();\r\n    const sender = MessageSender.create(this._context);\r\n    return sender.send(message);\r\n  }\r\n\r\n  /**\r\n   * Sends the given messages in a batch i.e. in a single AMQP message after creating an AMQP Sender\r\n   * link if it doesnt already exists.\r\n   *\r\n   * To send messages to a `session` and/or `partition` enabled Queue/Topic, set the `sessionId`\r\n   * and/or `partitionKey` properties respectively on the messages. When doing so, all\r\n   * messages in the batch should have the same `sessionId` (if using sessions) and the same\r\n   * `parititionKey` (if using paritions).\r\n   *\r\n   * @param messages - An array of SendableMessageInfo objects to be sent in a Batch message.\r\n   * @return Promise<void>\r\n   */\r\n  async sendBatch(messages: SendableMessageInfo[]): Promise<void> {\r\n    this.throwIfSenderOrConnectionClosed();\r\n    const sender = MessageSender.create(this._context);\r\n    return sender.sendBatch(messages);\r\n  }\r\n\r\n  /**\r\n   * Schedules given message to appear on Service Bus Queue/Subscription at a later time.\r\n   *\r\n   * @param scheduledEnqueueTimeUtc - The UTC time at which the message should be enqueued.\r\n   * @param message - The message that needs to be scheduled.\r\n   * @returns Promise<Long> - The sequence number of the message that was scheduled.\r\n   * You will need the sequence number if you intend to cancel the scheduling of the message.\r\n   * Save the `Long` type as-is in your application without converting to number. Since JavaScript\r\n   * only supports 53 bit numbers, converting the `Long` to number will cause loss in precision.\r\n   */\r\n  async scheduleMessage(\r\n    scheduledEnqueueTimeUtc: Date,\r\n    message: SendableMessageInfo\r\n  ): Promise<Long> {\r\n    this.throwIfSenderOrConnectionClosed();\r\n    const scheduleMessages: ScheduleMessage[] = [\r\n      { message: message, scheduledEnqueueTimeUtc: scheduledEnqueueTimeUtc }\r\n    ];\r\n    const result = await this._context.managementClient!.scheduleMessages(scheduleMessages);\r\n    return result[0];\r\n  }\r\n\r\n  /**\r\n   * Schedules given messages to appear on Service Bus Queue/Subscription at a later time.\r\n   *\r\n   * @param scheduledEnqueueTimeUtc - The UTC time at which the messages should be enqueued.\r\n   * @param messages - Array of Messages that need to be scheduled.\r\n   * @returns Promise<Long[]> - The sequence numbers of messages that were scheduled.\r\n   * You will need the sequence number if you intend to cancel the scheduling of the messages.\r\n   * Save the `Long` type as-is in your application without converting to number. Since JavaScript\r\n   * only supports 53 bit numbers, converting the `Long` to number will cause loss in precision.\r\n   */\r\n  async scheduleMessages(\r\n    scheduledEnqueueTimeUtc: Date,\r\n    messages: SendableMessageInfo[]\r\n  ): Promise<Long[]> {\r\n    this.throwIfSenderOrConnectionClosed();\r\n    const scheduleMessages: ScheduleMessage[] = messages.map((message) => {\r\n      return {\r\n        message,\r\n        scheduledEnqueueTimeUtc\r\n      };\r\n    });\r\n    return this._context.managementClient!.scheduleMessages(scheduleMessages);\r\n  }\r\n\r\n  /**\r\n   * Cancels a message that was scheduled to appear on a ServiceBus Queue/Subscription.\r\n   * @param sequenceNumber - The sequence number of the message to be cancelled.\r\n   * @returns Promise<void>\r\n   */\r\n  async cancelScheduledMessage(sequenceNumber: Long): Promise<void> {\r\n    this.throwIfSenderOrConnectionClosed();\r\n    return this._context.managementClient!.cancelScheduledMessages([sequenceNumber]);\r\n  }\r\n\r\n  /**\r\n   * Cancels an array of messages that were scheduled to appear on a ServiceBus Queue/Subscription.\r\n   * @param sequenceNumbers - An Array of sequence numbers of the message to be cancelled.\r\n   * @returns Promise<void>\r\n   */\r\n  async cancelScheduledMessages(sequenceNumbers: Long[]): Promise<void> {\r\n    this.throwIfSenderOrConnectionClosed();\r\n    return this._context.managementClient!.cancelScheduledMessages(sequenceNumbers);\r\n  }\r\n\r\n  /**\r\n   * Closes the underlying AMQP sender link.\r\n   * Once closed, the sender cannot be used for any further operations.\r\n   * Use the `getSender` function on the QueueClient or TopicClient to instantiate a new Sender\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      if (\r\n        this._context.namespace.connection &&\r\n        this._context.namespace.connection.isOpen() &&\r\n        this._context.sender\r\n      ) {\r\n        await this._context.sender.close();\r\n      }\r\n      this._isClosed = true;\r\n    } catch (err) {\r\n      const msg =\r\n        `An error occurred while closing the sender for` +\r\n        `\"${this._context.entityPath}\": ${JSON.stringify(err)} `;\r\n      log.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  private throwIfSenderOrConnectionClosed(): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this._isClosed) {\r\n      throw new Error(\"The sender has been closed and can no longer be used.\");\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n  translate,\r\n  Constants,\r\n  MessagingError,\r\n  retry,\r\n  RetryOperationType,\r\n  RetryConfig,\r\n  ConditionErrorNameMapper\r\n} from \"@azure/amqp-common\";\r\nimport {\r\n  Receiver,\r\n  OnAmqpEvent,\r\n  EventContext,\r\n  ReceiverOptions,\r\n  AmqpError,\r\n  isAmqpError\r\n} from \"rhea-promise\";\r\nimport * as log from \"../log\";\r\nimport { LinkEntity } from \"./linkEntity\";\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\nimport { ServiceBusMessage, DispositionType, ReceiveMode } from \"../serviceBusMessage\";\r\nimport { getUniqueName, calculateRenewAfterDuration } from \"../util/utils\";\r\nimport { MessageHandlerOptions } from \"./streamingReceiver\";\r\nimport { messageDispositionTimeout } from \"../util/constants\";\r\n\r\n/**\r\n * @internal\r\n */\r\ninterface CreateReceiverOptions {\r\n  onMessage: OnAmqpEventAsPromise;\r\n  onClose: OnAmqpEventAsPromise;\r\n  onSessionClose: OnAmqpEventAsPromise;\r\n  onError: OnAmqpEvent;\r\n  onSettled: OnAmqpEvent;\r\n  onSessionError: OnAmqpEvent;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface OnAmqpEventAsPromise extends OnAmqpEvent {\r\n  (context: EventContext): Promise<void>;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface PromiseLike {\r\n  resolve: (value?: any) => void;\r\n  reject: (reason?: any) => void;\r\n  timer: NodeJS.Timer;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface DispositionOptions {\r\n  propertiesToModify?: { [key: string]: any };\r\n  error?: AmqpError;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum ReceiverType {\r\n  batching = \"batching\",\r\n  streaming = \"streaming\"\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ReceiveOptions extends MessageHandlerOptions {\r\n  /**\r\n   * @property {number} [receiveMode] The mode in which messages should be received.\r\n   * Default: ReceiveMode.peekLock\r\n   */\r\n  receiveMode?: ReceiveMode;\r\n}\r\n\r\n/**\r\n * Describes the message handler signature.\r\n */\r\nexport interface OnMessage {\r\n  /**\r\n   * Handler for processing each incoming message.\r\n   */\r\n  (message: ServiceBusMessage): Promise<void>;\r\n}\r\n\r\n/**\r\n * Describes the error handler signature.\r\n */\r\nexport interface OnError {\r\n  /**\r\n   * Handler for any error that occurs while receiving or processing messages.\r\n   */\r\n  (error: MessagingError | Error): void;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Describes the MessageReceiver that will receive messages from ServiceBus.\r\n * @class MessageReceiver\r\n */\r\nexport class MessageReceiver extends LinkEntity {\r\n  /**\r\n   * @property {string} receiverType The type of receiver: \"batching\" or \"streaming\".\r\n   */\r\n  receiverType: ReceiverType;\r\n  /**\r\n   * @property {number} [maxConcurrentCalls] The maximum number of messages that should be\r\n   * processed concurrently while in streaming mode. Once this limit has been reached, more\r\n   * messages will not be received until the user's message handler has completed processing current message.\r\n   * Default: 1\r\n   */\r\n  maxConcurrentCalls: number = 1;\r\n  /**\r\n   * @property {number} [receiveMode] The mode in which messages should be received.\r\n   * Default: ReceiveMode.peekLock\r\n   */\r\n  receiveMode: ReceiveMode;\r\n  /**\r\n   * @property {boolean} autoComplete Indicates whether `Message.complete()` should be called\r\n   * automatically after the message processing is complete while receiving messages with handlers\r\n   * or while messages are received using receiveBatch(). Default: false.\r\n   */\r\n  autoComplete: boolean;\r\n  /**\r\n   * @property {number} maxAutoRenewDurationInSeconds The maximum duration within which the\r\n   * lock will be renewed automatically. This value should be greater than the longest message\r\n   * lock duration; for example, the `lockDuration` property on the received message.\r\n   *\r\n   * Default: `300` (5 minutes);\r\n   */\r\n  maxAutoRenewDurationInSeconds: number;\r\n  /**\r\n   * @property {number} [newMessageWaitTimeoutInSeconds] The maximum amount of idle time the\r\n   * receiver will wait after a message has been received. If no messages are received by this\r\n   * time then the receive operation will end.\r\n   */\r\n  newMessageWaitTimeoutInSeconds?: number;\r\n  /**\r\n   * @property {boolean} autoRenewLock Should lock renewal happen automatically.\r\n   */\r\n  autoRenewLock: boolean;\r\n  /**\r\n   * @property {Receiver} [_receiver] The AMQP receiver link.\r\n   * @protected\r\n   */\r\n  protected _receiver?: Receiver;\r\n  /**\r\n   * @property {Map<number, Promise<any>>} _deliveryDispositionMap Maintains a map of deliveries that\r\n   * are being actively disposed. It acts as a store for correlating the responses received for\r\n   * active dispositions.\r\n   */\r\n  protected _deliveryDispositionMap: Map<number, PromiseLike> = new Map<number, PromiseLike>();\r\n  /**\r\n   * @property {OnMessage} _onMessage The message handler provided by the user that will be wrapped\r\n   * inside _onAmqpMessage.\r\n   * @protected\r\n   */\r\n  protected _onMessage!: OnMessage;\r\n  /**\r\n   * @property {OnMessage} _onError The error handler provided by the user that will be wrapped\r\n   * inside _onAmqpError.\r\n   * @protected\r\n   */\r\n  protected _onError?: OnError;\r\n  /**\r\n   * @property {OnAmqpEventAsPromise} _onAmqpMessage The message handler that will be set as the handler on the\r\n   * underlying rhea receiver for the \"message\" event.\r\n   * @protected\r\n   */\r\n  protected _onAmqpMessage: OnAmqpEventAsPromise;\r\n  /**\r\n   * @property {OnAmqpEventAsPromise} _onAmqpClose The message handler that will be set as the handler on the\r\n   * underlying rhea receiver for the \"receiver_close\" event.\r\n   * @protected\r\n   */\r\n  protected _onAmqpClose: OnAmqpEventAsPromise;\r\n  /**\r\n   * @property {OnAmqpEvent} _onSessionError The message handler that will be set as the handler on\r\n   * the underlying rhea receiver's session for the \"session_error\" event.\r\n   * @protected\r\n   */\r\n  protected _onSessionError: OnAmqpEvent;\r\n  /**\r\n   * @property {OnAmqpEventAsPromise} _onSessionClose The message handler that will be set as the handler on\r\n   * the underlying rhea receiver's session for the \"session_close\" event.\r\n   * @protected\r\n   */\r\n  protected _onSessionClose: OnAmqpEventAsPromise;\r\n  /**\r\n   * @property {OnAmqpEvent} _onAmqpError The message handler that will be set as the handler on the\r\n   * underlying rhea receiver for the \"receiver_error\" event.\r\n   * @protected\r\n   */\r\n  protected _onAmqpError: OnAmqpEvent;\r\n  /**\r\n   * @property {OnAmqpEvent} _onSettled The message handler that will be set as the handler on the\r\n   * underlying rhea receiver for the \"settled\" event.\r\n   * @protected\r\n   */\r\n  protected _onSettled: OnAmqpEvent;\r\n  /**\r\n   * @property {Map<string, Function>} _messageRenewLockTimers Maintains a map of messages for which\r\n   * the lock is automatically renewed.\r\n   * @protected\r\n   */\r\n  protected _messageRenewLockTimers: Map<string, NodeJS.Timer | undefined> = new Map<\r\n    string,\r\n    NodeJS.Timer | undefined\r\n  >();\r\n  /**\r\n   * @property {NodeJS.Timer} _newMessageReceivedTimer The timer that keeps track of time since the\r\n   * last message was received.\r\n   */\r\n  protected _newMessageReceivedTimer?: NodeJS.Timer;\r\n  /**\r\n   * Resets the `_newMessageReceivedTimer` timer when a new message is received.\r\n   */\r\n  protected resetTimerOnNewMessageReceived: () => void;\r\n  /**\r\n   * @property {Function} _clearMessageLockRenewTimer Clears the message lock renew timer for a\r\n   * specific messageId.\r\n   * @protected\r\n   */\r\n  protected _clearMessageLockRenewTimer: (messageId: string) => void;\r\n  /**\r\n   * @property {Function} _clearMessageLockRenewTimer Clears the message lock renew timer for all\r\n   * the active messages.\r\n   * @protected\r\n   */\r\n  protected _clearAllMessageLockRenewTimers: () => void;\r\n  constructor(context: ClientEntityContext, receiverType: ReceiverType, options?: ReceiveOptions) {\r\n    super(context.entityPath, context, {\r\n      address: context.entityPath,\r\n      audience: `${context.namespace.config.endpoint}${context.entityPath}`\r\n    });\r\n    if (!options) options = {};\r\n    this.receiverType = receiverType;\r\n    this.receiveMode = options.receiveMode || ReceiveMode.peekLock;\r\n    if (typeof options.maxConcurrentCalls === \"number\" && options.maxConcurrentCalls > 0) {\r\n      this.maxConcurrentCalls = options.maxConcurrentCalls;\r\n    }\r\n    this.newMessageWaitTimeoutInSeconds = options.newMessageWaitTimeoutInSeconds;\r\n    this.resetTimerOnNewMessageReceived = () => {\r\n      /** */\r\n    };\r\n    // If explicitly set to false then autoComplete is false else true (default).\r\n    this.autoComplete = options.autoComplete === false ? options.autoComplete : true;\r\n    this.maxAutoRenewDurationInSeconds =\r\n      options.maxMessageAutoRenewLockDurationInSeconds != undefined\r\n        ? options.maxMessageAutoRenewLockDurationInSeconds\r\n        : 300;\r\n    this.autoRenewLock =\r\n      this.maxAutoRenewDurationInSeconds > 0 && this.receiveMode === ReceiveMode.peekLock;\r\n    this._clearMessageLockRenewTimer = (messageId: string) => {\r\n      if (this._messageRenewLockTimers.has(messageId)) {\r\n        clearTimeout(this._messageRenewLockTimers.get(messageId) as NodeJS.Timer);\r\n        log.receiver(\r\n          \"[%s] Cleared the message renew lock timer for message with id '%s'.\",\r\n          this._context.namespace.connectionId,\r\n          messageId\r\n        );\r\n        this._messageRenewLockTimers.delete(messageId);\r\n      }\r\n    };\r\n    this._clearAllMessageLockRenewTimers = () => {\r\n      log.receiver(\r\n        \"[%s] Clearing message renew lock timers for all the active messages.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      for (const messageId of this._messageRenewLockTimers.keys()) {\r\n        this._clearMessageLockRenewTimer(messageId);\r\n      }\r\n    };\r\n    // setting all the handlers\r\n    this._onSettled = (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const delivery = context.delivery;\r\n      if (delivery) {\r\n        const id = delivery.id;\r\n        const state = delivery.remote_state;\r\n        const settled = delivery.remote_settled;\r\n        log.receiver(\r\n          \"[%s] Delivery with id %d, remote_settled: %s, remote_state: %o has been \" + \"received.\",\r\n          connectionId,\r\n          id,\r\n          settled,\r\n          state && state.error ? state.error : state\r\n        );\r\n        if (settled && this._deliveryDispositionMap.has(id)) {\r\n          const promise = this._deliveryDispositionMap.get(id) as PromiseLike;\r\n          clearTimeout(promise.timer);\r\n          log.receiver(\r\n            \"[%s] Found the delivery with id %d in the map and cleared the timer.\",\r\n            connectionId,\r\n            id\r\n          );\r\n          const deleteResult = this._deliveryDispositionMap.delete(id);\r\n          log.receiver(\r\n            \"[%s] Successfully deleted the delivery with id %d from the map.\",\r\n            connectionId,\r\n            id,\r\n            deleteResult\r\n          );\r\n          if (state && state.error && (state.error.condition || state.error.description)) {\r\n            const error = translate(state.error);\r\n            return promise.reject(error);\r\n          }\r\n\r\n          return promise.resolve();\r\n        }\r\n      }\r\n    };\r\n\r\n    this._onAmqpMessage = async (context: EventContext) => {\r\n      // If the receiver got closed in PeekLock mode, avoid processing the message as we\r\n      // cannot settle the message.\r\n      if (\r\n        this.receiveMode === ReceiveMode.peekLock &&\r\n        (!this._receiver || !this._receiver.isOpen())\r\n      ) {\r\n        log.error(\r\n          \"[%s] Not calling the user's message handler for the current message \" +\r\n            \"as the receiver '%s' is closed\",\r\n          this._context.namespace.connectionId,\r\n          this.name\r\n        );\r\n        return;\r\n      }\r\n\r\n      this.resetTimerOnNewMessageReceived();\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const bMessage: ServiceBusMessage = new ServiceBusMessage(\r\n        this._context,\r\n        context.message!,\r\n        context.delivery!\r\n      );\r\n      if (this.autoRenewLock) {\r\n        // - We need to renew locks before they expire by looking at bMessage.lockedUntilUtc.\r\n        // - This autorenewal needs to happen **NO MORE** than maxAutoRenewDurationInSeconds\r\n        // - We should be able to clear the renewal timer when the user's message handler\r\n        // is done (whether it succeeds or fails).\r\n        // Setting the messageId with undefined value in the _messageRenewockTimers Map because we\r\n        // track state by checking the presence of messageId in the map. It is removed from the map\r\n        // when an attempt is made to settle the message (either by the user or by the sdk) OR\r\n        // when the execution of user's message handler completes.\r\n        this._messageRenewLockTimers.set(bMessage.messageId as string, undefined);\r\n        log.receiver(\r\n          \"[%s] message with id '%s' is locked until %s.\",\r\n          connectionId,\r\n          bMessage.messageId,\r\n          bMessage.lockedUntilUtc!.toString()\r\n        );\r\n        const totalAutoLockRenewDuration = Date.now() + this.maxAutoRenewDurationInSeconds * 1000;\r\n        log.receiver(\r\n          \"[%s] Total autolockrenew duration for message with id '%s' is: \",\r\n          connectionId,\r\n          bMessage.messageId,\r\n          new Date(totalAutoLockRenewDuration).toString()\r\n        );\r\n        const autoRenewLockTask = (): void => {\r\n          if (\r\n            new Date(totalAutoLockRenewDuration) > bMessage.lockedUntilUtc! &&\r\n            Date.now() < totalAutoLockRenewDuration\r\n          ) {\r\n            if (this._messageRenewLockTimers.has(bMessage.messageId as string)) {\r\n              // TODO: We can run into problems with clock skew between the client and the server.\r\n              // It would be better to calculate the duration based on the \"lockDuration\" property\r\n              // of the queue. However, we do not have the management plane of the client ready for\r\n              // now. Hence we rely on the lockedUntilUtc property on the message set by ServiceBus.\r\n              const amount = calculateRenewAfterDuration(bMessage.lockedUntilUtc!);\r\n              log.receiver(\r\n                \"[%s] Sleeping for %d milliseconds while renewing the lock for \" +\r\n                  \"message with id '%s' is: \",\r\n                connectionId,\r\n                amount,\r\n                bMessage.messageId\r\n              );\r\n              // Setting the value of the messageId to the actual timer. This will be cleared when\r\n              // an attempt is made to settle the message (either by the user or by the sdk) OR\r\n              // when the execution of user's message handler completes.\r\n              this._messageRenewLockTimers.set(\r\n                bMessage.messageId as string,\r\n                setTimeout(async () => {\r\n                  try {\r\n                    log.receiver(\r\n                      \"[%s] Attempting to renew the lock for message with id '%s'.\",\r\n                      connectionId,\r\n                      bMessage.messageId\r\n                    );\r\n                    await this._context.managementClient!.renewLock(bMessage);\r\n                    log.receiver(\r\n                      \"[%s] Successfully renewed the lock for message with id '%s'.\",\r\n                      connectionId,\r\n                      bMessage.messageId\r\n                    );\r\n                    log.receiver(\r\n                      \"[%s] Calling the autorenewlock task again for message with \" + \"id '%s'.\",\r\n                      connectionId,\r\n                      bMessage.messageId\r\n                    );\r\n                    autoRenewLockTask();\r\n                  } catch (err) {\r\n                    log.error(\r\n                      \"[%s] An error occured while auto renewing the message lock '%s' \" +\r\n                        \"for message with id '%s': %O.\",\r\n                      connectionId,\r\n                      bMessage.lockToken,\r\n                      bMessage.messageId,\r\n                      err\r\n                    );\r\n                    // Let the user know that there was an error renewing the message lock.\r\n                    this._onError!(err);\r\n                  }\r\n                }, amount)\r\n              );\r\n            } else {\r\n              log.receiver(\r\n                \"[%s] Looks like the message lock renew timer has already been \" +\r\n                  \"cleared for message with id '%s'.\",\r\n                connectionId,\r\n                bMessage.messageId\r\n              );\r\n            }\r\n          } else {\r\n            log.receiver(\r\n              \"[%s] Current time %s exceeds the total autolockrenew duration %s for \" +\r\n                \"message with messageId '%s'. Hence we will stop the autoLockRenewTask.\",\r\n              connectionId,\r\n              new Date(Date.now()).toString(),\r\n              new Date(totalAutoLockRenewDuration).toString(),\r\n              bMessage.messageId\r\n            );\r\n            this._clearMessageLockRenewTimer(bMessage.messageId as string);\r\n          }\r\n        };\r\n        // start\r\n        autoRenewLockTask();\r\n      }\r\n      try {\r\n        await this._onMessage(bMessage);\r\n        this._clearMessageLockRenewTimer(bMessage.messageId as string);\r\n      } catch (err) {\r\n        // This ensures we call users' error handler when users' message handler throws.\r\n        if (!isAmqpError(err)) {\r\n          log.error(\r\n            \"[%s] An error occurred while running user's message handler for the message \" +\r\n              \"with id '%s' on the receiver '%s': %O\",\r\n            connectionId,\r\n            bMessage.messageId,\r\n            this.name,\r\n            err\r\n          );\r\n          this._onError!(err);\r\n        }\r\n\r\n        // Do not want renewLock to happen unnecessarily, while abandoning the message. Hence,\r\n        // doing this here. Otherwise, this should be done in finally.\r\n        this._clearMessageLockRenewTimer(bMessage.messageId as string);\r\n        const error = translate(err);\r\n        // Nothing much to do if user's message handler throws. Let us try abandoning the message.\r\n        if (\r\n          !bMessage.delivery.remote_settled &&\r\n          error.name !== ConditionErrorNameMapper[\"com.microsoft:message-lock-lost\"] &&\r\n          this.receiveMode === ReceiveMode.peekLock &&\r\n          this.isOpen() // only try to abandon the messages if the connection is still open\r\n        ) {\r\n          try {\r\n            log.error(\r\n              \"[%s] Abandoning the message with id '%s' on the receiver '%s' since \" +\r\n                \"an error occured: %O.\",\r\n              connectionId,\r\n              bMessage.messageId,\r\n              this.name,\r\n              error\r\n            );\r\n            await bMessage.abandon();\r\n          } catch (abandonError) {\r\n            const translatedError = translate(abandonError);\r\n            log.error(\r\n              \"[%s] An error occurred while abandoning the message with id '%s' on the \" +\r\n                \"receiver '%s': %O.\",\r\n              connectionId,\r\n              bMessage.messageId,\r\n              this.name,\r\n              translatedError\r\n            );\r\n            this._onError!(translatedError);\r\n          }\r\n        }\r\n        return;\r\n      } finally {\r\n        if (this._receiver) {\r\n          this._receiver.addCredit(1);\r\n        }\r\n      }\r\n\r\n      // If we've made it this far, then user's message handler completed fine. Let us try\r\n      // completing the message.\r\n      if (\r\n        this.autoComplete &&\r\n        this.receiveMode === ReceiveMode.peekLock &&\r\n        !bMessage.delivery.remote_settled\r\n      ) {\r\n        try {\r\n          log[this.receiverType](\r\n            \"[%s] Auto completing the message with id '%s' on \" + \"the receiver '%s'.\",\r\n            connectionId,\r\n            bMessage.messageId,\r\n            this.name\r\n          );\r\n          await bMessage.complete();\r\n        } catch (completeError) {\r\n          const translatedError = translate(completeError);\r\n          log.error(\r\n            \"[%s] An error occurred while completing the message with id '%s' on the \" +\r\n              \"receiver '%s': %O.\",\r\n            connectionId,\r\n            bMessage.messageId,\r\n            this.name,\r\n            translatedError\r\n          );\r\n          this._onError!(translatedError);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._onAmqpError = (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const receiver = this._receiver || context.receiver!;\r\n      const receiverError = context.receiver && context.receiver.error;\r\n      if (receiverError) {\r\n        const sbError = translate(receiverError);\r\n        log.error(\r\n          \"[%s] An error occurred for Receiver '%s': %O.\",\r\n          connectionId,\r\n          this.name,\r\n          sbError\r\n        );\r\n        if (!sbError.retryable) {\r\n          if (receiver && !receiver.isItselfClosed()) {\r\n            log.error(\r\n              \"[%s] Since the user did not close the receiver and the error is not \" +\r\n                \"retryable, we let the user know about it by calling the user's error handler.\",\r\n              connectionId\r\n            );\r\n            this._onError!(sbError);\r\n          } else {\r\n            log.error(\r\n              \"[%s] The received error is not retryable. However, the receiver was \" +\r\n                \"closed by the user. Hence not notifying the user's error handler.\",\r\n              connectionId\r\n            );\r\n          }\r\n        } else {\r\n          log.error(\r\n            \"[%s] Since received error is retryable, we will NOT notify the user's \" +\r\n              \"error handler.\",\r\n            connectionId\r\n          );\r\n        }\r\n      }\r\n      if (this._newMessageReceivedTimer) {\r\n        clearTimeout(this._newMessageReceivedTimer);\r\n      }\r\n    };\r\n\r\n    this._onSessionError = (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const receiver = this._receiver || context.receiver!;\r\n      const sessionError = context.session && context.session.error;\r\n      if (sessionError) {\r\n        const sbError = translate(sessionError);\r\n        log.error(\r\n          \"[%s] An error occurred on the session for Receiver '%s': %O.\",\r\n          connectionId,\r\n          this.name,\r\n          sbError\r\n        );\r\n        if (receiver && !receiver.isSessionItselfClosed() && !sbError.retryable) {\r\n          log.error(\r\n            \"[%s] Since the user did not close the receiver and the session error is not \" +\r\n              \"retryable, we let the user know about it by calling the user's error handler.\",\r\n            connectionId\r\n          );\r\n          this._onError!(sbError);\r\n        }\r\n      }\r\n      if (this._newMessageReceivedTimer) {\r\n        clearTimeout(this._newMessageReceivedTimer);\r\n      }\r\n    };\r\n\r\n    this._onAmqpClose = async (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const receiverError = context.receiver && context.receiver.error;\r\n      const receiver = this._receiver || context.receiver!;\r\n      if (receiverError) {\r\n        log.error(\r\n          \"[%s] 'receiver_close' event occurred for receiver '%s' with address '%s'. \" +\r\n            \"The associated error is: %O\",\r\n          connectionId,\r\n          this.name,\r\n          this.address,\r\n          receiverError\r\n        );\r\n      }\r\n      this._clearAllMessageLockRenewTimers();\r\n      if (receiver && !receiver.isItselfClosed()) {\r\n        if (!this.isConnecting) {\r\n          log.error(\r\n            \"[%s] 'receiver_close' event occurred on the receiver '%s' with address '%s' \" +\r\n              \"and the sdk did not initiate this. The receiver is not reconnecting. Hence, calling \" +\r\n              \"detached from the _onAmqpClose() handler.\",\r\n            connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n          await this.detached(receiverError);\r\n        } else {\r\n          log.error(\r\n            \"[%s] 'receiver_close' event occurred on the receiver '%s' with address '%s' \" +\r\n              \"and the sdk did not initate this. Moreover the receiver is already re-connecting. \" +\r\n              \"Hence not calling detached from the _onAmqpClose() handler.\",\r\n            connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        }\r\n      } else {\r\n        log.error(\r\n          \"[%s] 'receiver_close' event occurred on the receiver '%s' with address '%s' \" +\r\n            \"because the sdk initiated it. Hence not calling detached from the _onAmqpClose\" +\r\n            \"() handler.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n      }\r\n    };\r\n\r\n    this._onSessionClose = async (context: EventContext) => {\r\n      const connectionId = this._context.namespace.connectionId;\r\n      const receiver = this._receiver || context.receiver!;\r\n      const sessionError = context.session && context.session.error;\r\n      if (sessionError) {\r\n        log.error(\r\n          \"[%s] 'session_close' event occurred for receiver '%s' with address '%s'. \" +\r\n            \"The associated error is: %O\",\r\n          connectionId,\r\n          this.name,\r\n          this.address,\r\n          sessionError\r\n        );\r\n      }\r\n      this._clearAllMessageLockRenewTimers();\r\n      if (receiver && !receiver.isSessionItselfClosed()) {\r\n        if (!this.isConnecting) {\r\n          log.error(\r\n            \"[%s] 'session_close' event occurred on the session of receiver '%s' with \" +\r\n              \"address '%s' and the sdk did not initiate this. Hence calling detached from the \" +\r\n              \"_onSessionClose() handler.\",\r\n            connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n          await this.detached(sessionError);\r\n        } else {\r\n          log.error(\r\n            \"[%s] 'session_close' event occurred on the session of receiver '%s' with \" +\r\n              \"address '%s' and the sdk did not initiate this. Moreover the receiver is already \" +\r\n              \"re-connecting. Hence not calling detached from the _onSessionClose() handler.\",\r\n            connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        }\r\n      } else {\r\n        log.error(\r\n          \"[%s] 'session_close' event occurred on the session of receiver '%s' with address \" +\r\n            \"'%s' because the sdk initiated it. Hence not calling detached from the _onSessionClose\" +\r\n            \"() handler.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Will reconnect the receiver link if necessary.\r\n   * @param {AmqpError | Error} [receiverError] The receiver error if any.\r\n   * @returns {Promise<void>} Promise<void>.\r\n   */\r\n  async detached(receiverError?: AmqpError | Error): Promise<void> {\r\n    const connectionId = this._context.namespace.connectionId;\r\n    try {\r\n      const wasCloseInitiated = this._receiver && this._receiver.isItselfClosed();\r\n      // Clears the token renewal timer. Closes the link and its session if they are open.\r\n      // Removes the link and its session if they are present in rhea's cache.\r\n      await this._closeLink(this._receiver);\r\n\r\n      if (this.receiverType === ReceiverType.batching) {\r\n        log.error(\r\n          \"[%s] Receiver '%s' with address '%s' is a Batching Receiver, so we will not be \" +\r\n            \"re-establishing the receiver link.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n        return;\r\n      }\r\n\r\n      // We should attempt to reopen only when the receiver(sdk) did not initiate the close\r\n      let shouldReopen = false;\r\n      if (receiverError && !wasCloseInitiated) {\r\n        const translatedError = translate(receiverError);\r\n        if (translatedError.retryable) {\r\n          shouldReopen = true;\r\n          log.error(\r\n            \"[%s] close() method of Receiver '%s' with address '%s' was not called. There \" +\r\n              \"was an accompanying error and it is retryable. This is a candidate for re-establishing \" +\r\n              \"the receiver link.\",\r\n            connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        } else {\r\n          log.error(\r\n            \"[%s] close() method of Receiver '%s' with address '%s' was not called. There \" +\r\n              \"was an accompanying error and it is NOT retryable. Hence NOT re-establishing \" +\r\n              \"the receiver link.\",\r\n            connectionId,\r\n            this.name,\r\n            this.address\r\n          );\r\n        }\r\n      } else if (!wasCloseInitiated) {\r\n        shouldReopen = true;\r\n        log.error(\r\n          \"[%s] close() method of Receiver '%s' with address '%s' was not called. \" +\r\n            \"There was no accompanying error as well. This is a candidate for re-establishing \" +\r\n            \"the receiver link.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n      } else {\r\n        const state: any = {\r\n          wasCloseInitiated: wasCloseInitiated,\r\n          receiverError: receiverError,\r\n          _receiver: this._receiver\r\n        };\r\n        log.error(\r\n          \"[%s] Something is busted. State of Receiver '%s' with address '%s' is: %O\",\r\n          connectionId,\r\n          this.name,\r\n          this.address,\r\n          state\r\n        );\r\n      }\r\n      if (shouldReopen) {\r\n        // provide a new name to the link while re-connecting it. This ensures that\r\n        // the service does not send an error stating that the link is still open.\r\n        const options: ReceiverOptions = this._createReceiverOptions(true);\r\n        // shall retry forever at an interval of 15 seconds if the error is a retryable error\r\n        // else bail out when the error is not retryable or the oepration succeeds.\r\n        const config: RetryConfig<void> = {\r\n          operation: () => this._init(options),\r\n          connectionId: connectionId,\r\n          operationType: RetryOperationType.receiverLink,\r\n          times: Constants.defaultConnectionRetryAttempts,\r\n          delayInSeconds: 15\r\n        };\r\n        await retry<void>(config);\r\n      }\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] An error occurred while processing detached() of Receiver '%s': %O \",\r\n        connectionId,\r\n        this.name,\r\n        this.address,\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the underlying AMQP receiver.\r\n   * @return {Promise<void>} Promise<void>.\r\n   */\r\n  async close(): Promise<void> {\r\n    log.receiver(\r\n      \"[%s] Closing the [%s]Receiver for entity '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this.receiverType,\r\n      this._context.entityPath\r\n    );\r\n    if (this._newMessageReceivedTimer) clearTimeout(this._newMessageReceivedTimer);\r\n    if (this._receiver) {\r\n      const receiverLink = this._receiver;\r\n      this._deleteFromCache();\r\n      await this._closeLink(receiverLink);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Settles the message with the specified disposition.\r\n   * @param message The ServiceBus Message that needs to be settled.\r\n   * @param operation The disposition type.\r\n   * @param options Optional parameters that can be provided while disposing the message.\r\n   */\r\n  async settleMessage(\r\n    message: ServiceBusMessage,\r\n    operation: DispositionType,\r\n    options?: DispositionOptions\r\n  ): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!options) options = {};\r\n      if (operation.match(/^(complete|abandon|defer|deadletter)$/) == undefined) {\r\n        return reject(new Error(`operation: '${operation}' is not a valid operation.`));\r\n      }\r\n      this._clearMessageLockRenewTimer(message.messageId as string);\r\n      const delivery = message.delivery;\r\n      const timer = setTimeout(() => {\r\n        this._deliveryDispositionMap.delete(delivery.id);\r\n        log.receiver(\r\n          \"[%s] Disposition for delivery id: %d, did not complete in %d milliseconds. \" +\r\n            \"Hence resolving the promise.\",\r\n          this._context.namespace.connectionId,\r\n          delivery.id,\r\n          messageDispositionTimeout\r\n        );\r\n        return resolve();\r\n      }, messageDispositionTimeout);\r\n      this._deliveryDispositionMap.set(delivery.id, {\r\n        resolve: resolve,\r\n        reject: reject,\r\n        timer: timer\r\n      });\r\n      if (operation === DispositionType.complete) {\r\n        delivery.accept();\r\n      } else if (operation === DispositionType.abandon) {\r\n        const params: any = {\r\n          undeliverable_here: false\r\n        };\r\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\r\n        delivery.modified(params);\r\n      } else if (operation === DispositionType.defer) {\r\n        const params: any = {\r\n          undeliverable_here: true\r\n        };\r\n        if (options.propertiesToModify) params.message_annotations = options.propertiesToModify;\r\n        delivery.modified(params);\r\n      } else if (operation === DispositionType.deadletter) {\r\n        delivery.reject(options.error || {});\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Determines whether the AMQP receiver link is open. If open then returns true else returns false.\r\n   * @return {boolean} boolean\r\n   */\r\n  isOpen(): boolean {\r\n    const result: boolean = this._receiver! && this._receiver!.isOpen();\r\n    log.error(\r\n      \"[%s] Receiver '%s' with address '%s' is open? -> %s\",\r\n      this._context.namespace.connectionId,\r\n      this.name,\r\n      this.address,\r\n      result\r\n    );\r\n    return result;\r\n  }\r\n\r\n  protected _deleteFromCache(): void {\r\n    this._receiver = undefined;\r\n    if (this.receiverType === ReceiverType.streaming) {\r\n      this._context.streamingReceiver = undefined;\r\n    } else if (this.receiverType === ReceiverType.batching) {\r\n      this._context.batchingReceiver = undefined;\r\n    }\r\n    log.error(\r\n      \"[%s] Deleted the receiver '%s' from the client cache.\",\r\n      this._context.namespace.connectionId,\r\n      this.name\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a new AMQP receiver under a new AMQP session.\r\n   * @protected\r\n   *\r\n   * @returns {Promise<void>} Promise<void>.\r\n   */\r\n  protected async _init(options?: ReceiverOptions): Promise<void> {\r\n    const connectionId = this._context.namespace.connectionId;\r\n    try {\r\n      if (!this.isOpen() && !this.isConnecting) {\r\n        log.error(\r\n          \"[%s] The receiver '%s' with address '%s' is not open and is not currently \" +\r\n            \"establishing itself. Hence let's try to connect.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n        this.isConnecting = true;\r\n        await this._negotiateClaim();\r\n        if (!options) {\r\n          options = this._createReceiverOptions();\r\n        }\r\n        log.error(\r\n          \"[%s] Trying to create receiver '%s' with options %O\",\r\n          connectionId,\r\n          this.name,\r\n          options\r\n        );\r\n\r\n        this._receiver = await this._context.namespace.connection.createReceiver(options);\r\n        this.isConnecting = false;\r\n        log.error(\r\n          \"[%s] Receiver '%s' with address '%s' has established itself.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address\r\n        );\r\n        log[this.receiverType](\r\n          \"Promise to create the receiver resolved. \" + \"Created receiver with name: \",\r\n          this.name\r\n        );\r\n        log[this.receiverType](\r\n          \"[%s] Receiver '%s' created with receiver options: %O\",\r\n          connectionId,\r\n          this.name,\r\n          options\r\n        );\r\n        // It is possible for someone to close the receiver and then start it again.\r\n        // Thus make sure that the receiver is present in the client cache.\r\n        if (this.receiverType === ReceiverType.streaming && !this._context.streamingReceiver) {\r\n          this._context.streamingReceiver = this as any;\r\n        } else if (this.receiverType === ReceiverType.batching && !this._context.batchingReceiver) {\r\n          this._context.batchingReceiver = this as any;\r\n        }\r\n        await this._ensureTokenRenewal();\r\n      } else {\r\n        log.error(\r\n          \"[%s] The receiver '%s' with address '%s' is open -> %s and is connecting \" +\r\n            \"-> %s. Hence not reconnecting.\",\r\n          connectionId,\r\n          this.name,\r\n          this.address,\r\n          this.isOpen(),\r\n          this.isConnecting\r\n        );\r\n      }\r\n    } catch (err) {\r\n      this.isConnecting = false;\r\n      err = translate(err);\r\n      log.error(\r\n        \"[%s] An error occured while creating the receiver '%s': %O\",\r\n        this._context.namespace.connectionId,\r\n        this.name,\r\n        err\r\n      );\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the options that need to be specified while creating an AMQP receiver link.\r\n   */\r\n  protected _createReceiverOptions(\r\n    useNewName?: boolean,\r\n    options?: CreateReceiverOptions\r\n  ): ReceiverOptions {\r\n    if (!options) {\r\n      options = {\r\n        onMessage: (context: EventContext) =>\r\n          this._onAmqpMessage(context).catch(() => {\r\n            /* */\r\n          }),\r\n        onClose: (context: EventContext) =>\r\n          this._onAmqpClose(context).catch(() => {\r\n            /* */\r\n          }),\r\n        onSessionClose: (context: EventContext) =>\r\n          this._onSessionClose(context).catch(() => {\r\n            /* */\r\n          }),\r\n        onError: this._onAmqpError,\r\n        onSessionError: this._onSessionError,\r\n        onSettled: this._onSettled\r\n      };\r\n    }\r\n    const rcvrOptions: ReceiverOptions = {\r\n      name: useNewName ? getUniqueName(this._context.entityPath) : this.name,\r\n      autoaccept: this.receiveMode === ReceiveMode.receiveAndDelete ? true : false,\r\n      // receiveAndDelete -> first(0), peekLock -> second (1)\r\n      rcv_settle_mode: this.receiveMode === ReceiveMode.receiveAndDelete ? 0 : 1,\r\n      // receiveAndDelete -> settled (1), peekLock -> unsettled (0)\r\n      snd_settle_mode: this.receiveMode === ReceiveMode.receiveAndDelete ? 1 : 0,\r\n      source: {\r\n        address: this.address\r\n      },\r\n      credit_window: 0,\r\n      ...options\r\n    };\r\n    return rcvrOptions;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n  MessageReceiver,\r\n  ReceiveOptions,\r\n  OnMessage,\r\n  OnError,\r\n  ReceiverType\r\n} from \"./messageReceiver\";\r\n\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\n\r\nimport * as log from \"../log\";\r\nimport { throwErrorIfConnectionClosed } from \"../util/utils\";\r\n\r\n/**\r\n * Describes the options to control receiving of messages in streaming mode.\r\n */\r\nexport interface MessageHandlerOptions {\r\n  /**\r\n   * @property {boolean} [autoComplete] Indicates whether the message (if not settled by the user)\r\n   * should be automatically completed after the user provided onMessage handler has been executed.\r\n   * Completing a message, removes it from the Queue/Subscription.\r\n   * - **Default**: `true`.\r\n   */\r\n  autoComplete?: boolean;\r\n  /**\r\n   * @property {number} [maxMessageAutoRenewLockDurationInSeconds] The maximum duration in seconds until which\r\n   * the lock on the message will be renewed automatically before the message is settled.\r\n   * - **Default**: `300` seconds (5 minutes).\r\n   * - **To disable autolock renewal**, set `maxMessageAutoRenewLockDurationInSeconds` to `0`.\r\n   */\r\n  maxMessageAutoRenewLockDurationInSeconds?: number;\r\n  /**\r\n   * @property {number} [newMessageWaitTimeoutInSeconds] The maximum amount of time the receiver\r\n   * will wait to receive a new message. If no new message is received in this time, then the\r\n   * receiver will be closed.\r\n   *\r\n   * Caution: When setting this value, take into account the time taken to process messages. Once\r\n   * the receiver is closed, operations like complete()/abandon()/defer()/deadletter() cannot be\r\n   * invoked on messages.\r\n   *\r\n   * If this option is not provided, then receiver link will stay open until manually closed.\r\n   */\r\n  newMessageWaitTimeoutInSeconds?: number;\r\n  /**\r\n   * @property {number} [maxConcurrentCalls] The maximum number of concurrent calls that the library\r\n   * can make to the user's message handler. Once this limit has been reached, more messages will\r\n   * not be received until atleast one of the calls to the user's message handler has completed.\r\n   * - **Default**: `1`.\r\n   */\r\n  maxConcurrentCalls?: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Describes the streaming receiver where the user can receive the message\r\n * by providing handler functions.\r\n * @class StreamingReceiver\r\n * @extends MessageReceiver\r\n */\r\nexport class StreamingReceiver extends MessageReceiver {\r\n  /**\r\n   * Instantiate a new Streaming receiver for receiving messages with handlers.\r\n   *\r\n   * @constructor\r\n   * @param {ClientEntityContext} context                      The client entity context.\r\n   * @param {ReceiveOptions} [options]                         Options for how you'd like to connect.\r\n   */\r\n  constructor(context: ClientEntityContext, options?: ReceiveOptions) {\r\n    super(context, ReceiverType.streaming, options);\r\n\r\n    this.resetTimerOnNewMessageReceived = () => {\r\n      if (this._newMessageReceivedTimer) clearTimeout(this._newMessageReceivedTimer);\r\n      if (this.newMessageWaitTimeoutInSeconds) {\r\n        this._newMessageReceivedTimer = setTimeout(async () => {\r\n          const msg =\r\n            `StreamingReceiver '${this.name}' did not receive any messages in ` +\r\n            `the last ${this.newMessageWaitTimeoutInSeconds} seconds. ` +\r\n            `Hence ending this receive operation.`;\r\n          log.error(\"[%s] %s\", this._context.namespace.connectionId, msg);\r\n\r\n          await this.close();\r\n        }, this.newMessageWaitTimeoutInSeconds * 1000);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Starts the receiver by establishing an AMQP session and an AMQP receiver link on the session.\r\n   *\r\n   * @param {OnMessage} onMessage The message handler to receive servicebus messages.\r\n   * @param {OnError} onError The error handler to receive an error that occurs while receivin messages.\r\n   */\r\n  receive(onMessage: OnMessage, onError: OnError): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!onMessage || typeof onMessage !== \"function\") {\r\n      throw new Error(\"'onMessage' is a required parameter and must be of type 'function'.\");\r\n    }\r\n    if (!onError || typeof onError !== \"function\") {\r\n      throw new Error(\"'onError' is a required parameter and must be of type 'function'.\");\r\n    }\r\n    this._onMessage = onMessage;\r\n    this._onError = onError;\r\n    if (this.isOpen()) {\r\n      const msg =\r\n        `A streaming receiver with id \"${this.name}\" is active for ` +\r\n        `\"${this._context.entityPath}\". A new receive() call cannot be made at this time. ` +\r\n        `Either wait for current receiver to complete or create a new receiver.`;\r\n      throw new Error(msg);\r\n    }\r\n    this._init()\r\n      .then(() => {\r\n        if (this._receiver) {\r\n          this._receiver.addCredit(this.maxConcurrentCalls);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this._onError!(err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Creates a streaming receiver.\r\n   * @static\r\n   *\r\n   * @param {ClientEntityContext} context    The connection context.\r\n   * @param {ReceiveOptions} [options]     Receive options.\r\n   * @return {StreamingReceiver} An instance of StreamingReceiver.\r\n   */\r\n  static create(context: ClientEntityContext, options?: ReceiveOptions): StreamingReceiver {\r\n    throwErrorIfConnectionClosed(context.namespace);\r\n    if (!options) options = {};\r\n    if (options.autoComplete == undefined) options.autoComplete = true;\r\n    const sReceiver = new StreamingReceiver(context, options);\r\n    context.streamingReceiver = sReceiver;\r\n    return sReceiver;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as log from \"../log\";\r\nimport { Constants, translate, MessagingError } from \"@azure/amqp-common\";\r\nimport { ReceiverEvents, EventContext, OnAmqpEvent, SessionEvents } from \"rhea-promise\";\r\nimport { ServiceBusMessage } from \"../serviceBusMessage\";\r\nimport {\r\n  MessageReceiver,\r\n  ReceiveOptions,\r\n  ReceiverType,\r\n  PromiseLike,\r\n  OnAmqpEventAsPromise\r\n} from \"./messageReceiver\";\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\nimport { throwErrorIfConnectionClosed } from \"../util/utils\";\r\n\r\n/**\r\n * Describes the batching receiver where the user can receive a specified number of messages for\r\n * a predefined time.\r\n * @internal\r\n * @class BatchingReceiver\r\n * @extends MessageReceiver\r\n */\r\nexport class BatchingReceiver extends MessageReceiver {\r\n  /**\r\n   * @property {boolean} isReceivingMessages Indicates whether the link is actively receiving\r\n   * messages. Default: false.\r\n   */\r\n  isReceivingMessages: boolean = false;\r\n\r\n  /**\r\n   * Instantiate a new BatchingReceiver.\r\n   *\r\n   * @constructor\r\n   * @param {ClientEntityContext} context The client entity context.\r\n   * @param {ReceiveOptions} [options]  Options for how you'd like to connect.\r\n   */\r\n  constructor(context: ClientEntityContext, options?: ReceiveOptions) {\r\n    super(context, ReceiverType.batching, options);\r\n  }\r\n\r\n  /**\r\n   * Receives a batch of messages from a ServiceBus Queue/Topic.\r\n   * @param maxMessageCount      The maximum number of messages to receive.\r\n   * @param idleTimeoutInSeconds The maximum wait time in seconds for which the Receiver\r\n   * should wait to receive the first message. If no message is received by this time,\r\n   * the returned promise gets resolved to an empty array.\r\n   * @returns {Promise<ServiceBusMessage[]>} A promise that resolves with an array of Message objects.\r\n   */\r\n  receive(maxMessageCount: number, idleTimeoutInSeconds?: number): Promise<ServiceBusMessage[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!maxMessageCount || (maxMessageCount && typeof maxMessageCount !== \"number\")) {\r\n      throw new Error(\r\n        \"'maxMessageCount' is a required parameter of type number with a value \" + \"greater than 0.\"\r\n      );\r\n    }\r\n\r\n    if (idleTimeoutInSeconds == undefined) {\r\n      idleTimeoutInSeconds = Constants.defaultOperationTimeoutInSeconds;\r\n    }\r\n\r\n    const brokeredMessages: ServiceBusMessage[] = [];\r\n\r\n    this.isReceivingMessages = true;\r\n    return new Promise<ServiceBusMessage[]>((resolve, reject) => {\r\n      let onReceiveMessage: OnAmqpEventAsPromise;\r\n      let onSessionClose: OnAmqpEventAsPromise;\r\n      let onReceiveClose: OnAmqpEventAsPromise;\r\n      let onReceiveDrain: OnAmqpEvent;\r\n      let onReceiveError: OnAmqpEvent;\r\n      let onSessionError: OnAmqpEvent;\r\n      let firstMessageWaitTimer: NodeJS.Timer | undefined;\r\n\r\n      // Final action to be performed after maxMessageCount is reached or the maxWaitTime is over.\r\n      const finalAction = () => {\r\n        if (this._newMessageReceivedTimer) {\r\n          clearTimeout(this._newMessageReceivedTimer);\r\n        }\r\n        if (firstMessageWaitTimer) {\r\n          clearTimeout(firstMessageWaitTimer);\r\n        }\r\n\r\n        // Removing listeners, so that the next receiveBatch() call can set them again.\r\n        if (this._receiver) {\r\n          this._receiver.removeListener(ReceiverEvents.receiverError, onReceiveError);\r\n          this._receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\r\n          this._receiver.session.removeListener(SessionEvents.sessionError, onSessionError);\r\n        }\r\n\r\n        if (this._receiver && this._receiver.credit > 0) {\r\n          log.batching(\r\n            \"[%s] Receiver '%s': Draining leftover credits(%d).\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            this._receiver.credit\r\n          );\r\n\r\n          // Setting drain must be accompanied by a flow call (aliased to addCredit in this case).\r\n          this._receiver.drain = true;\r\n          this._receiver.addCredit(1);\r\n        } else {\r\n          if (this._receiver) {\r\n            this._receiver.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n          }\r\n\r\n          this.isReceivingMessages = false;\r\n          log.batching(\r\n            \"[%s] Receiver '%s': Resolving receiveBatch() with %d messages.\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            brokeredMessages.length\r\n          );\r\n          resolve(brokeredMessages);\r\n        }\r\n      };\r\n\r\n      /**\r\n       * Resets the timer when a new message is received. If no messages were received for\r\n       * `newMessageWaitTimeoutInSeconds`, the messages received till now are returned. The\r\n       * receiver link stays open for the next receive call, but doesnt receive messages until then\r\n       */\r\n      this.resetTimerOnNewMessageReceived = () => {\r\n        if (this._newMessageReceivedTimer) clearTimeout(this._newMessageReceivedTimer);\r\n        if (this.newMessageWaitTimeoutInSeconds) {\r\n          this._newMessageReceivedTimer = setTimeout(async () => {\r\n            const msg =\r\n              `BatchingReceiver '${this.name}' did not receive any messages in the last ` +\r\n              `${this.newMessageWaitTimeoutInSeconds} seconds. ` +\r\n              `Hence ending this batch receive operation.`;\r\n            log.error(\"[%s] %s\", this._context.namespace.connectionId, msg);\r\n            finalAction();\r\n          }, this.newMessageWaitTimeoutInSeconds * 1000);\r\n        }\r\n      };\r\n\r\n      // Action to be performed after the max wait time is over.\r\n      const actionAfterWaitTimeout = () => {\r\n        log.batching(\r\n          \"[%s] Batching Receiver '%s'  max wait time in seconds %d over.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          idleTimeoutInSeconds\r\n        );\r\n        return finalAction();\r\n      };\r\n\r\n      // Action to be performed on the \"receiver_drained\" event.\r\n      onReceiveDrain = (context: EventContext) => {\r\n        this._receiver!.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n        this._receiver!.drain = false;\r\n\r\n        this.isReceivingMessages = false;\r\n\r\n        log.batching(\r\n          \"[%s] Receiver '%s' drained. Resolving receiveBatch() with %d messages.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          brokeredMessages.length\r\n        );\r\n\r\n        resolve(brokeredMessages);\r\n      };\r\n\r\n      // Action to be performed on the \"message\" event.\r\n      onReceiveMessage = async (context: EventContext) => {\r\n        if (firstMessageWaitTimer) {\r\n          clearTimeout(firstMessageWaitTimer);\r\n          firstMessageWaitTimer = undefined;\r\n        }\r\n        this.resetTimerOnNewMessageReceived();\r\n        try {\r\n          const data: ServiceBusMessage = new ServiceBusMessage(\r\n            this._context,\r\n            context.message!,\r\n            context.delivery!\r\n          );\r\n          if (brokeredMessages.length < maxMessageCount) {\r\n            brokeredMessages.push(data);\r\n          }\r\n        } catch (err) {\r\n          reject(`Error while converting AmqpMessage to ReceivedSBMessage: ${err}`);\r\n        }\r\n        if (brokeredMessages.length === maxMessageCount) {\r\n          finalAction();\r\n        }\r\n      };\r\n\r\n      // Action to be taken when an error is received.\r\n      onReceiveError = (context: EventContext) => {\r\n        this.isReceivingMessages = false;\r\n        const receiver = this._receiver || context.receiver!;\r\n        receiver.removeListener(ReceiverEvents.receiverError, onReceiveError);\r\n        receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\r\n        receiver.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n        receiver.session.removeListener(SessionEvents.sessionError, onSessionError);\r\n\r\n        const receiverError = context.receiver && context.receiver.error;\r\n        let error = new MessagingError(\"An error occuured while receiving messages.\");\r\n        if (receiverError) {\r\n          error = translate(receiverError);\r\n          log.error(\r\n            \"[%s] Receiver '%s' received an error:\\n%O\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            error\r\n          );\r\n        }\r\n        if (firstMessageWaitTimer) {\r\n          clearTimeout(firstMessageWaitTimer);\r\n        }\r\n        if (this._newMessageReceivedTimer) {\r\n          clearTimeout(this._newMessageReceivedTimer);\r\n        }\r\n        reject(error);\r\n      };\r\n\r\n      onReceiveClose = async (context: EventContext) => {\r\n        try {\r\n          this.isReceivingMessages = false;\r\n          const receiverError = context.receiver && context.receiver.error;\r\n          if (receiverError) {\r\n            log.error(\r\n              \"[%s] 'receiver_close' event occurred. The associated error is: %O\",\r\n              this._context.namespace.connectionId,\r\n              receiverError\r\n            );\r\n          }\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] Receiver '%s' error in onClose handler:\\n%O\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            translate(err)\r\n          );\r\n        }\r\n      };\r\n\r\n      onSessionClose = async (context: EventContext) => {\r\n        try {\r\n          this.isReceivingMessages = false;\r\n          const sessionError = context.session && context.session.error;\r\n          if (sessionError) {\r\n            log.error(\r\n              \"[%s] 'session_close' event occurred for receiver '%s'. The associated error is: %O\",\r\n              this._context.namespace.connectionId,\r\n              this.name,\r\n              sessionError\r\n            );\r\n          }\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] Receiver '%s' error in onSessionClose handler:\\n%O\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            translate(err)\r\n          );\r\n        }\r\n      };\r\n\r\n      onSessionError = (context: EventContext) => {\r\n        this.isReceivingMessages = false;\r\n        const receiver = this._receiver || context.receiver!;\r\n        receiver.removeListener(ReceiverEvents.receiverError, onReceiveError);\r\n        receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\r\n        receiver.removeListener(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n        receiver.session.removeListener(SessionEvents.sessionError, onSessionError);\r\n\r\n        const sessionError = context.session && context.session.error;\r\n        let error = new MessagingError(\"An error occuured while receiving messages.\");\r\n        if (sessionError) {\r\n          error = translate(sessionError);\r\n          log.error(\r\n            \"[%s] 'session_close' event occurred for Receiver '%s' received an error:\\n%O\",\r\n            this._context.namespace.connectionId,\r\n            this.name,\r\n            error\r\n          );\r\n        }\r\n        if (firstMessageWaitTimer) {\r\n          clearTimeout(firstMessageWaitTimer);\r\n        }\r\n        if (this._newMessageReceivedTimer) {\r\n          clearTimeout(this._newMessageReceivedTimer);\r\n        }\r\n        reject(error);\r\n      };\r\n\r\n      const onSettled: OnAmqpEvent = (context: EventContext) => {\r\n        const connectionId = this._context.namespace.connectionId;\r\n        const delivery = context.delivery;\r\n        if (delivery) {\r\n          const id = delivery.id;\r\n          const state = delivery.remote_state;\r\n          const settled = delivery.remote_settled;\r\n          log.receiver(\r\n            \"[%s] Delivery with id %d, remote_settled: %s, remote_state: %o has been \" +\r\n              \"received.\",\r\n            connectionId,\r\n            id,\r\n            settled,\r\n            state && state.error ? state.error : state\r\n          );\r\n          if (settled && this._deliveryDispositionMap.has(id)) {\r\n            const promise = this._deliveryDispositionMap.get(id) as PromiseLike;\r\n            clearTimeout(promise.timer);\r\n            log.receiver(\r\n              \"[%s] Found the delivery with id %d in the map and cleared the timer.\",\r\n              connectionId,\r\n              id\r\n            );\r\n            const deleteResult = this._deliveryDispositionMap.delete(id);\r\n            log.receiver(\r\n              \"[%s] Successfully deleted the delivery with id %d from the map.\",\r\n              connectionId,\r\n              id,\r\n              deleteResult\r\n            );\r\n            if (state && state.error && (state.error.condition || state.error.description)) {\r\n              const error = translate(state.error);\r\n              return promise.reject(error);\r\n            }\r\n\r\n            return promise.resolve();\r\n          }\r\n        }\r\n      };\r\n\r\n      const addCreditAndSetTimer = (reuse?: boolean) => {\r\n        log.batching(\r\n          \"[%s] Receiver '%s', adding credit for receiving %d messages.\",\r\n          this._context.namespace.connectionId,\r\n          this.name,\r\n          maxMessageCount\r\n        );\r\n        // By adding credit here, we let the service know that at max we can handle `maxMessageCount`\r\n        // number of messages concurrently. We will return the user an array of messages that can\r\n        // be of size upto maxMessageCount. Then the user needs to accordingly dispose\r\n        // (complete,/abandon/defer/deadletter) the messages from the array.\r\n        this._receiver!.addCredit(maxMessageCount);\r\n        let msg: string = \"[%s] Setting the wait timer for %d seconds for receiver '%s'.\";\r\n        if (reuse) msg += \" Receiver link already present, hence reusing it.\";\r\n        log.batching(msg, this._context.namespace.connectionId, idleTimeoutInSeconds, this.name);\r\n        firstMessageWaitTimer = setTimeout(\r\n          actionAfterWaitTimeout,\r\n          (idleTimeoutInSeconds as number) * 1000\r\n        );\r\n        // TODO: Disabling this for now. We would want to give the user a decent chance to receive\r\n        // the first message and only timeout faster if successive messages from there onwards are\r\n        // not received quickly. However, it may be possible that there are no pending messages\r\n        // currently on the queue. In that case waiting for idleTimeoutInSeconds would be\r\n        // unnecessary.\r\n        // There is a management plane API to get runtimeInfo of the Queue which provides\r\n        // information about active messages on the Queue and it's sub Queues. However, this adds\r\n        // a little complexity. If the first message was delayed due to network latency then there\r\n        // are bright chances that the management plane api would receive the same fate.\r\n        // It would be better to weigh all the options before making a decision.\r\n        // resetTimerOnNewMessageReceived();\r\n      };\r\n\r\n      if (!this.isOpen()) {\r\n        log.batching(\r\n          \"[%s] Receiver '%s', setting max concurrent calls to 0.\",\r\n          this._context.namespace.connectionId,\r\n          this.name\r\n        );\r\n        // while creating the receiver link for batching receiver the max concurrent calls\r\n        // i.e. the credit_window on the link is set to zero. After the link is created\r\n        // successfully, we add credit which is the maxMessageCount specified by the user.\r\n        this.maxConcurrentCalls = 0;\r\n        const rcvrOptions = this._createReceiverOptions(false, {\r\n          onMessage: onReceiveMessage,\r\n          onError: onReceiveError,\r\n          onSessionError: onSessionError,\r\n          onSettled: onSettled,\r\n          onClose: onReceiveClose,\r\n          onSessionClose: onSessionClose\r\n        });\r\n        this._init(rcvrOptions)\r\n          .then(() => {\r\n            this._receiver!.on(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n            addCreditAndSetTimer();\r\n          })\r\n          .catch(reject);\r\n      } else {\r\n        addCreditAndSetTimer(true);\r\n        this._receiver!.on(ReceiverEvents.message, onReceiveMessage);\r\n        this._receiver!.on(ReceiverEvents.receiverError, onReceiveError);\r\n        this._receiver!.on(ReceiverEvents.receiverDrained, onReceiveDrain);\r\n        this._receiver!.session.on(SessionEvents.sessionError, onSessionError);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a batching receiver.\r\n   * @static\r\n   *\r\n   * @param {ClientEntityContext} context    The connection context.\r\n   * @param {ReceiveOptions} [options]     Receive options.\r\n   */\r\n  static create(context: ClientEntityContext, options?: ReceiveOptions): BatchingReceiver {\r\n    throwErrorIfConnectionClosed(context.namespace);\r\n    const bReceiver = new BatchingReceiver(context, options);\r\n    context.batchingReceiver = bReceiver;\r\n    return bReceiver;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Long from \"long\";\r\nimport * as log from \"./log\";\r\nimport { StreamingReceiver, MessageHandlerOptions } from \"./core/streamingReceiver\";\r\nimport { BatchingReceiver } from \"./core/batchingReceiver\";\r\nimport { ReceiveOptions, OnError, OnMessage, ReceiverType } from \"./core/messageReceiver\";\r\nimport { ClientEntityContext } from \"./clientEntityContext\";\r\nimport { ServiceBusMessage, ReceiveMode, ReceivedMessageInfo } from \"./serviceBusMessage\";\r\nimport { MessageSession, SessionMessageHandlerOptions } from \"./session/messageSession\";\r\nimport { throwErrorIfConnectionClosed } from \"./util/utils\";\r\n\r\n/**\r\n * Describes the options for creating a Receiver.\r\n */\r\nexport interface MessageReceiverOptions {\r\n  /**\r\n   * An enum indicating the mode in which messages should be received.\r\n   * Possible values are `ReceiveMode.peekLock` (default) and `ReceiveMode.receiveAndDelete`\r\n   */\r\n  receiveMode?: ReceiveMode;\r\n}\r\n\r\n/**\r\n * The Receiver class can be used to receive messages in a batch or by registering handlers.\r\n * Use the `getReceiver` function on the QueueClient or SubscriptionClient to instantiate a Receiver.\r\n * The Receiver class is an abstraction over the underlying AMQP receiver link.\r\n * @class Receiver\r\n */\r\nexport class Receiver {\r\n  /**\r\n   * @property {ClientEntityContext} _context Describes the amqp connection context for the QueueClient.\r\n   */\r\n  private _context: ClientEntityContext;\r\n  private _receiveMode: ReceiveMode;\r\n  private _isClosed: boolean = false;\r\n\r\n  /**\r\n   * @property {boolean} [isClosed] Denotes if close() was called on this receiver.\r\n   * @readonly\r\n   */\r\n  public get isClosed(): boolean {\r\n    return this._isClosed;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(context: ClientEntityContext, options?: MessageReceiverOptions) {\r\n    throwErrorIfConnectionClosed(context.namespace);\r\n    this._context = context;\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n    this._receiveMode =\r\n      options.receiveMode === undefined ? ReceiveMode.peekLock : options.receiveMode;\r\n  }\r\n\r\n  /**\r\n   * Registers handlers to deal with the incoming stream of messages over an AMQP receiver link\r\n   * from a Queue/Subscription.\r\n   * To stop receiving messages, call `close()` on the Receiver or set the property\r\n   * `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.\r\n   *\r\n   * @param onMessage - Handler for processing each incoming message.\r\n   * @param onError - Handler for any error that occurs while receiving or processing messages.\r\n   * @param options - Options to control if messages should be automatically completed, and/or have\r\n   * their locks automatically renewed. You can control the maximum number of messages that should\r\n   * be concurrently processed. You can also provide a timeout in seconds to denote the\r\n   * amount of time to wait for a new message before closing the receiver.\r\n   *\r\n   * @returns void\r\n   */\r\n  receive(onMessage: OnMessage, onError: OnError, options?: MessageHandlerOptions): void {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    this.validateNewReceiveCall(ReceiverType.streaming);\r\n\r\n    const sReceiver = StreamingReceiver.create(this._context, {\r\n      ...options,\r\n      receiveMode: this._receiveMode\r\n    });\r\n    this._context.streamingReceiver = sReceiver;\r\n    return sReceiver.receive(onMessage, onError);\r\n  }\r\n\r\n  /**\r\n   * Returns a batch of messages based on given count and timeout over an AMQP receiver link\r\n   * from a Queue/Subscription.\r\n   *\r\n   * @param maxMessageCount      The maximum number of messages to receive from Queue/Subscription.\r\n   * @param idleTimeoutInSeconds The maximum wait time in seconds for which the Receiver\r\n   * should wait to receive the first message. If no message is received by this time,\r\n   * the returned promise gets resolved to an empty array.\r\n   * - **Default**: `60` seconds.\r\n   * @returns Promise<ServiceBusMessage[]> A promise that resolves with an array of Message objects.\r\n   */\r\n  async receiveBatch(\r\n    maxMessageCount: number,\r\n    idleTimeoutInSeconds?: number\r\n  ): Promise<ServiceBusMessage[]> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    this.validateNewReceiveCall(ReceiverType.batching);\r\n\r\n    if (!this._context.batchingReceiver || !this._context.batchingReceiver.isOpen()) {\r\n      const options: ReceiveOptions = {\r\n        maxConcurrentCalls: 0,\r\n        receiveMode: this._receiveMode,\r\n        newMessageWaitTimeoutInSeconds: 1\r\n      };\r\n      this._context.batchingReceiver = BatchingReceiver.create(this._context, options);\r\n    }\r\n\r\n    try {\r\n      return await this._context.batchingReceiver.receive(maxMessageCount, idleTimeoutInSeconds);\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] Receiver '%s', an error occurred while receiving %d messages for %d \" +\r\n          \"max time:\\n %O\",\r\n        this._context.namespace.connectionId,\r\n        this._context.batchingReceiver.name,\r\n        maxMessageCount,\r\n        idleTimeoutInSeconds,\r\n        err\r\n      );\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renews the lock on the message.\r\n   *\r\n   * When a message is received in `PeekLock` mode, the message is locked on the server for this\r\n   * receiver instance for a duration as specified during the Queue/Subscription creation\r\n   * (LockDuration). If processing of the message requires longer than this duration, the\r\n   * lock needs to be renewed. For each renewal, it resets the time the message is locked by the\r\n   * LockDuration set on the Entity.\r\n   *\r\n   * @param lockTokenOrMessage - Lock token of the message or the message itself.\r\n   * @returns Promise<Date> - New lock token expiry date and time in UTC format.\r\n   */\r\n  async renewLock(lockTokenOrMessage: string | ServiceBusMessage): Promise<Date> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    if (this._receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    return this._context.managementClient!.renewLock(lockTokenOrMessage);\r\n  }\r\n\r\n  /**\r\n   * Receives a deferred message identified by the given `sequenceNumber`.\r\n   * @param sequenceNumber The sequence number of the message that will be received.\r\n   * @returns Promise<ServiceBusMessage | undefined>\r\n   * - Returns `Message` identified by sequence number.\r\n   * - Returns `undefined` if no such message is found.\r\n   * - Throws an error if the message has not been deferred.\r\n   */\r\n  async receiveDeferredMessage(sequenceNumber: Long): Promise<ServiceBusMessage | undefined> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    if (this._receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    return this._context.managementClient!.receiveDeferredMessage(\r\n      sequenceNumber,\r\n      this._receiveMode\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Receives a list of deferred messages identified by given `sequenceNumbers`.\r\n   * @param sequenceNumbers A list containing the sequence numbers to receive.\r\n   * @returns Promise<ServiceBusMessage[]>\r\n   * - Returns a list of messages identified by the given sequenceNumbers.\r\n   * - Returns an empty list if no messages are found.\r\n   * - Throws an error if the messages have not been deferred.\r\n   */\r\n  async receiveDeferredMessages(sequenceNumbers: Long[]): Promise<ServiceBusMessage[]> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    if (this._receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    return this._context.managementClient!.receiveDeferredMessages(\r\n      sequenceNumbers,\r\n      this._receiveMode\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Closes the underlying AMQP receiver link.\r\n   * Once closed, the receiver cannot be used for any further operations.\r\n   * Use the `getReceiver` function on the QueueClient or SubscriptionClient to instantiate\r\n   * a new Receiver\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      if (this._context.namespace.connection && this._context.namespace.connection.isOpen()) {\r\n        // Close the streaming receiver.\r\n        if (this._context.streamingReceiver) {\r\n          await this._context.streamingReceiver.close();\r\n        }\r\n\r\n        // Close the batching receiver.\r\n        if (this._context.batchingReceiver) {\r\n          await this._context.batchingReceiver.close();\r\n        }\r\n\r\n        // Make sure that we clear the map of deferred messages\r\n        this._context.requestResponseLockedMessages.clear();\r\n      }\r\n      this._isClosed = true;\r\n    } catch (err) {\r\n      const msg =\r\n        `An error occurred while closing the receiver for` +\r\n        `\"${this._context.entityPath}\": ${JSON.stringify(err)} `;\r\n      log.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the receiver is currently receiving messages or not.\r\n   * When this return true, a new receive() or receiveBatch() call cannot be made.\r\n   */\r\n  isReceivingMessages(): boolean {\r\n    if (this._context.streamingReceiver && this._context.streamingReceiver.isOpen()) {\r\n      return true;\r\n    }\r\n    if (\r\n      this._context.batchingReceiver &&\r\n      this._context.batchingReceiver.isOpen() &&\r\n      this._context.batchingReceiver.isReceivingMessages\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private validateNewReceiveCall(newCallType: ReceiverType): void {\r\n    let currentlyActiveReceiver = \"\";\r\n    let currentlyActiveReceiverType = \"\";\r\n    if (this._context.streamingReceiver && this._context.streamingReceiver.isOpen()) {\r\n      currentlyActiveReceiver = this._context.streamingReceiver.name;\r\n      currentlyActiveReceiverType = \"streaming\";\r\n    } else if (\r\n      this._context.batchingReceiver &&\r\n      this._context.batchingReceiver.isOpen() &&\r\n      this._context.batchingReceiver.isReceivingMessages\r\n    ) {\r\n      currentlyActiveReceiver = this._context.batchingReceiver.name;\r\n      currentlyActiveReceiverType = \"batching\";\r\n    }\r\n\r\n    if (currentlyActiveReceiverType && currentlyActiveReceiver) {\r\n      const msg =\r\n        `A \"${currentlyActiveReceiverType}\" receiver with id ` +\r\n        `\"${currentlyActiveReceiver}\" is active for \"${this._context.entityPath}\". ` +\r\n        `A ${newCallType === ReceiverType.streaming ? \"new receive\" : \"receiveBatch\"}() call ` +\r\n        `cannot be made at this time. Either wait for current receiver to complete or create a new receiver.`;\r\n\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  private throwIfReceiverOrConnectionClosed(): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this.isClosed) {\r\n      throw new Error(\"The receiver has been closed and can no longer be used.\");\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The SessionReceiver class can be used to receive messages from a session enabled Queue or\r\n * Subscription in a batch or by registering handlers.\r\n * Use the `getSessionReceiver` function on the QueueClient or SubscriptionClient to instantiate a\r\n * SessionReceiver.\r\n * The SessionReceiver class is an abstraction over the underlying AMQP receiver link.\r\n * @class SessionReceiver\r\n */\r\nexport class SessionReceiver {\r\n  /**\r\n   * @property {ClientEntityContext} _context Describes the amqp connection context for the QueueClient.\r\n   */\r\n\r\n  private _context: ClientEntityContext;\r\n  private _receiveMode: ReceiveMode;\r\n  private _sessionId: string | undefined;\r\n  private _messageSession: MessageSession;\r\n\r\n  /**\r\n   * @property {boolean} [isClosed] Denotes if close() was called on this receiver.\r\n   * @readonly\r\n   */\r\n  public get isClosed(): boolean {\r\n    return !this._context.messageSessions[this.sessionId];\r\n  }\r\n\r\n  /**\r\n   * @property {string} [sessionId] The sessionId for the message session.\r\n   * @readonly\r\n   */\r\n  public get sessionId(): string {\r\n    return this._sessionId || \"\";\r\n  }\r\n\r\n  /**\r\n   * @property {Date} [sessionLockedUntilUtc] The time in UTC until which the session is locked.\r\n   * @readonly\r\n   */\r\n  public get sessionLockedUntilUtc(): Date | undefined {\r\n    return this._messageSession.sessionLockedUntilUtc;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(context: ClientEntityContext, messageSession: MessageSession) {\r\n    throwErrorIfConnectionClosed(context.namespace);\r\n    this._context = context;\r\n    this._receiveMode = messageSession.receiveMode;\r\n    this._sessionId = messageSession.sessionId;\r\n    this._messageSession = messageSession;\r\n  }\r\n\r\n  /**\r\n   * Renews the lock for the Session.\r\n   * @returns Promise<Date> New lock token expiry date and time in UTC format.\r\n   */\r\n  async renewLock(): Promise<Date> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    this._messageSession.sessionLockedUntilUtc = await this._context.managementClient!.renewSessionLock(\r\n      this.sessionId!\r\n    );\r\n    return this._messageSession.sessionLockedUntilUtc;\r\n  }\r\n\r\n  /**\r\n   * Sets the state of the MessageSession.\r\n   * @param state The state that needs to be set.\r\n   */\r\n  async setState(state: any): Promise<void> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    return this._context.managementClient!.setSessionState(this.sessionId!, state);\r\n  }\r\n\r\n  /**\r\n   * Gets the state of the MessageSession.\r\n   * @returns Promise<any> The state of that session\r\n   */\r\n  async getState(): Promise<any> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    return this._context.managementClient!.getSessionState(this.sessionId!);\r\n  }\r\n\r\n  /**\r\n   * Fetches the next batch of active messages (including deferred but not deadlettered messages) in\r\n   * the current session. The first call to `peek()` fetches the first active message. Each\r\n   * subsequent call fetches the subsequent message.\r\n   *\r\n   * Unlike a `received` message, `peeked` message is a read-only version of the message.\r\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it cannot be renewed.\r\n   *\r\n   * @param messageCount The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedMessageInfo[]>\r\n   */\r\n  async peek(messageCount?: number): Promise<ReceivedMessageInfo[]> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    return this._context.managementClient!.peekMessagesBySession(this.sessionId!, messageCount);\r\n  }\r\n\r\n  /**\r\n   * Peeks the desired number of active messages (including deferred but not deadlettered messages)\r\n   * from the specified sequence number in the current session.\r\n   *\r\n   * Unlike a `received` message, `peeked` message is a read-only version of the message.\r\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it cannot be renewed.\r\n   *\r\n   * @param fromSequenceNumber The sequence number from where to read the message.\r\n   * @param [messageCount] The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedSBMessage[]>\r\n   */\r\n  async peekBySequenceNumber(\r\n    fromSequenceNumber: Long,\r\n    messageCount?: number\r\n  ): Promise<ReceivedMessageInfo[]> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    return this._context.managementClient!.peekBySequenceNumber(fromSequenceNumber, {\r\n      sessionId: this.sessionId!,\r\n      messageCount: messageCount\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Receives a deferred message identified by the given `sequenceNumber`.\r\n   * @param sequenceNumber The sequence number of the message that will be received.\r\n   * @returns Promise<ServiceBusMessage | undefined>\r\n   * - Returns `Message` identified by sequence number.\r\n   * - Returns `undefined` if no such message is found.\r\n   * - Throws an error if the message has not been deferred.\r\n   */\r\n  async receiveDeferredMessage(sequenceNumber: Long): Promise<ServiceBusMessage | undefined> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    if (this._receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    return this._context.managementClient!.receiveDeferredMessage(\r\n      sequenceNumber,\r\n      this._receiveMode,\r\n      this.sessionId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Receives a list of deferred messages identified by given `sequenceNumbers`.\r\n   * @param sequenceNumbers A list containing the sequence numbers to receive.\r\n   * @returns Promise<ServiceBusMessage[]>\r\n   * - Returns a list of messages identified by the given sequenceNumbers.\r\n   * - Returns an empty list if no messages are found.\r\n   * - Throws an error if the messages have not been deferred.\r\n   */\r\n  async receiveDeferredMessages(sequenceNumbers: Long[]): Promise<ServiceBusMessage[]> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    if (this._receiveMode !== ReceiveMode.peekLock) {\r\n      throw new Error(\"The operation is only supported in 'PeekLock' receive mode.\");\r\n    }\r\n    return this._context.managementClient!.receiveDeferredMessages(\r\n      sequenceNumbers,\r\n      this._receiveMode,\r\n      this.sessionId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a batch of messages based on given count and timeout over an AMQP receiver link\r\n   * from a Queue/Subscription.\r\n   *\r\n   * @param maxMessageCount      The maximum number of messages to receive from Queue/Subscription.\r\n   * @param maxWaitTimeInSeconds The maximum wait time in seconds for which the Receiver\r\n   * should wait to receive the first message. If no message is received by this time,\r\n   * the returned promise gets resolved to an empty array.\r\n   * - **Default**: `60` seconds.\r\n   * @returns Promise<ServiceBusMessage[]> A promise that resolves with an array of Message objects.\r\n   */\r\n  async receiveBatch(\r\n    maxMessageCount: number,\r\n    maxWaitTimeInSeconds?: number\r\n  ): Promise<ServiceBusMessage[]> {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    try {\r\n      return await this._messageSession.receiveBatch(maxMessageCount, maxWaitTimeInSeconds);\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] Receiver '%s', an error occurred while receiving %d messages for %d \" +\r\n          \"max time:\\n %O\",\r\n        this._context.namespace.connectionId,\r\n        this._messageSession.name,\r\n        maxMessageCount,\r\n        maxWaitTimeInSeconds,\r\n        err\r\n      );\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers handlers to deal with the incoming stream of messages over an AMQP receiver link\r\n   * from a Queue/Subscription.\r\n   * To stop receiving messages, call `close()` on the SessionReceiver or set the property\r\n   * `newMessageWaitTimeoutInSeconds` in the options to provide a timeout.\r\n   *\r\n   * @param onMessage - Handler for processing each incoming message.\r\n   * @param onError - Handler for any error that occurs while receiving or processing messages.\r\n   * @param options - Options to control whether messages should be automatically completed\r\n   * or if the lock on the session should be automatically renewed. You can control the\r\n   * maximum number of messages that should be concurrently processed. You can\r\n   * also provide a timeout in seconds to denote the amount of time to wait for a new message\r\n   * before closing the receiver.\r\n   *\r\n   * @returns void\r\n   */\r\n  receive(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions): void {\r\n    this.throwIfReceiverOrConnectionClosed();\r\n    return this._messageSession.receive(onMessage, onError, options);\r\n  }\r\n\r\n  /**\r\n   * Closes the underlying AMQP receiver link.\r\n   * Once closed, the receiver cannot be used for any further operations.\r\n   * Use the `getSessionReceiver` function on the QueueClient or SubscriptionClient to instantiate\r\n   * a new Receiver\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      await this._messageSession.close();\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] An error occurred while closing the message session with id '%s': %O.\",\r\n        this._context.namespace.connectionId,\r\n        this.sessionId,\r\n        err\r\n      );\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the receiver is currently receiving messages or not.\r\n   * When this return true, a new receive() or receiveBatch() call cannot be made on the receiver.\r\n   */\r\n  isReceivingMessages(): boolean {\r\n    return this._messageSession.isReceivingMessages;\r\n  }\r\n\r\n  private throwIfReceiverOrConnectionClosed(): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this.isClosed) {\r\n      throw new Error(\"The receiver has been closed and can no longer be used.\");\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from \"long\";\r\nimport {\r\n  EventContext,\r\n  SenderEvents,\r\n  ReceiverEvents,\r\n  SenderOptions,\r\n  ReceiverOptions,\r\n  types,\r\n  message as RheaMessageUtil,\r\n  generate_uuid,\r\n  string_to_uuid\r\n} from \"rhea-promise\";\r\nimport {\r\n  defaultLock,\r\n  translate,\r\n  Constants,\r\n  RequestResponseLink,\r\n  ConditionErrorNameMapper,\r\n  AmqpMessage,\r\n  SendRequestOptions\r\n} from \"@azure/amqp-common\";\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\nimport {\r\n  ReceivedMessageInfo,\r\n  ServiceBusMessage,\r\n  SendableMessageInfo,\r\n  DispositionStatus\r\n} from \"../serviceBusMessage\";\r\nimport { LinkEntity } from \"./linkEntity\";\r\nimport * as log from \"../log\";\r\nimport { ReceiveMode } from \"../serviceBusMessage\";\r\nimport { toBuffer, throwErrorIfConnectionClosed } from \"../util/utils\";\r\nimport { Typed } from \"rhea/typings/types\";\r\nimport { max32BitNumber } from \"../util/constants\";\r\n\r\n/**\r\n * Represents a description of a rule.\r\n */\r\nexport interface RuleDescription {\r\n  /**\r\n   * Filter expression used to match messages.\r\n   */\r\n  filter?: SQLExpression | CorrelationFilter;\r\n  /**\r\n   * Action to perform if the message satisfies the filtering expression.\r\n   */\r\n  action?: SQLExpression;\r\n  /**\r\n   * Represents the name of the rule.\r\n   */\r\n  name: string;\r\n}\r\n/**\r\n * Represents the sql filter expression.\r\n */\r\nexport interface SQLExpression {\r\n  /**\r\n   * SQL-like condition expression that is evaluated in the broker against the arriving messages'\r\n   * user-defined properties and system properties. All system properties must be prefixed with\r\n   * `sys.` in the condition expression.\r\n   */\r\n  expression: string;\r\n}\r\n\r\n/**\r\n * Represents the correlation filter expression.\r\n * A CorrelationFilter holds a set of conditions that are matched against one of more of an\r\n * arriving message's user and system properties.\r\n */\r\nexport interface CorrelationFilter {\r\n  /**\r\n   * Identifier of the correlation.\r\n   */\r\n  correlationId?: string;\r\n  /**\r\n   * Identifier of the message.\r\n   */\r\n  messageId?: string;\r\n  /**\r\n   * Address to send to.\r\n   */\r\n  to?: string;\r\n  /**\r\n   * Address of the queue to reply to.\r\n   */\r\n  replyTo?: string;\r\n  /**\r\n   * Application specific label.\r\n   */\r\n  label?: string;\r\n  /**\r\n   * Session identifier.\r\n   */\r\n  sessionId?: string;\r\n  /**\r\n   * Session identifier to reply to.\r\n   */\r\n  replyToSessionId?: string;\r\n  /**\r\n   * Content type of the message.\r\n   */\r\n  contentType?: string;\r\n  /**\r\n   * Application specific properties of the message.\r\n   */\r\n  userProperties?: any;\r\n}\r\n\r\nconst validCorrelationProperties = [\r\n  \"correlationId\",\r\n  \"messageId\",\r\n  \"to\",\r\n  \"replyTo\",\r\n  \"label\",\r\n  \"sessionId\",\r\n  \"replyToSessionId\",\r\n  \"contentType\",\r\n  \"userProperties\"\r\n];\r\n\r\n/**\r\n * @internal\r\n * Describes the options that can be provided while peeking a message.\r\n * @interface PeekOptions\r\n */\r\nexport interface PeekOptions {\r\n  /**\r\n   * The number of messages that need to be peeked.\r\n   * - **Default: `1`**.\r\n   */\r\n  messageCount?: number;\r\n  /**\r\n   * The id of the session for which the messages need to be peeked.\r\n   * This should only be provided if messages are being fetched from a `session enabled` Queue or\r\n   * Topic.\r\n   */\r\n  sessionId?: string;\r\n}\r\n\r\n/**\r\n * Provides information about the message to be scheduled.\r\n * @interface ScheduleMessage\r\n */\r\nexport interface ScheduleMessage {\r\n  /**\r\n   * @property message - The message to be scheduled\r\n   */\r\n  message: SendableMessageInfo;\r\n  /**\r\n   * @property scheduledEnqueueTimeUtc - The UTC time at which the message should be available\r\n   * for processing.\r\n   */\r\n  scheduledEnqueueTimeUtc: Date;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Options to set when updating the disposition status\r\n */\r\ninterface DispositionStatusOptions {\r\n  /**\r\n   * @property [propertiesToModify] A dictionary of Service Bus brokered message properties\r\n   * to modify.\r\n   */\r\n  propertiesToModify?: { [key: string]: any };\r\n  /**\r\n   * @property [deadLetterReason] The deadletter reason. May be set if disposition status\r\n   * is set to suspended.\r\n   */\r\n  deadLetterReason?: string;\r\n  /**\r\n   * @property [deadLetterDescription] The deadletter description. May be set if disposition status\r\n   * is set to suspended.\r\n   */\r\n  deadLetterDescription?: string;\r\n  /**\r\n   * This should only be provided if `session` is enabled for a Queue or Topic.\r\n   */\r\n  sessionId?: string;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Options passed to the constructor of ManagementClient\r\n */\r\nexport interface ManagementClientOptions {\r\n  address?: string;\r\n  audience?: string;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @class ManagementClient\r\n * Descibes the ServiceBus Management Client that talks\r\n * to the $management endpoint over AMQP connection.\r\n */\r\nexport class ManagementClient extends LinkEntity {\r\n  readonly managementLock: string = `${Constants.managementRequestKey}-${generate_uuid()}`;\r\n  /**\r\n   * @property {string} entityPath - The name/path of the entity (queue/topic/subscription name)\r\n   * for which the management request needs to be made.\r\n   */\r\n  entityPath: string;\r\n  /**\r\n   * @property {string} replyTo The reply to Guid for the management client.\r\n   */\r\n  replyTo: string = generate_uuid();\r\n  /**\r\n   * @property $management sender, receiver on the same session.\r\n   * @private\r\n   */\r\n  private _mgmtReqResLink?: RequestResponseLink;\r\n  /**\r\n   * @property _lastPeekedSequenceNumber Provides the sequence number of the last peeked message.\r\n   * @private\r\n   */\r\n  private _lastPeekedSequenceNumber: Long = Long.ZERO;\r\n\r\n  /**\r\n   * @constructor\r\n   * Instantiates the management client.\r\n   * @param {ClientEntityContext} context The client entity context.\r\n   * @param {ManagementClientOptions} [options] Options to be provided for creating the\r\n   * \"$management\" client.\r\n   */\r\n  constructor(context: ClientEntityContext, options?: ManagementClientOptions) {\r\n    super(`${context.entityPath}/$management`, context, {\r\n      address: options && options.address ? options.address : Constants.management,\r\n      audience:\r\n        options && options.audience\r\n          ? options.audience\r\n          : `${context.namespace.config.endpoint}${context.entityPath}/$management`\r\n    });\r\n    this._context = context;\r\n    this.entityPath = context.namespace.config.entityPath as string;\r\n  }\r\n\r\n  /**\r\n   * Closes the AMQP management session to the ServiceBus namespace for this client,\r\n   * returning a promise that will be resolved when disconnection is completed.\r\n   * @return Promise<void>\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      if (this._isMgmtRequestResponseLinkOpen()) {\r\n        const mgmtLink = this._mgmtReqResLink;\r\n        this._mgmtReqResLink = undefined;\r\n        clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\r\n        await mgmtLink!.close();\r\n        log.mgmt(\"Successfully closed the management session.\");\r\n      }\r\n    } catch (err) {\r\n      const msg = `An error occurred while closing the management session: ${err}`;\r\n      log.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches the next batch of active messages. The first call to `peek()` fetches the first\r\n   * active message for this client. Each subsequent call fetches the subsequent message in the\r\n   * entity.\r\n   *\r\n   * Unlike a `received` message, `peeked` message will not have lock token associated with it,\r\n   * and hence it cannot be `Completed/Abandoned/Deferred/Deadlettered/Renewed`. Also, unlike\r\n   * `receive() | receiveBatch()` this method will fetch even Deferred messages\r\n   * (but not Deadlettered message).\r\n   * @param {number} [messageCount] The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedSBMessage[]>\r\n   */\r\n  async peek(messageCount?: number): Promise<ReceivedMessageInfo[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    return this.peekBySequenceNumber(this._lastPeekedSequenceNumber.add(1), {\r\n      messageCount: messageCount\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetches the next batch of active messages in the current MessageSession. The first call to\r\n   * `peek()` fetches the first active message for this client. Each subsequent call fetches the\r\n   * subsequent message in the entity.\r\n   *\r\n   * Unlike a `received` message, `peeked` message will not have lock token associated with it,\r\n   * and hence it cannot be `Completed/Abandoned/Deferred/Deadlettered/Renewed`. Also, unlike\r\n   * `receive() | receiveBatch()` this method will also fetch `Deferred` messages, but\r\n   * **NOT** `Deadlettered` messages.\r\n   * @param {string} sessionId The sessionId from which messages need to be peeked.\r\n   * @param {number} [messageCount] The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedMessageInfo[]>\r\n   */\r\n  async peekMessagesBySession(\r\n    sessionId: string,\r\n    messageCount?: number\r\n  ): Promise<ReceivedMessageInfo[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (sessionId == undefined) {\r\n      throw new Error(\"'sessionId' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    return this.peekBySequenceNumber(this._lastPeekedSequenceNumber.add(1), {\r\n      sessionId: sessionId,\r\n      messageCount: messageCount\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Peeks the desired number of messages from the specified sequence number.\r\n   * @param {Long} fromSequenceNumber The sequence number from where to read the message.\r\n   * @param {PeekOptions} [options] Options that can be provided while peeking messages.\r\n   * @returns Promise<ReceivedMessageInfo[]>\r\n   */\r\n  async peekBySequenceNumber(\r\n    fromSequenceNumber: Long,\r\n    options?: PeekOptions\r\n  ): Promise<ReceivedMessageInfo[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!options) options = {};\r\n    if (fromSequenceNumber == undefined || !Long.isLong(fromSequenceNumber)) {\r\n      throw new Error(\r\n        \"'fromSequenceNumber' is a required parameter and must be an instance of 'Long'.\"\r\n      );\r\n    }\r\n    if (options.messageCount != undefined && typeof options.messageCount !== \"number\") {\r\n      throw new Error(\"'messageCount' must be of type 'number'.\");\r\n    }\r\n    if (options.sessionId != undefined && typeof options.sessionId !== \"string\") {\r\n      throw new Error(\"'sessionId' must be of type 'string'.\");\r\n    }\r\n    if (options.messageCount == undefined) options.messageCount = 1;\r\n    const messageList: ReceivedMessageInfo[] = [];\r\n    try {\r\n      const messageBody: any = {};\r\n      messageBody[Constants.fromSequenceNumber] = types.wrap_long(\r\n        Buffer.from(fromSequenceNumber.toBytesBE())\r\n      );\r\n      messageBody[Constants.messageCount] = types.wrap_int(options.messageCount);\r\n      if (options.sessionId) {\r\n        messageBody[Constants.sessionIdMapKey] = options.sessionId;\r\n      }\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        message_id: generate_uuid(),\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.peekMessage\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Peek by sequence number request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n\r\n      const result = await this._mgmtReqResLink!.sendRequest(request);\r\n      if (result.application_properties!.statusCode !== 204) {\r\n        const messages = result.body.messages as { message: Buffer }[];\r\n        for (const msg of messages) {\r\n          const decodedMessage = RheaMessageUtil.decode(msg.message);\r\n          const message = ReceivedMessageInfo.fromAmqpMessage(decodedMessage as any);\r\n          message.body = this._context.namespace.dataTransformer.decode(message.body);\r\n          messageList.push(message);\r\n          this._lastPeekedSequenceNumber = message.sequenceNumber!;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the request to peek messages to \" +\r\n        \"$management endpoint: %O\",\r\n        error\r\n      );\r\n      // statusCode == 404 then do not throw\r\n      if (error.name !== ConditionErrorNameMapper[\"com.microsoft:message-not-found\"]) {\r\n        throw error;\r\n      }\r\n    }\r\n    return messageList;\r\n  }\r\n\r\n  /**\r\n   * Renews the lock on the message. The lock will be renewed based on the setting specified on\r\n   * the queue.\r\n   *\r\n   * When a message is received in `PeekLock` mode, the message is locked on the server for this\r\n   * receiver instance for a duration as specified during the Queue/Subscription creation\r\n   * (LockDuration). If processing of the message requires longer than this duration, the\r\n   * lock needs to be renewed. For each renewal, it resets the time the message is locked by the\r\n   * LockDuration set on the Entity.\r\n   *\r\n   * @param {string | ServiceBusMessage} lockTokenOrMessage Lock token of the message or\r\n   * the message itself.\r\n   * @param {SendRequestOptions} [options] Options that can be set while sending the request.\r\n   * @returns {Promise<Date>} Promise<Date> New lock token expiry date and time in UTC format.\r\n   */\r\n  async renewLock(\r\n    lockTokenOrMessage: string | ServiceBusMessage,\r\n    options?: SendRequestOptions\r\n  ): Promise<Date> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!lockTokenOrMessage) {\r\n      throw new Error(\"'lockTokenOrMessage' is a required parameter.\");\r\n    }\r\n    if (typeof lockTokenOrMessage !== \"object\" && typeof lockTokenOrMessage !== \"string\") {\r\n      throw new Error(\"'lockTokenOrMessage must be of type 'string' or of type 'object'.\");\r\n    }\r\n    if (!options) options = {};\r\n    if (options.delayInSeconds == undefined) options.delayInSeconds = 1;\r\n    if (options.timeoutInSeconds == undefined) options.timeoutInSeconds = 5;\r\n    if (options.times == undefined) options.times = 5;\r\n    const lockToken: string = (lockTokenOrMessage as ServiceBusMessage).lockToken\r\n      ? ((lockTokenOrMessage as ServiceBusMessage).lockToken as string)\r\n      : (lockTokenOrMessage as string);\r\n    try {\r\n      const messageBody: any = {};\r\n\r\n      messageBody[Constants.lockTokens] = types.wrap_array(\r\n        [string_to_uuid(lockToken)],\r\n        0x98,\r\n        undefined\r\n      );\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.renewLock\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Renew message Lock request: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      const result = await this._mgmtReqResLink!.sendRequest(request, options);\r\n      const lockedUntilUtc = new Date(result.body.expirations[0]);\r\n      if (typeof lockTokenOrMessage === \"object\") {\r\n        (lockTokenOrMessage as ServiceBusMessage).lockedUntilUtc = lockedUntilUtc;\r\n      }\r\n      return lockedUntilUtc;\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the renew lock request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedules an array of messages to appear on Service Bus at a later time.\r\n   *\r\n   * @param messages - An array of messages that needs to be scheduled.\r\n   * @returns Promise<number> The sequence numbers of messages that were scheduled.\r\n   */\r\n  async scheduleMessages(messages: ScheduleMessage[]): Promise<Long[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!Array.isArray(messages)) {\r\n      throw new Error(\"'messages' is a required parameter of type 'Array'.\");\r\n    }\r\n    const messageBody: any[] = [];\r\n    for (let i = 0; i < messages.length; i++) {\r\n      const item = messages[i];\r\n      if (typeof item.message !== \"object\") {\r\n        throw new Error(\"'message' is a required property and must be of type 'object'.\");\r\n      }\r\n      if (!(item.scheduledEnqueueTimeUtc instanceof Date)) {\r\n        throw new Error(\r\n          \"'scheduledEnqueueTimeUtc' is a required property and must be of type 'Date'.\"\r\n        );\r\n      }\r\n      const now = Date.now();\r\n      const enqueueTimeInMs = item.scheduledEnqueueTimeUtc.getTime();\r\n      if (enqueueTimeInMs < now) {\r\n        throw new Error(\r\n          `Cannot schedule messages in the past. Given scheduledEnqueueTimeUtc` +\r\n          `(${enqueueTimeInMs}) < current time (${now}).`\r\n        );\r\n      }\r\n      item.message.scheduledEnqueueTimeUtc = item.scheduledEnqueueTimeUtc;\r\n      if (!item.message.messageId) item.message.messageId = generate_uuid();\r\n      SendableMessageInfo.validate(item.message);\r\n      const amqpMessage = SendableMessageInfo.toAmqpMessage(item.message);\r\n\r\n      try {\r\n        const entry: any = {\r\n          message: RheaMessageUtil.encode(amqpMessage),\r\n          \"message-id\": item.message.messageId\r\n        };\r\n        if (item.message.sessionId) {\r\n          entry[Constants.sessionIdMapKey] = item.message.sessionId;\r\n        }\r\n        if (item.message.partitionKey) {\r\n          entry[\"partition-key\"] = item.message.partitionKey;\r\n        }\r\n        if (item.message.viaPartitionKey) {\r\n          entry[\"via-partition-key\"] = item.message.viaPartitionKey;\r\n        }\r\n\r\n        const wrappedEntry = types.wrap_map(entry);\r\n        messageBody.push(wrappedEntry);\r\n      } catch (err) {\r\n        const error = translate(err);\r\n        log.error(\r\n          \"An error occurred while encoding the item at position %d in the messages array\" + \": %O\",\r\n          i,\r\n          error\r\n        );\r\n        throw error;\r\n      }\r\n    }\r\n    try {\r\n      const request: AmqpMessage = {\r\n        body: { messages: messageBody },\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.scheduleMessage\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Schedule messages request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      const result = await this._mgmtReqResLink!.sendRequest(request);\r\n      const sequenceNumbers = result.body[Constants.sequenceNumbers];\r\n      const sequenceNumbersAsLong = [];\r\n      for (let i = 0; i < sequenceNumbers.length; i++) {\r\n        if (typeof sequenceNumbers[i] === \"number\") {\r\n          sequenceNumbersAsLong.push(Long.fromNumber(sequenceNumbers[i]));\r\n        } else {\r\n          sequenceNumbersAsLong.push(Long.fromBytesBE(sequenceNumbers[i]));\r\n        }\r\n      }\r\n      return sequenceNumbersAsLong;\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the request to schedule messages to \" +\r\n        \"$management endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels an array of messages that were scheduled.\r\n   * @param sequenceNumbers - An Array of sequence numbers of the message to be cancelled.\r\n   * @returns Promise<void>\r\n   */\r\n  async cancelScheduledMessages(sequenceNumbers: Long[]): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!Array.isArray(sequenceNumbers)) {\r\n      throw new Error(\"'sequenceNumbers' is a required parameter of type 'Array'.\");\r\n    }\r\n    const messageBody: any = {};\r\n    messageBody[Constants.sequenceNumbers] = [];\r\n    for (let i = 0; i < sequenceNumbers.length; i++) {\r\n      const sequenceNumber = sequenceNumbers[i];\r\n      if (!Long.isLong(sequenceNumber)) {\r\n        throw new Error(\"An item in the 'sequenceNumbers' Array must be an instance of 'Long'.\");\r\n      }\r\n      try {\r\n        messageBody[Constants.sequenceNumbers].push(Buffer.from(sequenceNumber.toBytesBE()));\r\n      } catch (err) {\r\n        const error = translate(err);\r\n        log.error(\r\n          \"An error occurred while encoding the item at position %d in the \" +\r\n          \"sequenceNumbers array: %O\",\r\n          i,\r\n          error\r\n        );\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    try {\r\n      messageBody[Constants.sequenceNumbers] = types.wrap_array(\r\n        messageBody[Constants.sequenceNumbers],\r\n        0x81,\r\n        undefined\r\n      );\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        message_id: generate_uuid(),\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.cancelScheduledMessage\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Cancel scheduled messages request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      await this._mgmtReqResLink!.sendRequest(request);\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the request to cancel the scheduled message to \" +\r\n        \"$management endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Receives a specific deferred message identified by `sequenceNumber` of the `Message`.\r\n   * @param sequenceNumber The sequence number of the message that will be received.\r\n   * @param receiveMode The mode in which the receiver was created.\r\n   * @returns Promise<ServiceBusMessage | undefined>\r\n   * - Returns `ServiceBusMessage` identified by sequence number.\r\n   * - Returns `undefined` if no such message is found.\r\n   * - Throws an error if the message has not been deferred.\r\n   */\r\n  async receiveDeferredMessage(\r\n    sequenceNumber: Long,\r\n    receiveMode: ReceiveMode,\r\n    sessionId?: string\r\n  ): Promise<ServiceBusMessage | undefined> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!Long.isLong(sequenceNumber)) {\r\n      throw new Error(\r\n        \"'sequenceNumber' is a required parameter and must be an instance of 'Long'.\"\r\n      );\r\n    }\r\n    let message: ServiceBusMessage | undefined = undefined;\r\n    const messages = await this.receiveDeferredMessages([sequenceNumber], receiveMode, sessionId);\r\n    if (messages.length) {\r\n      message = messages[0];\r\n    }\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * Receives a list of deferred messages identified by `sequenceNumbers`.\r\n   * @param sequenceNumbers A list containing the sequence numbers to receive.\r\n   * @param receiveMode The mode in which the receiver was created.\r\n   * @returns Promise<ServiceBusMessage[]>\r\n   * - Returns a list of messages identified by the given sequenceNumbers.\r\n   * - Returns an empty list if no messages are found.\r\n   * - Throws an error if the messages have not been deferred.\r\n   */\r\n  async receiveDeferredMessages(\r\n    sequenceNumbers: Long[],\r\n    receiveMode: ReceiveMode,\r\n    sessionId?: string\r\n  ): Promise<ServiceBusMessage[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!Array.isArray(sequenceNumbers)) {\r\n      throw new Error(\"'sequenceNumbers' is a required parameter and must be of type 'Array'.\");\r\n    }\r\n\r\n    if (typeof receiveMode !== \"number\") {\r\n      throw new Error(\"'receiveMode' is a required parameter with value 1 or 2.\");\r\n    }\r\n\r\n    if (sessionId && typeof sessionId !== \"string\") {\r\n      throw new Error(\"'sessionId' must be of type 'string'.\");\r\n    }\r\n\r\n    const messageList: ServiceBusMessage[] = [];\r\n    const messageBody: any = {};\r\n    messageBody[Constants.sequenceNumbers] = [];\r\n    for (let i = 0; i < sequenceNumbers.length; i++) {\r\n      const sequenceNumber = sequenceNumbers[i];\r\n      if (!Long.isLong(sequenceNumber)) {\r\n        throw new Error(\"An item in the 'sequenceNumbers' Array must be an instance of 'Long'.\");\r\n      }\r\n      try {\r\n        messageBody[Constants.sequenceNumbers].push(Buffer.from(sequenceNumber.toBytesBE()));\r\n      } catch (err) {\r\n        const error = translate(err);\r\n        log.error(\r\n          \"An error occurred while encoding the item at position %d in the \" +\r\n          \"sequenceNumbers array: %O\",\r\n          i,\r\n          error\r\n        );\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    try {\r\n      messageBody[Constants.sequenceNumbers] = types.wrap_array(\r\n        messageBody[Constants.sequenceNumbers],\r\n        0x81,\r\n        undefined\r\n      );\r\n      const receiverSettleMode: number = receiveMode === ReceiveMode.receiveAndDelete ? 0 : 1;\r\n      messageBody[Constants.receiverSettleMode] = types.wrap_uint(receiverSettleMode);\r\n      if (sessionId != undefined) {\r\n        messageBody[Constants.sessionIdMapKey] = sessionId;\r\n      }\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        message_id: generate_uuid(),\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.receiveBySequenceNumber\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Receive deferred messages request bosy: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n\r\n      const result = await this._mgmtReqResLink!.sendRequest(request);\r\n      const messages = result.body.messages as {\r\n        message: Buffer;\r\n        \"lock-token\": Buffer;\r\n      }[];\r\n      for (const msg of messages) {\r\n        const decodedMessage = RheaMessageUtil.decode(msg.message);\r\n        const message = new ServiceBusMessage(\r\n          this._context,\r\n          decodedMessage as any,\r\n          { tag: msg[\"lock-token\"] } as any\r\n        );\r\n        this._context.requestResponseLockedMessages.set(\r\n          message.lockToken!,\r\n          message.lockedUntilUtc!\r\n        );\r\n        messageList.push(message);\r\n      }\r\n      return messageList;\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the request to receive deferred messages to \" +\r\n        \"$management endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the disposition status of deferred messages.\r\n   *\r\n   * @param lockTokens Message lock tokens to update disposition status.\r\n   * @param dispositionStatus The disposition status to be set\r\n   * @param options Optional parameters that can be provided while updating the disposition status.\r\n   *\r\n   * @returns Promise<void>\r\n   */\r\n  async updateDispositionStatus(\r\n    lockTokens: string[],\r\n    dispositionStatus: DispositionStatus,\r\n    options?: DispositionStatusOptions\r\n  ): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!Array.isArray(lockTokens)) {\r\n      throw new Error(\"'lockTokens' is a required parameter and must be of type 'Array'.\");\r\n    }\r\n    if (!dispositionStatus || typeof dispositionStatus !== \"string\") {\r\n      throw new Error(\"'dispositionStatus' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    if (!options) options = {};\r\n    try {\r\n      const messageBody: any = {};\r\n      const lockTokenBuffer: Buffer[] = [];\r\n      for (const lockToken of lockTokens) {\r\n        lockTokenBuffer.push(string_to_uuid(lockToken));\r\n      }\r\n      messageBody[Constants.lockTokens] = types.wrap_array(lockTokenBuffer, 0x98, undefined);\r\n      messageBody[Constants.dispositionStatus] = dispositionStatus;\r\n      if (options.deadLetterDescription != undefined) {\r\n        messageBody[Constants.deadLetterDescription] = options.deadLetterDescription;\r\n      }\r\n      if (options.deadLetterReason != undefined) {\r\n        messageBody[Constants.deadLetterReason] = options.deadLetterReason;\r\n      }\r\n      if (options.propertiesToModify != undefined) {\r\n        messageBody[Constants.propertiesToModify] = options.propertiesToModify;\r\n      }\r\n      if (options.sessionId != undefined) {\r\n        messageBody[Constants.sessionIdMapKey] = options.sessionId;\r\n      }\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        message_id: generate_uuid(),\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.updateDisposition\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Update disposition status request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      await this._mgmtReqResLink!.sendRequest(request);\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the request to update disposition status to \" +\r\n        \"$management endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renews the lock for the specified session.\r\n   * @param sessionId Id of the session for which the lock needs to be renewed\r\n   * @param options Options that can be set while sending the request.\r\n   * @returns Promise<Date> New lock token expiry date and time in UTC format.\r\n   */\r\n  async renewSessionLock(sessionId: string, options?: SendRequestOptions): Promise<Date> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (typeof sessionId !== \"string\") {\r\n      throw new Error(\"'sessionId' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    if (!options) options = {};\r\n    if (options.delayInSeconds == undefined) options.delayInSeconds = 1;\r\n    if (options.timeoutInSeconds == undefined) options.timeoutInSeconds = 5;\r\n    if (options.times == undefined) options.times = 5;\r\n    try {\r\n      const messageBody: any = {};\r\n      messageBody[Constants.sessionIdMapKey] = sessionId;\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.renewSessionLock\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Renew Session Lock request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      const result = await this._mgmtReqResLink!.sendRequest(request, options);\r\n      const lockedUntilUtc = new Date(result.body.expiration);\r\n      log.mgmt(\r\n        \"[%s] Lock for session '%s' will expire at %s.\",\r\n        this._context.namespace.connectionId,\r\n        sessionId,\r\n        lockedUntilUtc.toString()\r\n      );\r\n      return lockedUntilUtc;\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the renew lock request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the state of the specified session.\r\n   * @param sessionId The session for which the state needs to be set\r\n   * @param state The state that needs to be set.\r\n   * @returns Promise<void>\r\n   */\r\n  async setSessionState(sessionId: string, state: any): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (typeof sessionId !== \"string\") {\r\n      throw new Error(\"'sessionId' is a required parameter and must be of type 'string'.\");\r\n    }\r\n\r\n    try {\r\n      const messageBody: any = {};\r\n      messageBody[Constants.sessionIdMapKey] = sessionId;\r\n      messageBody[\"session-state\"] = toBuffer(state);\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.setSessionState\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Set Session state request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      await this._mgmtReqResLink!.sendRequest(request);\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the renew lock request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the state of the specified session.\r\n   * @param sessionId The session for which the state needs to be retrieved.\r\n   * @returns Promise<any> The state of that session\r\n   */\r\n  async getSessionState(sessionId: string): Promise<any> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (typeof sessionId !== \"string\") {\r\n      throw new Error(\"'sessionId' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    try {\r\n      const messageBody: any = {};\r\n      messageBody[Constants.sessionIdMapKey] = sessionId;\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.getSessionState\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] Get session state request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      const result = await this._mgmtReqResLink!.sendRequest(request);\r\n      return result.body[\"session-state\"]\r\n        ? this._context.namespace.dataTransformer.decode(result.body[\"session-state\"])\r\n        : result.body[\"session-state\"];\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the renew lock request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lists the sessions on the ServiceBus Queue/Topic.\r\n   * @param lastUpdateTime Filter to include only sessions updated after a given time.\r\n   * @param skip The number of sessions to skip\r\n   * @param top Maximum numer of sessions.\r\n   * @returns Promise<string[]> A list of session ids.\r\n   */\r\n  async listMessageSessions(skip: number, top: number, lastUpdatedTime?: Date): Promise<string[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    const defaultLastUpdatedTimeForListingSessions: number = 259200000; // 3 * 24 * 3600 * 1000\r\n    if (typeof skip !== \"number\") {\r\n      throw new Error(\"'skip' is a required parameter and must be of type 'number'.\");\r\n    }\r\n    if (typeof top !== \"number\") {\r\n      throw new Error(\"'top' is a required parameter and must be of type 'number'.\");\r\n    }\r\n    if (lastUpdatedTime && !(lastUpdatedTime instanceof Date)) {\r\n      throw new Error(\"'lastUpdatedTime' must be of type 'Date'.\");\r\n    }\r\n    if (!lastUpdatedTime) {\r\n      lastUpdatedTime = new Date(Date.now() - defaultLastUpdatedTimeForListingSessions);\r\n    }\r\n    try {\r\n      const messageBody: any = {};\r\n      messageBody[\"last-updated-time\"] = lastUpdatedTime;\r\n      messageBody[\"skip\"] = types.wrap_int(skip);\r\n      messageBody[\"top\"] = types.wrap_int(top);\r\n      const request: AmqpMessage = {\r\n        body: messageBody,\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.enumerateSessions\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n      log.mgmt(\r\n        \"[%s] List sessions request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n      const response = await this._mgmtReqResLink!.sendRequest(request);\r\n\r\n      return (response && response.body && response.body[\"sessions-ids\"]) || [];\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the renew lock request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all the rules on the Subscription.\r\n   * @returns Promise<RuleDescription[]> A list of rules.\r\n   */\r\n  async getRules(): Promise<RuleDescription[]> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    try {\r\n      const request: AmqpMessage = {\r\n        body: {\r\n          top: types.wrap_int(max32BitNumber),\r\n          skip: types.wrap_int(0)\r\n        },\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.enumerateRules\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n\r\n      log.mgmt(\r\n        \"[%s] Get rules request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n\r\n      const response = await this._mgmtReqResLink!.sendRequest(request);\r\n      if (\r\n        response.application_properties!.statusCode === 204 ||\r\n        !response.body ||\r\n        !Array.isArray(response.body.rules)\r\n      ) {\r\n        return [];\r\n      }\r\n\r\n      // Reference: https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-amqp-request-response#response-11\r\n      const result: { \"rule-description\": Typed }[] = response.body.rules || [];\r\n      const rules: RuleDescription[] = [];\r\n      result.forEach((x) => {\r\n        const ruleDescriptor = x[\"rule-description\"];\r\n\r\n        // We use the first three elements of the `ruleDescriptor.value` to get filter, action, name\r\n        if (\r\n          !ruleDescriptor ||\r\n          !ruleDescriptor.descriptor ||\r\n          ruleDescriptor.descriptor.value !== Constants.descriptorCodes.ruleDescriptionList ||\r\n          !Array.isArray(ruleDescriptor.value) ||\r\n          ruleDescriptor.value.length < 3\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        const filtersRawData: Typed = ruleDescriptor.value[0];\r\n        const actionsRawData: Typed = ruleDescriptor.value[1];\r\n        const rule: RuleDescription = {\r\n          name: ruleDescriptor.value[2].value\r\n        };\r\n\r\n        switch (filtersRawData.descriptor.value) {\r\n          case Constants.descriptorCodes.trueFilterList:\r\n            rule.filter = {\r\n              expression: \"1=1\"\r\n            };\r\n            break;\r\n          case Constants.descriptorCodes.falseFilterList:\r\n            rule.filter = {\r\n              expression: \"1=0\"\r\n            };\r\n            break;\r\n          case Constants.descriptorCodes.sqlFilterList:\r\n            rule.filter = {\r\n              expression: this._safelyGetTypedValueFromArray(filtersRawData.value, 0)\r\n            };\r\n            break;\r\n          case Constants.descriptorCodes.correlationFilterList:\r\n            rule.filter = {\r\n              correlationId: this._safelyGetTypedValueFromArray(filtersRawData.value, 0),\r\n              messageId: this._safelyGetTypedValueFromArray(filtersRawData.value, 1),\r\n              to: this._safelyGetTypedValueFromArray(filtersRawData.value, 2),\r\n              replyTo: this._safelyGetTypedValueFromArray(filtersRawData.value, 3),\r\n              label: this._safelyGetTypedValueFromArray(filtersRawData.value, 4),\r\n              sessionId: this._safelyGetTypedValueFromArray(filtersRawData.value, 5),\r\n              replyToSessionId: this._safelyGetTypedValueFromArray(filtersRawData.value, 6),\r\n              contentType: this._safelyGetTypedValueFromArray(filtersRawData.value, 7),\r\n              userProperties: this._safelyGetTypedValueFromArray(filtersRawData.value, 8)\r\n            };\r\n            break;\r\n          default:\r\n            log.mgmt(\r\n              `Found unexpected descriptor code for the filter: ${filtersRawData.descriptor.value}`\r\n            );\r\n            break;\r\n        }\r\n\r\n        if (\r\n          actionsRawData.descriptor.value === Constants.descriptorCodes.sqlRuleActionList &&\r\n          Array.isArray(actionsRawData.value) &&\r\n          actionsRawData.value.length\r\n        ) {\r\n          rule.action = {\r\n            expression: this._safelyGetTypedValueFromArray(actionsRawData.value, 0)\r\n          };\r\n        }\r\n\r\n        rules.push(rule);\r\n      });\r\n\r\n      return rules;\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the get rules request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the rule on the Subscription identified by the given rule name.\r\n   * @param ruleName\r\n   */\r\n  async removeRule(ruleName: string): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!ruleName || typeof ruleName !== \"string\") {\r\n      throw new Error(\"Cannot remove rule. Rule name is missing or is not a string.\");\r\n    }\r\n    try {\r\n      const request: AmqpMessage = {\r\n        body: {\r\n          \"rule-name\": types.wrap_string(ruleName)\r\n        },\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.removeRule\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n\r\n      log.mgmt(\r\n        \"[%s] Remove Rule request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n\r\n      await this._mgmtReqResLink!.sendRequest(request);\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the remove rule request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a rule on the subscription as defined by the given rule name, filter and action\r\n   * @param ruleName Name of the rule\r\n   * @param filter A Boolean, SQL expression or a Correlation filter\r\n   * @param sqlRuleActionExpression Action to perform if the message satisfies the filtering expression\r\n   */\r\n  async addRule(\r\n    ruleName: string,\r\n    filter: boolean | string | CorrelationFilter,\r\n    sqlRuleActionExpression?: string\r\n  ): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (!ruleName || typeof ruleName !== \"string\") {\r\n      throw new Error(\"Cannot add rule. Rule name is missing or is not a string.\");\r\n    }\r\n    if (!filter && filter !== false) {\r\n      throw new Error(\"Cannot add rule. Filter is missing.\");\r\n    }\r\n    if (typeof filter !== \"boolean\" && typeof filter !== \"string\") {\r\n      const filterProperties = Object.keys(filter);\r\n      if (!filterProperties.length) {\r\n        throw new Error(\r\n          \"Cannot add rule. Filter should be either a boolean, string or should have one of the Correlation filter properties.\"\r\n        );\r\n      }\r\n      for (let i = 0; i < filterProperties.length; i++) {\r\n        const filterProperty = filterProperties[i];\r\n        if (validCorrelationProperties.indexOf(filterProperty) === -1) {\r\n          throw new Error(\r\n            `Cannot add rule. Given filter object has unexpected property \"${filterProperty}\".`\r\n          );\r\n        }\r\n      }\r\n    }\r\n    if (sqlRuleActionExpression && typeof sqlRuleActionExpression !== \"string\") {\r\n      throw new Error(\"Cannot add rule. Given action expression is not a string.\");\r\n    }\r\n    try {\r\n      const ruleDescription: any = {};\r\n      switch (typeof filter) {\r\n        case \"boolean\":\r\n          ruleDescription[\"sql-filter\"] = {\r\n            expression: filter ? \"1=1\" : \"1=0\"\r\n          };\r\n          break;\r\n        case \"string\":\r\n          ruleDescription[\"sql-filter\"] = {\r\n            expression: filter\r\n          };\r\n          break;\r\n        default:\r\n          ruleDescription[\"correlation-filter\"] = {\r\n            \"correlation-id\": filter.correlationId,\r\n            \"message-id\": filter.messageId,\r\n            to: filter.to,\r\n            \"reply-to\": filter.replyTo,\r\n            label: filter.label,\r\n            \"session-id\": filter.sessionId,\r\n            \"reply-to-session-id\": filter.replyToSessionId,\r\n            \"content-type\": filter.contentType,\r\n            properties: filter.userProperties\r\n          };\r\n          break;\r\n      }\r\n\r\n      if (sqlRuleActionExpression && typeof sqlRuleActionExpression === \"string\") {\r\n        ruleDescription[\"sql-rule-action\"] = {\r\n          expression: sqlRuleActionExpression\r\n        };\r\n      }\r\n      const request: AmqpMessage = {\r\n        body: {\r\n          \"rule-name\": types.wrap_string(ruleName),\r\n          \"rule-description\": types.wrap_map(ruleDescription)\r\n        },\r\n        reply_to: this.replyTo,\r\n        application_properties: {\r\n          operation: Constants.operations.addRule\r\n        }\r\n      };\r\n      request.application_properties![Constants.trackingId] = generate_uuid();\r\n\r\n      log.mgmt(\r\n        \"[%s] Add Rule request body: %O.\",\r\n        this._context.namespace.connectionId,\r\n        request.body\r\n      );\r\n      log.mgmt(\r\n        \"[%s] Acquiring lock to get the management req res link.\",\r\n        this._context.namespace.connectionId\r\n      );\r\n      await defaultLock.acquire(this.managementLock, () => {\r\n        return this._init();\r\n      });\r\n\r\n      await this._mgmtReqResLink!.sendRequest(request);\r\n    } catch (err) {\r\n      const error = translate(err);\r\n      log.error(\r\n        \"An error occurred while sending the Add rule request to $management \" + \"endpoint: %O\",\r\n        error\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async _init(): Promise<void> {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    try {\r\n      if (!this._isMgmtRequestResponseLinkOpen()) {\r\n        await this._negotiateClaim();\r\n        const rxopt: ReceiverOptions = {\r\n          source: { address: this.address },\r\n          name: this.replyTo,\r\n          target: { address: this.replyTo },\r\n          onSessionError: (context: EventContext) => {\r\n            const id = context.connection.options.id;\r\n            const ehError = translate(context.session!.error!);\r\n            log.error(\r\n              \"[%s] An error occurred on the session for request/response links for \" +\r\n              \"$management: %O\",\r\n              id,\r\n              ehError\r\n            );\r\n          }\r\n        };\r\n        const sropt: SenderOptions = { target: { address: this.address } };\r\n        log.mgmt(\r\n          \"[%s] Creating sender/receiver links on a session for $management endpoint with \" +\r\n          \"srOpts: %o, receiverOpts: %O.\",\r\n          this._context.namespace.connectionId,\r\n          sropt,\r\n          rxopt\r\n        );\r\n        this._mgmtReqResLink = await RequestResponseLink.create(\r\n          this._context.namespace.connection,\r\n          sropt,\r\n          rxopt\r\n        );\r\n        this._mgmtReqResLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\r\n          const id = context.connection.options.id;\r\n          const ehError = translate(context.sender!.error!);\r\n          log.error(\"[%s] An error occurred on the $management sender link.. %O\", id, ehError);\r\n        });\r\n        this._mgmtReqResLink.receiver.on(ReceiverEvents.receiverError, (context: EventContext) => {\r\n          const id = context.connection.options.id;\r\n          const ehError = translate(context.receiver!.error!);\r\n          log.error(\"[%s] An error occurred on the $management receiver link.. %O\", id, ehError);\r\n        });\r\n        log.mgmt(\r\n          \"[%s] Created sender '%s' and receiver '%s' links for $management endpoint.\",\r\n          this._context.namespace.connectionId,\r\n          this._mgmtReqResLink.sender.name,\r\n          this._mgmtReqResLink.receiver.name\r\n        );\r\n        await this._ensureTokenRenewal();\r\n      }\r\n    } catch (err) {\r\n      err = translate(err);\r\n      log.error(\r\n        \"[%s] An error occured while establishing the $management links: %O\",\r\n        this._context.namespace.connectionId,\r\n        err\r\n      );\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  private _isMgmtRequestResponseLinkOpen(): boolean {\r\n    return this._mgmtReqResLink! && this._mgmtReqResLink!.isOpen();\r\n  }\r\n\r\n  /**\r\n   * Given array of typed values, returns the element in given index\r\n   */\r\n  private _safelyGetTypedValueFromArray(data: Typed[], index: number): any {\r\n    return Array.isArray(data) && data.length > index && data[index]\r\n      ? data[index].value\r\n      : undefined;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { generate_uuid } from \"rhea-promise\";\r\nimport { delay, AsyncLock } from \"@azure/amqp-common\";\r\nimport * as log from \"../log\";\r\n\r\n/**\r\n * Describes a map that ensures, deleting a an entry from the map is concurrency safe.\r\n * @internal\r\n * @class ConcurrentExpiringMap<TKey>\r\n */\r\nexport class ConcurrentExpiringMap<TKey> {\r\n  private readonly _map: Map<TKey, Date> = new Map();\r\n  private _cleanupScheduled: boolean = false;\r\n  private _delayBetweenCleanupInSeconds: number;\r\n  private _lockId: string = generate_uuid();\r\n  private _lockStore: AsyncLock = new AsyncLock({ maxPending: 1000000 });\r\n\r\n  constructor(options?: { delayBetweenCleanupInSeconds?: number }) {\r\n    if (!options) options = {};\r\n    this._delayBetweenCleanupInSeconds = options.delayBetweenCleanupInSeconds || 30;\r\n  }\r\n\r\n  /**\r\n   * Sets the key and it's expiration time as the value in the map.\r\n   * @param key The key to be set.\r\n   * @param expiration Expiration time for the key.\r\n   * @returns void\r\n   */\r\n  set(key: TKey, expiration: Date): void {\r\n    this._map.set(key, expiration);\r\n    this._scheduleCleanup().catch((err) => {\r\n      log.error(\r\n        \"An error occurred while scheduling the cleanup, after \" + \"setting the key: '%s': %O\",\r\n        key,\r\n        err\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Determines whether the key is present in the map.\r\n   * @param key The key whose presence in the map needs to be checked.\r\n   * @returns boolean\r\n   */\r\n  has(key: TKey): boolean {\r\n    const value = this._map.get(key) as Date;\r\n    const result: boolean = value && value.getTime() > Date.now();\r\n    log.map(\"Key '%s' is present in the map? -> %s\", key, result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Removes an entry from the the map if present\r\n   * @param key The key which needs to be removed from the map.\r\n   * @returns True if the key was found and removed from the map, False otherwise\r\n   */\r\n  delete(key: TKey): boolean {\r\n    log.map(\"Deleting key '%s' from the map\", key);\r\n    return this._map.delete(key);\r\n  }\r\n\r\n  /**\r\n   * Clears all the entries from the underlying map.\r\n   */\r\n  clear(): void {\r\n    log.map(\"Clearing the map of all the entries\");\r\n    this._map.clear();\r\n  }\r\n\r\n  private async _scheduleCleanup(): Promise<void> {\r\n    if (this._cleanupScheduled || this._map.size === 0) {\r\n      return;\r\n    }\r\n\r\n    await this._lockStore.acquire(this._lockId, () => {\r\n      this._cleanupScheduled = true;\r\n      this._collectExpiredEntries().catch((err) => {\r\n        log.error(\"An error occurred while collecting expired entries: %O\", err);\r\n      });\r\n    });\r\n  }\r\n\r\n  private async _collectExpiredEntries(): Promise<void> {\r\n    if (this._map.size === 0) {\r\n      return;\r\n    }\r\n\r\n    await delay(this._delayBetweenCleanupInSeconds);\r\n    this._cleanupScheduled = false;\r\n    for (const key of this._map.keys()) {\r\n      if (Date.now() > this._map.get(key)!.getTime()) {\r\n        this._map.delete(key);\r\n        log.map(\"Deleted the key '%s' from the map.\", key);\r\n      }\r\n    }\r\n    this._scheduleCleanup().catch((err) => {\r\n      log.error(\r\n        \"An error occurred while scheduling the cleanup, after \" + \"collecting expired entries: %O\",\r\n        err\r\n      );\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * @internal\r\n * A simple Semaphore\r\n * @class Semaphore\r\n */\r\nexport class Semaphore {\r\n  /**\r\n   * The number of concurrent calls that can be made.\r\n   */\r\n  limit: number;\r\n  private _queue: Array<(value?: void | PromiseLike<void> | undefined) => void> = [];\r\n  private _used: number = 0;\r\n  constructor(limit: number) {\r\n    if (typeof limit !== \"number\") {\r\n      throw new TypeError(`Expected limit to be a number, got ${typeof limit}`);\r\n    }\r\n\r\n    if (limit < 1) {\r\n      throw new Error(\"limit cannot be less than 1\");\r\n    }\r\n    this.limit = limit;\r\n  }\r\n\r\n  /**\r\n   * Acquires a lock from the semaphore, returns a Promise that resolves when the caller holds\r\n   * a lock.\r\n   */\r\n  acquire(): Promise<void> {\r\n    if (this._used < this.limit) {\r\n      this._used += 1;\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      this._queue.push(resolve);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Releases a lock back to the semaphore.\r\n   */\r\n  release(): void {\r\n    if (this._queue.length) {\r\n      const item = this._queue.shift();\r\n      if (item) {\r\n        item();\r\n      }\r\n    } else {\r\n      this._used -= 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Aquires a lock from the semaphore and then execute the fn. If the fn returns a Promise,\r\n   * wait for that promise to settle and then release the lock back to the semaphore.\r\n   * @param fn The function that needs to be executed in the ciritical region.\r\n   * @returns A Promise that will settle with the return value of fn.\r\n   */\r\n  use<T>(fn: () => T | PromiseLike<T>): Promise<T> {\r\n    return this.acquire()\r\n      .then(fn)\r\n      .then((val) => {\r\n        this.release();\r\n        return val;\r\n      })\r\n      .catch((err) => {\r\n        this.release();\r\n        throw err;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Provides the number of locks currently held.\r\n   */\r\n  currentLockCount(): number {\r\n    return this._used;\r\n  }\r\n\r\n  /**\r\n   * Provides the number of tasks waiting to acquire a lock.\r\n   */\r\n  awaitedTaskCount(): number {\r\n    return this._queue.length;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { SessionManagerOptions, MessageSession, SessionCallee } from \"./messageSession\";\r\nimport { OnError, OnMessage } from \"../core/messageReceiver\";\r\nimport { ClientEntityContext } from \"../clientEntityContext\";\r\nimport { getProcessorCount } from \"../util/utils\";\r\nimport * as log from \"../log\";\r\nimport { Semaphore } from \"../util/semaphore\";\r\nimport { delay, ConditionErrorNameMapper, Constants } from \"@azure/amqp-common\";\r\n\r\n/**\r\n * @internal\r\n * Enum to denote the entity type calling the session manager\r\n */\r\nexport enum SessionEntityType {\r\n  queue = \"Queue\",\r\n  subscription = \"Subscription\"\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class SessionManager {\r\n  /**\r\n   * @property {number} maxConcurrentSessions The maximum number of sessions that the user wants to\r\n   * handle concurrently.\r\n   * - **Default**: `2000`.\r\n   */\r\n  set maxConcurrentSessions(value: number) {\r\n    if (value <= 0) {\r\n      throw new Error(\"'maxConcurrentSessions must be greater than 0.\");\r\n    }\r\n    this._maxConcurrentSessions = value;\r\n    this.maxConcurrentAcceptSessionRequests = value;\r\n  }\r\n  get maxConcurrenSessions(): number {\r\n    return this._maxConcurrentSessions;\r\n  }\r\n  /**\r\n   * @property {number} _maxConcurrentAcceptSessionRequests The maximum number of acceptSession\r\n   * requests that can be made concurrently at any given time.\r\n   */\r\n  set maxConcurrentAcceptSessionRequests(value: number) {\r\n    this._maxConcurrentAcceptSessionRequests = Math.min(value, getProcessorCount());\r\n  }\r\n  get maxConcurrentAcceptSessionRequests(): number {\r\n    return this._maxConcurrentAcceptSessionRequests;\r\n  }\r\n\r\n  private _isManagingSessions: boolean = false;\r\n  private _maxConcurrentSessions!: number;\r\n  private _maxConcurrentAcceptSessionRequests!: number;\r\n  private _isCancelRequested: boolean = false;\r\n  private _maxConcurrentSessionsSemaphore!: Semaphore;\r\n  private _maxPendingAcceptSessionsSemaphore!: Semaphore;\r\n\r\n  /**\r\n   * @property {ClientEntityContext} _context The client entity context.\r\n   * @readonly\r\n   */\r\n  private readonly _context: ClientEntityContext;\r\n\r\n  constructor(context: ClientEntityContext) {\r\n    this._context = context;\r\n    this.maxConcurrentSessions = 2000;\r\n  }\r\n  /**\r\n   * Manages MessageSessions based on the provided parameters.\r\n   * @param onMessage The message handler to receive service bus messages from a session\r\n   * enabled entity.\r\n   * @param onError The error handler to receive an error that occurs while receiving messages\r\n   * from a session enabled entity.\r\n   */\r\n  async manageMessageSessions(\r\n    entityType: SessionEntityType,\r\n    onMessage: OnMessage,\r\n    onError: OnError,\r\n    options?: SessionManagerOptions\r\n  ): Promise<void> {\r\n    if (this._isManagingSessions) {\r\n      throw new Error(\r\n        `${entityType}Client for \"${this._context.namespace.config.entityPath}\" ` +\r\n          `is already receiving messages from sessions. Please close this ${entityType}Client or ` +\r\n          `create a new one and receiveMessages from Sessions.`\r\n      );\r\n    }\r\n    this._isManagingSessions = true;\r\n    this._isCancelRequested = false;\r\n    if (!options) options = {};\r\n    if (options.maxConcurrentSessions) this.maxConcurrentSessions = options.maxConcurrentSessions;\r\n    // We are explicitly configuring the messageSession to timeout in 60 seconds (if not provided\r\n    // by the user) when no new messages are received.\r\n    if (!options.newMessageWaitTimeoutInSeconds) {\r\n      options.newMessageWaitTimeoutInSeconds = Constants.defaultOperationTimeoutInSeconds;\r\n    }\r\n    this._maxConcurrentSessionsSemaphore = new Semaphore(this.maxConcurrenSessions);\r\n    this._maxPendingAcceptSessionsSemaphore = new Semaphore(\r\n      this.maxConcurrentAcceptSessionRequests\r\n    );\r\n\r\n    for (let i = 0; i < this._maxConcurrentAcceptSessionRequests; i++) {\r\n      this._acceptSessionAndReceiveMessages(onMessage, onError, options).catch((err) => {\r\n        log.error(err);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close the session manager.\r\n   */\r\n  close(): void {\r\n    log.sessionManager(\r\n      \"[%s] Closing the SessionMaanger for entity '%s'.\",\r\n      this._context.namespace.connectionId,\r\n      this._context.entityPath\r\n    );\r\n    this._isCancelRequested = true;\r\n    this._isManagingSessions = false;\r\n  }\r\n\r\n  /**\r\n   * Accept a new session and start receiving messages.\r\n   * @param onMessage Handler for receiving messages from a session enabled entity.\r\n   * @param onError Handler for receiving errors.\r\n   * @param options Optional parameters for handling sessions.\r\n   */\r\n  private async _acceptSessionAndReceiveMessages(\r\n    onMessage: OnMessage,\r\n    onError: OnError,\r\n    options?: SessionManagerOptions\r\n  ): Promise<void> {\r\n    const connectionId = this._context.namespace.connectionId;\r\n    const noActiveSessionBackOffInSeconds = 10;\r\n    while (!this._isCancelRequested) {\r\n      try {\r\n        await this._maxConcurrentSessionsSemaphore.acquire();\r\n        log.sessionManager(\r\n          \"[%s] Acquired the semaphore for max concurrent sessions: %d, %d.\",\r\n          connectionId,\r\n          this._maxConcurrentSessionsSemaphore.currentLockCount(),\r\n          this._maxConcurrentSessionsSemaphore.awaitedTaskCount()\r\n        );\r\n\r\n        await this._maxPendingAcceptSessionsSemaphore.acquire();\r\n        log.sessionManager(\r\n          \"[%s] Acquired the semaphore for max pending accept sessions: %d, %d.\",\r\n          connectionId,\r\n          this._maxPendingAcceptSessionsSemaphore.currentLockCount(),\r\n          this._maxPendingAcceptSessionsSemaphore.awaitedTaskCount()\r\n        );\r\n\r\n        const closeMessageSession = async (messageSession: MessageSession) => {\r\n          try {\r\n            await this._maxConcurrentSessionsSemaphore.release();\r\n            log.sessionManager(\r\n              \"[%s] Releasing the semaphore for max concurrent sessions: %d, %d.\",\r\n              connectionId,\r\n              this._maxConcurrentSessionsSemaphore.currentLockCount(),\r\n              this._maxConcurrentSessionsSemaphore.awaitedTaskCount()\r\n            );\r\n            if (messageSession.isOpen()) {\r\n              await messageSession.close();\r\n            }\r\n          } catch (err) {\r\n            log.error(\r\n              \"[%s] An error occurred while releasing the max concurrent session semaphore \" +\r\n                \"or while closing MessageSession with id '%s': %O.\",\r\n              connectionId,\r\n              messageSession.sessionId,\r\n              err\r\n            );\r\n          }\r\n        };\r\n        // Create the MessageSession.\r\n        const messageSession = await MessageSession.create(this._context, {\r\n          callee: SessionCallee.sessionManager,\r\n          ...options\r\n        });\r\n        if (this._isCancelRequested) {\r\n          log.sessionManager(\r\n            \"[%s] Since cancellation was requested, we will close the messageSession with id '%s'.\",\r\n            connectionId,\r\n            messageSession.sessionId\r\n          );\r\n          await closeMessageSession(messageSession);\r\n        }\r\n        const sessionId = messageSession.sessionId;\r\n        this._context.messageSessions[sessionId as string] = messageSession;\r\n\r\n        log.sessionManager(\"[%s] Created MessageSession with id '%s'.\", connectionId, sessionId);\r\n        const onSessionError: OnError = async (error) => {\r\n          log.sessionManager(\r\n            \"An error ocurred in MessageSession with id '%s': %O. Hence closing it.\",\r\n            connectionId,\r\n            sessionId,\r\n            error\r\n          );\r\n          await closeMessageSession(messageSession);\r\n          if (error.name !== ConditionErrorNameMapper[\"com.microsoft:message-wait-timeout\"]) {\r\n            // notify the user about the error.\r\n            onError(error);\r\n          }\r\n        };\r\n        messageSession.receive(onMessage, onSessionError, options);\r\n      } catch (err) {\r\n        log.error(\"[%s] An error occurred while accepting a MessageSession: %O\", connectionId, err);\r\n        this._maxConcurrentSessionsSemaphore.release();\r\n        log.sessionManager(\r\n          \"[%s] Releasing the semaphore for max concurrent sessions \" +\r\n            \"because an error ocurred: %d, %d.\",\r\n          connectionId,\r\n          this._maxConcurrentSessionsSemaphore.currentLockCount(),\r\n          this._maxConcurrentSessionsSemaphore.awaitedTaskCount()\r\n        );\r\n        // When we ask servicebus to give us a random session and if there are no active sessions,\r\n        // ServiceBus initially sends the attach frame which causes rhea to emit \"receiver_open\"\r\n        // event and thus rhea-promise resolves the promise. Moments later ServiceBus sends a\r\n        // detach frame with an error that the link creation timed out. Therefore inside\r\n        // MessageSession._init() after the promise to create a session enabled receiver link\r\n        // resolves we check for sessionId. If it is undefined then we reject the Promise with an\r\n        // error \"session-cannot-be-locked\". The \"operation-timeout\" error happens when\r\n        // rhea-promise does not receive a response from ServiceBus in a predefined time frame and\r\n        // the Promise is rejected. The \"microsoft.timeout\" error occurs when timeout happens on\r\n        // the server side and ServiceBus sends a detach frame due to which the Promise is rejected.\r\n        if (\r\n          err.name === ConditionErrorNameMapper[\"amqp:operation-timeout\"] ||\r\n          err.name === ConditionErrorNameMapper[\"com.microsoft:timeout\"] ||\r\n          err.name === ConditionErrorNameMapper[\"com.microsoft:session-cannot-be-locked\"]\r\n        ) {\r\n          // No point in delaying if cancel has been requested.\r\n          if (!this._isCancelRequested) {\r\n            log.sessionManager(\r\n              \"[%s] Sleeping for %d seconds, since there are no more active MessageSessions on \" +\r\n                \"the ServiceBus entity.\",\r\n              connectionId,\r\n              noActiveSessionBackOffInSeconds\r\n            );\r\n            await delay(noActiveSessionBackOffInSeconds * 1000);\r\n          }\r\n        } else {\r\n          // notify the user about the error only when it is not one of the above mentioned errors.\r\n          onError(err);\r\n        }\r\n      } finally {\r\n        this._maxPendingAcceptSessionsSemaphore.release();\r\n        log.sessionManager(\r\n          \"[%s] Releasing the semaphore for max pending accept sessions from \" +\r\n            \"the finally block: %d, %d.\",\r\n          connectionId,\r\n          this._maxPendingAcceptSessionsSemaphore.currentLockCount(),\r\n          this._maxPendingAcceptSessionsSemaphore.awaitedTaskCount()\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as log from \"./log\";\r\nimport { StreamingReceiver } from \"./core/streamingReceiver\";\r\nimport { MessageSender } from \"./core/messageSender\";\r\nimport { ManagementClient, ManagementClientOptions } from \"./core/managementClient\";\r\nimport { ConnectionContext } from \"./connectionContext\";\r\nimport { Dictionary, AmqpError } from \"rhea-promise\";\r\nimport { Client } from \"./client\";\r\nimport { BatchingReceiver } from \"./core/batchingReceiver\";\r\nimport { ConcurrentExpiringMap } from \"./util/concurrentExpiringMap\";\r\nimport { MessageReceiver } from \"./core/messageReceiver\";\r\nimport { MessageSession } from \"./session/messageSession\";\r\nimport { SessionManager } from \"./session/sessionManager\";\r\n\r\n/**\r\n * @interface ClientEntityContext\r\n * Provides contextual information like the underlying amqp connection, cbs session,\r\n * management session, tokenProvider, senders, receivers, etc. about the ServiceBus client.\r\n * @internal\r\n */\r\nexport interface ClientEntityContextBase {\r\n  /**\r\n   * @property {ConnectionContext} namespace Describes the context with common properties at\r\n   * the namespace level.\r\n   */\r\n  namespace: ConnectionContext;\r\n  /**\r\n   * @property {string} entityPath - The name/path of the entity (queue/topic/subscription) to which\r\n   * the connection needs to happen.\r\n   */\r\n  entityPath: string;\r\n  /**\r\n   * @property {boolean} [isSessionEnabled] Indicates whether the client entity is session enabled.\r\n   * Default: `false`.\r\n   */\r\n  isSessionEnabled?: boolean;\r\n  /**\r\n   * @property {ManagementClient} [managementClient] A reference to the management client\r\n   * ($management endpoint) on the underlying amqp connection for the ServiceBus Client.\r\n   */\r\n  managementClient?: ManagementClient;\r\n  /**\r\n   * @property {StreamingReceiver} [receiver] The ServiceBus receiver associated with the\r\n   * client entity for streaming messages.\r\n   */\r\n  streamingReceiver?: StreamingReceiver;\r\n  /**\r\n   * @property {BatchingReceiver} [batchingReceiver] The ServiceBus receiver associated with the\r\n   * client entity for receiving a batch of messages.\r\n   */\r\n  batchingReceiver?: BatchingReceiver;\r\n  /**\r\n   * @property {Dictionary<MessageSession>} messageSessions A dictionary of the MessageSession\r\n   * objects associated with this client.\r\n   */\r\n  messageSessions: Dictionary<MessageSession>;\r\n  /**\r\n   * @property {Dictionary<MessageSession>} expiredMessageSessions A dictionary that stores expired message sessions IDs.\r\n   */\r\n  expiredMessageSessions: Dictionary<Boolean>;\r\n  /**\r\n   * @property {MessageSender} [sender] The ServiceBus sender associated with the client entity.\r\n   */\r\n  sender?: MessageSender;\r\n  /**\r\n   * @property {ConcurrentExpiringMap<string>} [requestResponseLockedMessages] A map of locked\r\n   * messages received using the management client.\r\n   */\r\n  requestResponseLockedMessages: ConcurrentExpiringMap<string>;\r\n  /**\r\n   * @property {SessionManager} [sessionManager] SessionManager is responsible for efficiently\r\n   * receiving messages from multiple message sessions.\r\n   */\r\n  sessionManager?: SessionManager;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ClientEntityContext extends ClientEntityContextBase {\r\n  detached(error?: AmqpError | Error): Promise<void>;\r\n  getReceiver(name: string, sessionId?: string): MessageReceiver | MessageSession;\r\n  clearClientReference(clientId: string): Promise<void>;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ClientEntityContextOptions {\r\n  managementClientAddress?: string;\r\n  managementClientAudience?: string;\r\n  isSessionEnabled?: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport namespace ClientEntityContext {\r\n  /**\r\n   * @internal\r\n   */\r\n  export function create(\r\n    entityPath: string,\r\n    context: ConnectionContext,\r\n    options?: ClientEntityContextOptions\r\n  ): ClientEntityContext {\r\n    if (!entityPath || typeof entityPath !== \"string\") {\r\n      throw new Error(\"'entityPath' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    if (!context || typeof context !== \"object\") {\r\n      throw new Error(\"'context' is a required parameter and must be of type 'object'.\");\r\n    }\r\n    if (!options) options = {};\r\n    const entityContext: ClientEntityContextBase = {\r\n      namespace: context,\r\n      entityPath: entityPath,\r\n      requestResponseLockedMessages: new ConcurrentExpiringMap<string>(),\r\n      isSessionEnabled: !!options.isSessionEnabled,\r\n      messageSessions: {},\r\n      expiredMessageSessions: {}\r\n    };\r\n\r\n    (entityContext as ClientEntityContext).sessionManager = new SessionManager(\r\n      entityContext as ClientEntityContext\r\n    );\r\n\r\n    (entityContext as ClientEntityContext).getReceiver = (name: string, sessionId?: string) => {\r\n      if (sessionId && entityContext.expiredMessageSessions[sessionId]) {\r\n        const error = new Error(\r\n          `The session lock has expired on the session with id ${sessionId}.`\r\n        );\r\n        error.name = \"SessionLockLostError\";\r\n        throw error;\r\n      }\r\n\r\n      let receiver: MessageReceiver | MessageSession | undefined = undefined;\r\n      if (\r\n        sessionId != undefined &&\r\n        entityContext.messageSessions[sessionId] &&\r\n        entityContext.messageSessions[sessionId].name === name\r\n      ) {\r\n        receiver = entityContext.messageSessions[sessionId];\r\n      } else if (entityContext.streamingReceiver && entityContext.streamingReceiver.name === name) {\r\n        receiver = entityContext.streamingReceiver;\r\n      } else if (entityContext.batchingReceiver && entityContext.batchingReceiver.name === name) {\r\n        receiver = entityContext.batchingReceiver;\r\n      } else {\r\n        throw new Error(`Cannot find the receiver with name '${name}'.`);\r\n      }\r\n      return receiver;\r\n    };\r\n\r\n    (entityContext as ClientEntityContext).detached = async (error?: AmqpError | Error) => {\r\n      const connectionId = entityContext.namespace.connectionId;\r\n      // reconnect the sender if present\r\n      const sender = entityContext.sender;\r\n      if (sender && !sender.isConnecting) {\r\n        try {\r\n          log.error(\"[%s] calling detached on sender '%s'.\", connectionId, sender.name);\r\n          await sender.detached();\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] An error occurred while reconnecting the sender '%s': %O.\",\r\n            connectionId,\r\n            sender.name,\r\n            err\r\n          );\r\n        }\r\n      }\r\n      // reconnect the batching receiver if present\r\n      const batchingReceiver = entityContext.batchingReceiver;\r\n      if (batchingReceiver && !batchingReceiver.isConnecting) {\r\n        try {\r\n          log.error(\r\n            \"[%s] calling detached on batching receiver '%s'.\",\r\n            connectionId,\r\n            batchingReceiver.name\r\n          );\r\n          await batchingReceiver.detached(error);\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] An error occurred while reconnecting the sender '%s': %O.\",\r\n            connectionId,\r\n            batchingReceiver.name,\r\n            err\r\n          );\r\n        }\r\n      }\r\n      // reconnect the streaming receiver if present\r\n      const streamingReceiver = entityContext.batchingReceiver;\r\n      if (streamingReceiver && !streamingReceiver.isConnecting) {\r\n        try {\r\n          log.error(\r\n            \"[%s] calling detached on streaming receiver '%s'.\",\r\n            connectionId,\r\n            streamingReceiver.name\r\n          );\r\n          await streamingReceiver.detached(error);\r\n        } catch (err) {\r\n          log.error(\r\n            \"[%s] An error occurred while reconnecting the sender '%s': %O.\",\r\n            connectionId,\r\n            streamingReceiver.name,\r\n            err\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    (entityContext as ClientEntityContext).clearClientReference = async (clientId: string) => {\r\n      delete context.clients[clientId];\r\n\r\n      if (!entityContext.managementClient) {\r\n        return;\r\n      }\r\n      let isManagementClientInUse = false;\r\n      for (const id of Object.keys(context.clients)) {\r\n        if (context.clients[id].entityPath === entityContext.entityPath) {\r\n          isManagementClientInUse = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!isManagementClientInUse) {\r\n        await entityContext.managementClient.close();\r\n        entityContext.managementClient = undefined;\r\n      }\r\n    };\r\n\r\n    let managementClient = getManagementClient(context.clients, entityPath);\r\n    if (!managementClient) {\r\n      const mOptions: ManagementClientOptions = {\r\n        address: options.managementClientAddress || `${entityPath}/$management`,\r\n        audience: options.managementClientAudience\r\n      };\r\n      managementClient = new ManagementClient(entityContext as ClientEntityContext, mOptions);\r\n    }\r\n    entityContext.managementClient = managementClient;\r\n    log.entityCtxt(\"Created client entity context: %O\", entityContext);\r\n    return entityContext as ClientEntityContext;\r\n  }\r\n}\r\n\r\n// Multiple Queue clients for the same queue should be using the same management client.\r\nfunction getManagementClient(\r\n  clients: Dictionary<Client>,\r\n  entityPath: string\r\n): ManagementClient | undefined {\r\n  let result: ManagementClient | undefined;\r\n  for (const id of Object.keys(clients)) {\r\n    if (clients[id].entityPath === entityPath) {\r\n      result = (clients[id] as any)._context.managementClient;\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as Long from \"long\";\r\nimport * as log from \"./log\";\r\nimport { ConnectionContext } from \"./connectionContext\";\r\nimport { ReceivedMessageInfo } from \"./serviceBusMessage\";\r\nimport { Client } from \"./client\";\r\nimport { MessageSession, SessionReceiverOptions } from \"./session/messageSession\";\r\nimport { Sender } from \"./sender\";\r\nimport { Receiver, MessageReceiverOptions, SessionReceiver } from \"./receiver\";\r\nimport { throwErrorIfConnectionClosed } from \"./util/utils\";\r\nimport { AmqpError, generate_uuid } from \"rhea-promise\";\r\nimport { ClientEntityContext } from \"./clientEntityContext\";\r\n\r\n/**\r\n * Describes the client that allows interacting with a Service Bus Queue.\r\n * Use the `createQueueClient` function on the Namespace object to instantiate a QueueClient\r\n * @class QueueClient\r\n */\r\nexport class QueueClient implements Client {\r\n  /**\r\n   * @property {string} The entitypath for the Service Bus Queue for which this client is created.\r\n   */\r\n  readonly entityPath: string;\r\n  /**\r\n   * @property {string} A unique identifier for the client.\r\n   */\r\n  readonly id: string;\r\n  /**\r\n   * @property {boolean} _isClosed Denotes if close() was called on this client.\r\n   */\r\n  private _isClosed: boolean = false;\r\n  /**\r\n   * @property {ClientEntityContext} _context Describes the amqp connection context for the QueueClient.\r\n   */\r\n  private _context: ClientEntityContext;\r\n\r\n  private _currentReceiver: Receiver | undefined;\r\n  private _currentSender: Sender | undefined;\r\n\r\n  /**\r\n   * Constructor for QueueClient.\r\n   * This is not meant for the user to call directly.\r\n   * The user should use the `createQueueClient` on the Namespace instead.\r\n   *\r\n   * @constructor\r\n   * @internal\r\n   * @param name The Queue name.\r\n   * @param context The connection context to create the QueueClient.\r\n   */\r\n  constructor(name: string, context: ConnectionContext) {\r\n    throwErrorIfConnectionClosed(context);\r\n    this.entityPath = name;\r\n    this.id = `${this.entityPath}/${generate_uuid()}`;\r\n    this._context = ClientEntityContext.create(this.entityPath, context);\r\n  }\r\n\r\n  /**\r\n   * Closes all the AMQP links for sender/receivers created by this client.\r\n   * Once closed, neither the QueueClient nor its sender/recievers can be used for any\r\n   * further operations. Use the `createQueueClient` function on the Namespace object to\r\n   * instantiate a new QueueClient\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      if (this._context.namespace.connection && this._context.namespace.connection.isOpen()) {\r\n        // Close the sender.\r\n        if (this._currentSender) {\r\n          await this._currentSender.close();\r\n        }\r\n\r\n        // Close the sessionManager.\r\n        if (this._context.sessionManager) {\r\n          this._context.sessionManager.close();\r\n        }\r\n\r\n        // Close the streaming and batching receivers.\r\n        if (this._currentReceiver) {\r\n          await this._currentReceiver.close();\r\n        }\r\n\r\n        // Close all the MessageSessions.\r\n        for (const messageSessionId of Object.keys(this._context.messageSessions)) {\r\n          await this._context.messageSessions[messageSessionId].close();\r\n        }\r\n\r\n        // Make sure that we clear the map of deferred messages\r\n        this._context.requestResponseLockedMessages.clear();\r\n\r\n        // Delete the reference in ConnectionContext\r\n        await this._context.clearClientReference(this.id);\r\n\r\n        // Mark this client as closed, so that we can show appropriate errors for subsequent usage\r\n        this._isClosed = true;\r\n\r\n        log.qClient(\"Closed the Queue client '%s'.\", this.id);\r\n      }\r\n    } catch (err) {\r\n      const msg =\r\n        `An error occurred while closing the queue client ` +\r\n        `\"${this.id}\": ${JSON.stringify(err)} `;\r\n      log.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will reconnect the queueClient and all its sender/receiver links.\r\n   * This is meant for the library to use to resume sending/receiving when retryable errors are seen.\r\n   * This is not meant for the consumer of this library to use.\r\n   * @ignore\r\n   * @param error Error if any due to which we are attempting to reconnect\r\n   */\r\n  async detached(error?: AmqpError | Error): Promise<void> {\r\n    try {\r\n      await this._context.detached(error);\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] [%s] An error occurred while reconnecting the client: %O.\",\r\n        this._context.namespace.connectionId,\r\n        this.id,\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a Sender to be used for sending messages, scheduling messages to be sent at a later time\r\n   * and cancelling such scheduled messages.\r\n   */\r\n  getSender(): Sender {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    if (!this._currentSender || this._currentSender.isClosed) {\r\n      this._currentSender = new Sender(this._context);\r\n    }\r\n    return this._currentSender;\r\n  }\r\n\r\n  /**\r\n   * Gets a Receiver to be used for receiving messages in batches or by registering handlers.\r\n   *\r\n   * @param options Options for creating the receiver.\r\n   */\r\n  getReceiver(options?: MessageReceiverOptions): Receiver {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    if (!this._currentReceiver || this._currentReceiver.isClosed) {\r\n      this._currentReceiver = new Receiver(this._context, options);\r\n    }\r\n    return this._currentReceiver;\r\n  }\r\n\r\n  /**\r\n   * Fetches the next batch of active messages (including deferred but not deadlettered messages).\r\n   * The first call to `peek()` fetches the first active message. Each subsequent call fetches the\r\n   * subsequent message.\r\n   *\r\n   * Unlike a `received` message, `peeked` message is a read-only version of the message.\r\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it cannot be renewed.\r\n   *\r\n   * @param [messageCount] The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedSBMessage[]>\r\n   */\r\n  async peek(messageCount?: number): Promise<ReceivedMessageInfo[]> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    return this._context.managementClient!.peek(messageCount);\r\n  }\r\n\r\n  /**\r\n   * Peeks the desired number of active messages (including deferred but not deadlettered messages)\r\n   * from the specified sequence number.\r\n   *\r\n   * Unlike a `received` message, `peeked` message is a read-only version of the message.\r\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it cannot be renewed.\r\n   *\r\n   * @param fromSequenceNumber The sequence number from where to read the message.\r\n   * @param [messageCount] The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedSBMessage[]>\r\n   */\r\n  async peekBySequenceNumber(\r\n    fromSequenceNumber: Long,\r\n    messageCount?: number\r\n  ): Promise<ReceivedMessageInfo[]> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    return this._context.managementClient!.peekBySequenceNumber(fromSequenceNumber, {\r\n      messageCount: messageCount\r\n    });\r\n  }\r\n\r\n  // /**\r\n  //  * Lists the ids of the sessions on the ServiceBus Queue.\r\n  //  * @param maxNumberOfSessions Maximum number of sessions.\r\n  //  * @param lastUpdateTime Filter to include only sessions updated after a given time. Default\r\n  //  * value is 3 days before the current time.\r\n  //  */\r\n  // async listMessageSessions(\r\n  //   maxNumberOfSessions: number,\r\n  //   lastUpdatedTime?: Date\r\n  // ): Promise<string[]> {\r\n  // this.throwErrorIfClientOrConnectionClosed();\r\n  //   return this._context.managementClient!.listMessageSessions(\r\n  //     0,\r\n  //     maxNumberOfSessions,\r\n  //     lastUpdatedTime\r\n  //   );\r\n  // }\r\n\r\n  /**\r\n   * Gets a SessionReceiver for receiving messages in batches or by registering handlers from a\r\n   * session enabled Queue. When no sessionId is given, a random session among the available\r\n   * sessions is used.\r\n   *\r\n   * @param options Options to provide sessionId and ReceiveMode for receiving messages from the\r\n   * session enabled Servicebus Queue.\r\n   *\r\n   * @returns SessionReceiver An instance of a SessionReceiver to receive messages from the session.\r\n   */\r\n  async getSessionReceiver(options?: SessionReceiverOptions): Promise<SessionReceiver> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    if (!options) options = {};\r\n    if (options.sessionId) {\r\n      if (\r\n        this._context.messageSessions[options.sessionId] &&\r\n        this._context.messageSessions[options.sessionId].isOpen()\r\n      ) {\r\n        throw new Error(\r\n          `Close the current session receiver for sessionId ${\r\n            options.sessionId\r\n          } before using \"getSessionReceiver\" to create a new one for the same sessionId`\r\n        );\r\n      }\r\n    }\r\n    this._context.isSessionEnabled = true;\r\n    const messageSession = await MessageSession.create(this._context, options);\r\n    if (messageSession.sessionId) {\r\n      delete this._context.expiredMessageSessions[messageSession.sessionId];\r\n    }\r\n    return new SessionReceiver(this._context, messageSession);\r\n  }\r\n\r\n  /**\r\n   * Throws error if this queueClient has been closed\r\n   * @param client\r\n   */\r\n  private throwErrorIfClientOrConnectionClosed(): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this._isClosed) {\r\n      throw new Error(\"The queueClient has been closed and can no longer be used.\");\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as log from \"./log\";\r\nimport { ConnectionContext } from \"./connectionContext\";\r\nimport { Client } from \"./client\";\r\nimport { Sender } from \"./sender\";\r\nimport { throwErrorIfConnectionClosed } from \"./util/utils\";\r\nimport { AmqpError, generate_uuid } from \"rhea-promise\";\r\nimport { ClientEntityContext } from \"./clientEntityContext\";\r\n\r\n/**\r\n * Describes the client that allows interacting with a Service Bus Topic.\r\n * Use the `createTopicClient` function on the Namespace object to instantiate a TopicClient\r\n * @class TopicClient\r\n */\r\nexport class TopicClient implements Client {\r\n  /**\r\n   * @property {string} The entitypath for the Service Bus Topic for which this client is created.\r\n   */\r\n  readonly entityPath: string;\r\n  /**\r\n   * @property {string} A unique identifier for the client.\r\n   */\r\n  readonly id: string;\r\n  /**\r\n   * @property {boolean} _isClosed Denotes if close() was called on this client.\r\n   */\r\n  private _isClosed: boolean = false;\r\n  /**\r\n   * @property {ClientEntityContext} _context Describes the amqp connection context for the QueueClient.\r\n   */\r\n  private _context: ClientEntityContext;\r\n\r\n  private _currentSender: Sender | undefined;\r\n\r\n  /**\r\n   * Constructor for TopicClient.\r\n   * This is not meant for the user to call directly.\r\n   * The user should use the `createTopicClient` on the Namespace instead.\r\n   *\r\n   * @constructor\r\n   * @internal\r\n   * @param name - The topic name.\r\n   * @param context - The connection context to create the TopicClient.\r\n   */\r\n  constructor(name: string, context: ConnectionContext) {\r\n    throwErrorIfConnectionClosed(context);\r\n    this.entityPath = name;\r\n    this.id = `${this.entityPath}/${generate_uuid()}`;\r\n    this._context = ClientEntityContext.create(this.entityPath, context);\r\n  }\r\n\r\n  /**\r\n   * Closes the AMQP link for the sender created by this client.\r\n   * Once closed, neither the TopicClient nor its senders can be used for any\r\n   * further operations. Use the `createTopicClient` function on the Namespace object to\r\n   * instantiate a new TopicClient\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      if (this._context.namespace.connection && this._context.namespace.connection.isOpen()) {\r\n        // Close the sender.\r\n        if (this._currentSender) {\r\n          await this._currentSender.close();\r\n        }\r\n\r\n        // Delete the reference in ConnectionContext\r\n        await this._context.clearClientReference(this.id);\r\n\r\n        // Mark this client as closed, so that we can show appropriate errors for subsequent usage\r\n        this._isClosed = true;\r\n\r\n        log.topicClient(\"Closed the topic client '%s'.\", this.id);\r\n      }\r\n    } catch (err) {\r\n      const msg =\r\n        `An error occurred while closing the topic client ` +\r\n        `\"${this.id}\": ${JSON.stringify(err)} `;\r\n      log.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will reconnect the topicClient and its sender links.\r\n   * This is meant for the library to use to resume sending when retryable errors are seen.\r\n   * This is not meant for the consumer of this library to use.\r\n   * @ignore\r\n   * @param error Error if any due to which we are attempting to reconnect\r\n   */\r\n  async detached(error?: AmqpError | Error): Promise<void> {\r\n    try {\r\n      await this._context.detached(error);\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] [%s] An error occurred while reconnecting the client: %O.\",\r\n        this._context.namespace.connectionId,\r\n        this.id,\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a Sender to be used for sending messages, scheduling messages to be sent at a later time\r\n   * and cancelling such scheduled messages.\r\n   *\r\n   * If the Topic has session enabled Subscriptions, then messages sent without the `sessionId`\r\n   * property will go to the dead letter queue of such subscriptions.\r\n   */\r\n  getSender(): Sender {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    if (!this._currentSender || this._currentSender.isClosed) {\r\n      this._currentSender = new Sender(this._context);\r\n    }\r\n    return this._currentSender;\r\n  }\r\n\r\n  /**\r\n   * Throws error if given client has been closed\r\n   * @param client\r\n   */\r\n  private throwErrorIfClientOrConnectionClosed(): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this._isClosed) {\r\n      throw new Error(\"The topicClient has been closed and can no longer be used.\");\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as log from \"./log\";\r\nimport { ConnectionContext } from \"./connectionContext\";\r\nimport { Receiver, MessageReceiverOptions, SessionReceiver } from \"./receiver\";\r\nimport { ReceivedMessageInfo } from \"./serviceBusMessage\";\r\nimport { Client } from \"./client\";\r\nimport { CorrelationFilter, RuleDescription } from \"./core/managementClient\";\r\nimport { MessageSession, SessionReceiverOptions } from \"./session/messageSession\";\r\nimport { throwErrorIfConnectionClosed } from \"./util/utils\";\r\nimport { AmqpError, generate_uuid } from \"rhea-promise\";\r\nimport { ClientEntityContext } from \"./clientEntityContext\";\r\n\r\n/**\r\n * Describes the client that allows interacting with a Service Bus Subscription.\r\n * Use the `createSubscriptionClient` function on the Namespace object to instantiate a\r\n * SubscriptionClient\r\n * @class SubscriptionClient\r\n */\r\nexport class SubscriptionClient implements Client {\r\n  /**\r\n   * @property {string}  The topic name.\r\n   */\r\n  readonly topicName: string;\r\n  /**\r\n   * @property {string}  The subscription name.\r\n   */\r\n  readonly subscriptionName: string;\r\n\r\n  /**\r\n   * @property {string} defaultRuleName Name of the default rule on the subscription.\r\n   */\r\n  readonly defaultRuleName: string = \"$Default\";\r\n\r\n  /**\r\n   * @property {string} The entitypath for the Service Bus Subscription for which this client is created.\r\n   */\r\n  readonly entityPath: string;\r\n  /**\r\n   * @property {string} A unique identifier for the client.\r\n   */\r\n  readonly id: string;\r\n  /**\r\n   * @property {boolean} _isClosed Denotes if close() was called on this client.\r\n   */\r\n  private _isClosed: boolean = false;\r\n  /**\r\n   * @property {ClientEntityContext} _context Describes the amqp connection context for the QueueClient.\r\n   */\r\n  private _context: ClientEntityContext;\r\n\r\n  private _currentReceiver: Receiver | undefined;\r\n\r\n  /**\r\n   * Constructor for SubscriptionClient.\r\n   * This is not meant for the user to call directly.\r\n   * The user should use the `createSubscriptionClient` on the Namespace instead.\r\n   *\r\n   * @constructor\r\n   * @internal\r\n   * @param topicName - The Topic name.\r\n   * @param subscriptionName - The Subscription name.\r\n   * @param context - The connection context to create the SubscriptionClient.\r\n   */\r\n  constructor(topicName: string, subscriptionName: string, context: ConnectionContext) {\r\n    throwErrorIfConnectionClosed(context);\r\n\r\n    this.entityPath = `${topicName}/Subscriptions/${subscriptionName}`;\r\n    this.id = `${this.entityPath}/${generate_uuid()}`;\r\n    this._context = ClientEntityContext.create(this.entityPath, context);\r\n\r\n    this.topicName = topicName;\r\n    this.subscriptionName = subscriptionName;\r\n  }\r\n\r\n  /**\r\n   * Closes the AMQP link for the receivers created by this client.\r\n   * Once closed, neither the SubscriptionClient nor its recievers can be used for any\r\n   * further operations. Use the `createSubscriptionClient` function on the Namespace object to\r\n   * instantiate a new SubscriptionClient.\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  async close(): Promise<void> {\r\n    try {\r\n      if (this._context.namespace.connection && this._context.namespace.connection.isOpen()) {\r\n        // Close the sessionManager.\r\n        if (this._context.sessionManager) {\r\n          this._context.sessionManager.close();\r\n        }\r\n\r\n        // Close the streaming and batching receivers.\r\n        if (this._currentReceiver) {\r\n          await this._currentReceiver.close();\r\n        }\r\n\r\n        // Close all the MessageSessions.\r\n        for (const messageSessionId of Object.keys(this._context.messageSessions)) {\r\n          await this._context.messageSessions[messageSessionId].close();\r\n        }\r\n\r\n        // Make sure that we clear the map of deferred messages\r\n        this._context.requestResponseLockedMessages.clear();\r\n\r\n        // Delete the reference in ConnectionContext\r\n        await this._context.clearClientReference(this.id);\r\n\r\n        // Mark this client as closed, so that we can show appropriate errors for subsequent usage\r\n        this._isClosed = true;\r\n\r\n        log.subscriptionClient(\"Closed the subscription client '%s'.\", this.id);\r\n      }\r\n    } catch (err) {\r\n      const msg =\r\n        `An error occurred while closing the subscription client ` +\r\n        `\"${this.id}\": ${JSON.stringify(err)} `;\r\n      log.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will reconnect the subscritpionClient and its receiver links.\r\n   * This is meant for the library to use to resume receiving when retryable errors are seen.\r\n   * This is not meant for the consumer of this library to use.\r\n   * @ignore\r\n   * @param error Error if any due to which we are attempting to reconnect\r\n   */\r\n  async detached(error?: AmqpError | Error): Promise<void> {\r\n    try {\r\n      await this._context.detached(error);\r\n    } catch (err) {\r\n      log.error(\r\n        \"[%s] [%s] An error occurred while reconnecting the client: %O.\",\r\n        this._context.namespace.connectionId,\r\n        this.id,\r\n        err\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a Receiver to be used for receiving messages in batches or by registering handlers.\r\n   *\r\n   * @param options Options for creating the receiver.\r\n   */\r\n  getReceiver(options?: MessageReceiverOptions): Receiver {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    if (!this._currentReceiver || this._currentReceiver.isClosed) {\r\n      this._currentReceiver = new Receiver(this._context, options);\r\n    }\r\n    return this._currentReceiver;\r\n  }\r\n\r\n  /**\r\n   * Fetches the next batch of active messages (including deferred but not deadlettered messages).\r\n   * The first call to `peek()` fetches the first active message. Each subsequent call fetches the\r\n   * subsequent message.\r\n   *\r\n   * Unlike a `received` message, `peeked` message is a read-only version of the message.\r\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it cannot be renewed.\r\n   *\r\n   * @param [messageCount] The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedSBMessage[]>\r\n   */\r\n  async peek(messageCount?: number): Promise<ReceivedMessageInfo[]> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    return this._context.managementClient!.peek(messageCount);\r\n  }\r\n\r\n  /**\r\n   * Peeks the desired number of active messages (including deferred but not deadlettered messages)\r\n   * from the specified sequence number.\r\n   *\r\n   * Unlike a `received` message, `peeked` message is a read-only version of the message.\r\n   * It cannot be `Completed/Abandoned/Deferred/Deadlettered`. The lock on it cannot be renewed.\r\n   *\r\n   * @param fromSequenceNumber The sequence number from where to read the message.\r\n   * @param [messageCount] The number of messages to retrieve. Default value `1`.\r\n   * @returns Promise<ReceivedSBMessage[]>\r\n   */\r\n  async peekBySequenceNumber(\r\n    fromSequenceNumber: Long,\r\n    messageCount?: number\r\n  ): Promise<ReceivedMessageInfo[]> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    return this._context.managementClient!.peekBySequenceNumber(fromSequenceNumber, {\r\n      messageCount: messageCount\r\n    });\r\n  }\r\n\r\n  //#region topic-filters\r\n\r\n  /**\r\n   * Get all the rules associated with the subscription\r\n   */\r\n  async getRules(): Promise<RuleDescription[]> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    return this._context.managementClient!.getRules();\r\n  }\r\n\r\n  /**\r\n   * Removes the rule on the subscription identified by the given rule name.\r\n   * @param ruleName\r\n   */\r\n  async removeRule(ruleName: string): Promise<void> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    return this._context.managementClient!.removeRule(ruleName);\r\n  }\r\n\r\n  /**\r\n   * Adds a rule on the subscription as defined by the given rule name, filter and action.\r\n   * Remember to remove the default true filter on the subscription before adding a rule,\r\n   * otherwise, the added rule will have no affect as the true filter will always result in\r\n   * the subscription receiving all messages.\r\n   * @param ruleName Name of the rule\r\n   * @param filter A Boolean, SQL expression or a Correlation filter. For SQL Filter syntax, see\r\n   * {@link https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-filter SQLFilter syntax}.\r\n   * @param sqlRuleActionExpression Action to perform if the message satisfies the filtering expression. For SQL Rule Action syntax,\r\n   * see {@link https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-rule-action SQLRuleAction syntax}.\r\n   */\r\n  async addRule(\r\n    ruleName: string,\r\n    filter: boolean | string | CorrelationFilter,\r\n    sqlRuleActionExpression?: string\r\n  ): Promise<void> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    return this._context.managementClient!.addRule(ruleName, filter, sqlRuleActionExpression);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region sessions\r\n\r\n  // /**\r\n  //  * Lists the ids of the sessions on the ServiceBus Subscription.\r\n  //  * @param maxNumberOfSessions Maximum number of sessions.\r\n  //  * @param lastUpdateTime Filter to include only sessions updated after a given time. Default\r\n  //  * value is 3 days before the current time.\r\n  //  */\r\n  // async listMessageSessions(\r\n  //   maxNumberOfSessions: number,\r\n  //   lastUpdatedTime?: Date\r\n  // ): Promise<string[]> {\r\n  // this.throwErrorIfClientOrConnectionClosed();\r\n  //   return this._context.managementClient!.listMessageSessions(\r\n  //     0,\r\n  //     maxNumberOfSessions,\r\n  //     lastUpdatedTime\r\n  //   );\r\n  // }\r\n\r\n  /**\r\n   * Gets a SessionReceiver for receiving messages in batches or by registering handlers from a\r\n   * session enabled Subscription. When no sessionId is given, a random session among the available\r\n   * sessions is used.\r\n   *\r\n   * @param options Options to provide sessionId and ReceiveMode for receiving messages from the\r\n   * session enabled Servicebus Subscription.\r\n   *\r\n   * @returns SessionReceiver An instance of a SessionReceiver to receive messages from the session.\r\n   */\r\n  async getSessionReceiver(options?: SessionReceiverOptions): Promise<SessionReceiver> {\r\n    this.throwErrorIfClientOrConnectionClosed();\r\n    if (!options) options = {};\r\n    if (options.sessionId) {\r\n      if (\r\n        this._context.messageSessions[options.sessionId] &&\r\n        this._context.messageSessions[options.sessionId].isOpen()\r\n      ) {\r\n        throw new Error(\r\n          `Close the current session receiver for sessionId ${\r\n            options.sessionId\r\n          } before using \"getSessionReceiver\" to create a new one for the same sessionId`\r\n        );\r\n      }\r\n    }\r\n    this._context.isSessionEnabled = true;\r\n    const messageSession = await MessageSession.create(this._context, options);\r\n    if (messageSession.sessionId) {\r\n      delete this._context.expiredMessageSessions[messageSession.sessionId];\r\n    }\r\n    return new SessionReceiver(this._context, messageSession);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  /**\r\n   * Throws error if this subscriptionClient has been closed\r\n   * @param client\r\n   */\r\n  private throwErrorIfClientOrConnectionClosed(): void {\r\n    throwErrorIfConnectionClosed(this._context.namespace);\r\n    if (this._isClosed) {\r\n      throw new Error(\"The subscriptionClient has been closed and can no longer be used.\");\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as log from \"./log\";\r\nimport {\r\n  ApplicationTokenCredentials,\r\n  DeviceTokenCredentials,\r\n  UserTokenCredentials,\r\n  MSITokenCredentials\r\n} from \"ms-rest-azure\";\r\nimport { ConnectionContext } from \"./connectionContext\";\r\nimport { QueueClient } from \"./queueClient\";\r\nimport { TopicClient } from \"./topicClient\";\r\nimport {\r\n  ConnectionConfig,\r\n  DataTransformer,\r\n  TokenProvider,\r\n  AadTokenProvider,\r\n  SasTokenProvider\r\n} from \"@azure/amqp-common\";\r\nimport { SubscriptionClient } from \"./subscriptionClient\";\r\n\r\n/**\r\n * Describes the options that can be provided while creating the Namespace.\r\n * @interface NamespaceOptions\r\n */\r\nexport interface NamespaceOptions {\r\n  /**\r\n   * @property {DataTransformer} [dataTransformer] The data transformer that will be used to encode\r\n   * and decode the sent and received messages respectively. If not provided then we will use the\r\n   * DefaultDataTransformer. The default transformer should handle majority of the cases. This\r\n   * option needs to be used only for specialized scenarios.\r\n   */\r\n  dataTransformer?: DataTransformer;\r\n}\r\n\r\n/**\r\n * Holds the AMQP connection to the Service Bus Namespace and is the entry point for using Queues,\r\n * Topics and Subscriptions.\r\n */\r\nexport class Namespace {\r\n  /**\r\n   * @property {string} name The namespace name of the service bus.\r\n   */\r\n  readonly name: string;\r\n  /**\r\n   * @property {ConnectionContext} _context Describes the amqp connection context for the Namespace.\r\n   * @private\r\n   */\r\n  private _context: ConnectionContext;\r\n\r\n  /**\r\n   * Instantiates a client pointing to the Service Bus Namespace.\r\n   *\r\n   * @constructor\r\n   * @param {ConnectionConfig} config - The connection configuration to create the Namespace.\r\n   * @param {TokenProvider} [tokenProvider] - The token provider that provides the token for\r\n   * authentication.\r\n   * @param {NamespaceOptions} - Options to create the Namespace.\r\n   */\r\n  private constructor(\r\n    config: ConnectionConfig,\r\n    tokenProvider: TokenProvider,\r\n    options?: NamespaceOptions\r\n  ) {\r\n    if (!options) options = {};\r\n    this.name = config.endpoint;\r\n    this._context = ConnectionContext.create(config, tokenProvider, options);\r\n  }\r\n\r\n  /**\r\n   * Creates a QueueClient for the given Queue name. It assumes that the queue has already been\r\n   * created.\r\n   * @param {string} queueName The queue name.\r\n   * @returns QueueClient.\r\n   */\r\n  createQueueClient(queueName: string): QueueClient {\r\n    if (!queueName || typeof queueName !== \"string\") {\r\n      throw new Error(\"'queueName' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    const client = new QueueClient(queueName, this._context);\r\n    this._context.clients[client.id] = client;\r\n    log.ns(\"Created the QueueClient for Queue: %s\", queueName);\r\n    return client;\r\n  }\r\n\r\n  /**\r\n   * Creates a TopicClient for the given topic name. It assumes that the topic has already been\r\n   * created.\r\n   * @param {string} topicName The topic name.\r\n   * @returns TopicClient.\r\n   */\r\n  createTopicClient(topicName: string): TopicClient {\r\n    if (!topicName || typeof topicName !== \"string\") {\r\n      throw new Error(\"'topicName' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    const client = new TopicClient(topicName, this._context);\r\n    this._context.clients[client.id] = client;\r\n    log.ns(\"Created the TopicClient for Topic: %s\", topicName);\r\n    return client;\r\n  }\r\n\r\n  /**\r\n   * Creates a SubscriptionClient for the given topic name and subscription.\r\n   * It assumes that the topic has already been created.\r\n   * @param {string} topicName The topic name.\r\n   * @param {string} subscriptionName The subscription name.\r\n   * @returns SubscriptionClient.\r\n   */\r\n  createSubscriptionClient(topicName: string, subscriptionName: string): SubscriptionClient {\r\n    if (!topicName || typeof topicName !== \"string\") {\r\n      throw new Error(\"'topicName' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    if (!subscriptionName || typeof subscriptionName !== \"string\") {\r\n      throw new Error(\"'subscriptionName' is a required parameter and must be of type 'string'.\");\r\n    }\r\n    const client = new SubscriptionClient(topicName, subscriptionName, this._context);\r\n    this._context.clients[client.id] = client;\r\n    log.ns(\r\n      \"Created the SubscriptionClient for Topic: %s and Subscription: %s\",\r\n      topicName,\r\n      subscriptionName\r\n    );\r\n    return client;\r\n  }\r\n\r\n  /**\r\n   * Closes the AMQP connection created by this namespace along with AMQP links for sender/receivers\r\n   * created by the queue/topic/subscription clients created in this namespace.\r\n   * Once closed,\r\n   * - the namespace cannot be used to create anymore clients for queues/topics/subscriptions\r\n   * - the clients created in this namespace cannot be used to send/receive messages anymore\r\n   * @returns {Promise<any>}\r\n   */\r\n  async close(): Promise<any> {\r\n    try {\r\n      if (this._context.connection.isOpen()) {\r\n        // Close all the senders.\r\n        for (const id of Object.keys(this._context.clients)) {\r\n          const client = this._context.clients[id];\r\n          await client.close();\r\n        }\r\n        await this._context.cbsSession.close();\r\n\r\n        // Close management sessions\r\n        for (const id of Object.keys(this._context.clients)) {\r\n          const client = this._context.clients[id];\r\n          await (client as any)._context.managementClient.close();\r\n        }\r\n\r\n        await this._context.connection.close();\r\n        this._context.wasConnectionCloseCalled = true;\r\n        log.ns(\"Closed the amqp connection '%s' on the client.\", this._context.connectionId);\r\n      }\r\n    } catch (err) {\r\n      const msg =\r\n        `An error occurred while closing the connection ` +\r\n        `\"${this._context.connectionId}\": ${err ? err.stack : JSON.stringify(err)}`;\r\n      log.error(msg);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a Namespace from connection string.\r\n   * @param {string} connectionString - Connection string of the form\r\n   * 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'\r\n   * @param {NamespaceOptions} [options] Options that can be provided during namespace creation.\r\n   * @returns {Namespace} - An instance of the Namespace.\r\n   */\r\n  static createFromConnectionString(\r\n    connectionString: string,\r\n    options?: NamespaceOptions\r\n  ): Namespace {\r\n    if (!connectionString || typeof connectionString !== \"string\") {\r\n      throw new Error(\"'connectionString' is a required parameter and must be of type: 'string'.\");\r\n    }\r\n    const config = ConnectionConfig.create(connectionString);\r\n    ConnectionConfig.validate(config);\r\n    const tokenProvider = new SasTokenProvider(\r\n      config.endpoint,\r\n      config.sharedAccessKeyName,\r\n      config.sharedAccessKey\r\n    );\r\n    return new Namespace(config, tokenProvider, options);\r\n  }\r\n\r\n  /**\r\n   * Creates a Namespace from a generic token provider.\r\n   * @param {string} host - Fully qualified domain name for Servicebus. Most likely,\r\n   * `<yournamespace>.servicebus.windows.net`.\r\n   * @param {TokenProvider} tokenProvider - Your token provider that implements the TokenProvider interface.\r\n   * @param {NamespaceOptions} options - The options that can be provided during namespace creation.\r\n   * @returns {Namespace} An instance of the Namespace.\r\n   */\r\n  static createFromTokenProvider(\r\n    host: string,\r\n    tokenProvider: TokenProvider,\r\n    options?: NamespaceOptions\r\n  ): Namespace {\r\n    if (!host || (host && typeof host !== \"string\")) {\r\n      throw new Error(\"'host' is a required parameter and must be of type: 'string'.\");\r\n    }\r\n    if (!tokenProvider || (tokenProvider && typeof tokenProvider !== \"object\")) {\r\n      throw new Error(\"'tokenProvider' is a required parameter and must be of type: 'object'.\");\r\n    }\r\n    if (!host.endsWith(\"/\")) host += \"/\";\r\n    const connectionString =\r\n      `Endpoint=sb://${host};SharedAccessKeyName=defaultKeyName;` +\r\n      `SharedAccessKey=defaultKeyValue`;\r\n    const config = ConnectionConfig.create(connectionString);\r\n    ConnectionConfig.validate(config);\r\n    return new Namespace(config, tokenProvider, options);\r\n  }\r\n\r\n  /**\r\n   * Creates a Namespace from AADTokenCredentials.\r\n   * @param {string} host - Fully qualified domain name for ServiceBus.\r\n   * Most likely, {yournamespace}.servicebus.windows.net\r\n   * @param {TokenCredentials} credentials - The AAD Token credentials.\r\n   * It can be one of the following: ApplicationTokenCredentials | UserTokenCredentials |\r\n   * DeviceTokenCredentials | MSITokenCredentials.\r\n   * @param {NamespaceOptions} options - The options that can be provided during namespace creation.\r\n   * @returns {Namespace} An instance of the Namespace.\r\n   */\r\n  static createFromAadTokenCredentials(\r\n    host: string,\r\n    credentials:\r\n      | ApplicationTokenCredentials\r\n      | UserTokenCredentials\r\n      | DeviceTokenCredentials\r\n      | MSITokenCredentials,\r\n    options?: NamespaceOptions\r\n  ): Namespace {\r\n    if (!host || typeof host !== \"string\") {\r\n      throw new Error(\"'host' is a required parameter and must be of type: 'string'.\");\r\n    }\r\n\r\n    if (typeof credentials !== \"object\") {\r\n      throw new Error(\r\n        \"'credentials' is a required parameter and must be an instance of \" +\r\n          \"ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | \" +\r\n          \"MSITokenCredentials.\"\r\n      );\r\n    }\r\n    const tokenProvider = new AadTokenProvider(credentials);\r\n    return Namespace.createFromTokenProvider(host, tokenProvider, options);\r\n  }\r\n\r\n  /**\r\n   * Returns the corresponding dead letter queue name for the given queue name.\r\n   * Use this in the `createQueueClient` function to receive messages from dead letter queue.\r\n   * @param queueName\r\n   */\r\n  static getDeadLetterQueuePath(queueName: string): string {\r\n    return `${queueName}/$DeadLetterQueue`;\r\n  }\r\n\r\n  /**\r\n   * Returns the corresponding dead letter topic name for the given topic and subscription names.\r\n   * Use this in the `createSubscriptionClient` function to receive messages from dead letter\r\n   * subscription corresponding to given subscription\r\n   * @param topicName\r\n   * @param subscriptionName\r\n   */\r\n  static getDeadLetterTopicPath(topicName: string, subscriptionName: string): string {\r\n    return `${topicName}/Subscriptions/${subscriptionName}/$DeadLetterQueue`;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/// <reference lib=\"es2015\" />\r\n\r\nexport { Namespace, NamespaceOptions } from \"./namespace\";\r\nexport {\r\n  TokenInfo,\r\n  TokenType,\r\n  TokenProvider,\r\n  DataTransformer,\r\n  delay,\r\n  MessagingError\r\n} from \"@azure/amqp-common\";\r\n\r\nexport { QueueClient } from \"./queueClient\";\r\nexport { TopicClient } from \"./topicClient\";\r\nexport { SubscriptionClient } from \"./subscriptionClient\";\r\n\r\nexport { Sender } from \"./sender\";\r\nexport { Receiver, MessageReceiverOptions, SessionReceiver } from \"./receiver\";\r\n\r\nexport { MessageHandlerOptions } from \"./core/streamingReceiver\";\r\nexport { OnError, OnMessage } from \"./core/messageReceiver\";\r\nexport { SessionReceiverOptions, SessionMessageHandlerOptions } from \"./session/messageSession\";\r\n\r\nexport { SQLExpression, CorrelationFilter, RuleDescription } from \"./core/managementClient\";\r\n\r\nexport {\r\n  ServiceBusMessage,\r\n  ReceivedMessageInfo,\r\n  SendableMessageInfo,\r\n  DeadLetterOptions,\r\n  ReceiveMode\r\n} from \"./serviceBusMessage\";\r\nexport { AmqpError, Delivery } from \"rhea-promise\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n  SendableMessageInfo,\r\n  QueueClient,\r\n  TopicClient,\r\n  Namespace,\r\n  SubscriptionClient,\r\n  delay\r\n} from \"../lib\";\r\nimport * as msRestNodeAuth from \"@azure/ms-rest-nodeauth\";\r\nimport { ServiceBusManagementClient } from \"@azure/arm-servicebus\";\r\nimport { SBQueue, SBTopic, SBSubscription } from \"@azure/arm-servicebus/esm/models\";\r\n\r\nexport class TestMessage {\r\n  static sessionId: string = \"my-session\";\r\n\r\n  static getSample(): SendableMessageInfo {\r\n    const randomNumber = Math.random();\r\n    return {\r\n      body: `message body ${randomNumber}`,\r\n      messageId: `message id ${randomNumber}`,\r\n      partitionKey: \"dummy\"\r\n    };\r\n  }\r\n\r\n  static getSessionSample(): SendableMessageInfo {\r\n    const randomNumber = Math.random();\r\n    return {\r\n      body: `message body ${randomNumber}`,\r\n      messageId: `message id ${randomNumber}`,\r\n      sessionId: TestMessage.sessionId\r\n    };\r\n  }\r\n}\r\n\r\nexport enum ClientType {\r\n  PartitionedQueue,\r\n  PartitionedTopic,\r\n  PartitionedSubscription,\r\n  UnpartitionedQueue,\r\n  UnpartitionedTopic,\r\n  UnpartitionedSubscription,\r\n  PartitionedQueueWithSessions,\r\n  PartitionedTopicWithSessions,\r\n  PartitionedSubscriptionWithSessions,\r\n  UnpartitionedQueueWithSessions,\r\n  UnpartitionedTopicWithSessions,\r\n  UnpartitionedSubscriptionWithSessions,\r\n  TopicFilterTestTopic,\r\n  TopicFilterTestDefaultSubscription,\r\n  TopicFilterTestSubscription\r\n}\r\nconst defaultLockDuration = \"PT30S\"; // 30 seconds in ISO 8601 FORMAT - equivalent to \"P0Y0M0DT0H0M30S\"\r\n\r\nexport function getEnvVars(): { [key: string]: string } {\r\n  if (!process.env.AAD_CLIENT_ID) {\r\n    throw new Error(\"Define AAD_CLIENT_ID in your environment before running integration tests.\");\r\n  }\r\n  if (!process.env.AAD_CLIENT_SECRET) {\r\n    throw new Error(\r\n      \"Define AAD_CLIENT_SECRET in your environment before running integration tests.\"\r\n    );\r\n  }\r\n  if (!process.env.AAD_TENANT_ID) {\r\n    throw new Error(\"Define AAD_TENANT_ID in your environment before running integration tests.\");\r\n  }\r\n  if (!process.env.AZURE_SUBSCRIPTION_ID) {\r\n    throw new Error(\r\n      \"Define AZURE_SUBSCRIPTION_ID in your environment before running integration tests.\"\r\n    );\r\n  }\r\n  if (!process.env.RESOURCE_GROUP) {\r\n    throw new Error(\"Define RESOURCE_GROUP in your environment before running integration tests.\");\r\n  }\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  const servicebusNamespace = (process.env.SERVICEBUS_CONNECTION_STRING.match(\r\n    \"Endpoint=sb://(.*).servicebus.windows.net\"\r\n  ) || \"\")[1];\r\n  return {\r\n    clientId: process.env.AAD_CLIENT_ID,\r\n    clientSecret: process.env.AAD_CLIENT_SECRET,\r\n    tenantId: process.env.AAD_TENANT_ID,\r\n    subscriptionId: process.env.AZURE_SUBSCRIPTION_ID,\r\n    resourceGroup: process.env.RESOURCE_GROUP,\r\n    servicebusNamespace: servicebusNamespace\r\n  };\r\n}\r\n\r\nasync function recreateQueue(queueName: string, parameters: SBQueue): Promise<void> {\r\n  const env = getEnvVars();\r\n  await msRestNodeAuth\r\n    .loginWithServicePrincipalSecret(env.clientId, env.clientSecret, env.tenantId)\r\n    .then(async (creds) => {\r\n      const client = await new ServiceBusManagementClient(creds, env.subscriptionId);\r\n      await client.queues.deleteMethod(\r\n        env.resourceGroup,\r\n        env.servicebusNamespace,\r\n        queueName,\r\n        function(error: any): void {\r\n          if (error) throw error.message;\r\n        }\r\n      );\r\n      await client.queues.createOrUpdate(\r\n        env.resourceGroup,\r\n        env.servicebusNamespace,\r\n        queueName,\r\n        parameters,\r\n        function(error: any): void {\r\n          if (error) throw error.message;\r\n        }\r\n      );\r\n    });\r\n}\r\n\r\nasync function recreateTopic(topicName: string, parameters: SBTopic): Promise<void> {\r\n  const env = getEnvVars();\r\n  await msRestNodeAuth\r\n    .loginWithServicePrincipalSecret(env.clientId, env.clientSecret, env.tenantId)\r\n    .then(async (creds) => {\r\n      const client = await new ServiceBusManagementClient(creds, env.subscriptionId);\r\n      await client.topics.deleteMethod(\r\n        env.resourceGroup,\r\n        env.servicebusNamespace,\r\n        topicName,\r\n        function(error: any): void {\r\n          if (error) throw error.message;\r\n        }\r\n      );\r\n      await client.topics.createOrUpdate(\r\n        env.resourceGroup,\r\n        env.servicebusNamespace,\r\n        topicName,\r\n        parameters,\r\n        function(error: any): void {\r\n          if (error) throw error.message;\r\n        }\r\n      );\r\n    });\r\n}\r\n\r\nasync function recreateSubscription(\r\n  topicName: string,\r\n  subscriptionName: string,\r\n  parameters: SBSubscription\r\n): Promise<void> {\r\n  const env = getEnvVars();\r\n  await msRestNodeAuth\r\n    .loginWithServicePrincipalSecret(env.clientId, env.clientSecret, env.tenantId)\r\n    .then(async (creds) => {\r\n      const client = await new ServiceBusManagementClient(creds, env.subscriptionId);\r\n      /*\r\n        Unlike Queues/Topics, there is no need to delete the subscription because\r\n        `recreateTopic` is called before `recreateSubscription` which would\r\n        delete the topic and the subscriptions before creating a new topic.\r\n      */\r\n      await client.subscriptions.createOrUpdate(\r\n        env.resourceGroup,\r\n        env.servicebusNamespace,\r\n        topicName,\r\n        subscriptionName,\r\n        parameters,\r\n        function(error: any): void {\r\n          if (error) throw error.message;\r\n        }\r\n      );\r\n    });\r\n}\r\n\r\nexport async function getSenderReceiverClients(\r\n  namespace: Namespace,\r\n  senderClientType: ClientType,\r\n  receiverClientType: ClientType\r\n): Promise<{\r\n  senderClient: QueueClient | TopicClient;\r\n  receiverClient: QueueClient | SubscriptionClient;\r\n}> {\r\n  switch (receiverClientType) {\r\n    case ClientType.PartitionedQueue: {\r\n      const queueName = process.env.QUEUE_NAME || \"partitioned-queue\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateQueue(queueName, {\r\n          lockDuration: defaultLockDuration,\r\n          enablePartitioning: true,\r\n          enableBatchedOperations: true\r\n        });\r\n      }\r\n      const queueClient = namespace.createQueueClient(queueName);\r\n      return {\r\n        senderClient: queueClient,\r\n        receiverClient: queueClient\r\n      };\r\n    }\r\n    case ClientType.PartitionedSubscription: {\r\n      const topicName = process.env.TOPIC_NAME || \"partitioned-topic\";\r\n      const subscriptionName = process.env.SUBSCRIPTION_NAME || \"partitioned-topic-subscription\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateTopic(topicName, {\r\n          enablePartitioning: true,\r\n          enableBatchedOperations: true\r\n        });\r\n        await recreateSubscription(topicName, subscriptionName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true\r\n        });\r\n      }\r\n      return {\r\n        senderClient: namespace.createTopicClient(topicName),\r\n        receiverClient: namespace.createSubscriptionClient(topicName, subscriptionName)\r\n      };\r\n    }\r\n    case ClientType.UnpartitionedQueue: {\r\n      const queueName = process.env.QUEUE_NAME_NO_PARTITION || \"unpartitioned-queue\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateQueue(queueName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true\r\n        });\r\n      }\r\n      const queueClient = namespace.createQueueClient(queueName);\r\n      return {\r\n        senderClient: queueClient,\r\n        receiverClient: queueClient\r\n      };\r\n    }\r\n    case ClientType.UnpartitionedSubscription: {\r\n      const topicName = process.env.TOPIC_NAME_NO_PARTITION || \"unpartitioned-topic\";\r\n      const subscriptionName =\r\n        process.env.SUBSCRIPTION_NAME_NO_PARTITION || \"unpartitioned-topic-subscription\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateTopic(topicName, {\r\n          enableBatchedOperations: true\r\n        });\r\n        await recreateSubscription(topicName, subscriptionName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true\r\n        });\r\n      }\r\n      return {\r\n        senderClient: namespace.createTopicClient(topicName),\r\n        receiverClient: namespace.createSubscriptionClient(topicName, subscriptionName)\r\n      };\r\n    }\r\n    case ClientType.PartitionedQueueWithSessions: {\r\n      const queueName = process.env.QUEUE_NAME_SESSION || \"partitioned-queue-sessions\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateQueue(queueName, {\r\n          lockDuration: defaultLockDuration,\r\n          enablePartitioning: true,\r\n          enableBatchedOperations: true,\r\n          requiresSession: true\r\n        });\r\n      }\r\n      const queueClient = namespace.createQueueClient(queueName);\r\n      return {\r\n        senderClient: queueClient,\r\n        receiverClient: queueClient\r\n      };\r\n    }\r\n    case ClientType.PartitionedSubscriptionWithSessions: {\r\n      const topicName = process.env.TOPIC_NAME_SESSION || \"partitioned-topic-sessions\";\r\n      const subscriptionName =\r\n        process.env.SUBSCRIPTION_NAME_SESSION || \"partitioned-topic-sessions-subscription\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateTopic(topicName, {\r\n          enablePartitioning: true,\r\n          enableBatchedOperations: true\r\n        });\r\n        await recreateSubscription(topicName, subscriptionName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true,\r\n          requiresSession: true\r\n        });\r\n      }\r\n      return {\r\n        senderClient: namespace.createTopicClient(topicName),\r\n        receiverClient: namespace.createSubscriptionClient(topicName, subscriptionName)\r\n      };\r\n    }\r\n    case ClientType.UnpartitionedQueueWithSessions: {\r\n      const queueName =\r\n        process.env.QUEUE_NAME_NO_PARTITION_SESSION || \"unpartitioned-queue-sessions\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateQueue(queueName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true,\r\n          requiresSession: true\r\n        });\r\n      }\r\n      const queueClient = namespace.createQueueClient(queueName);\r\n      return {\r\n        senderClient: queueClient,\r\n        receiverClient: queueClient\r\n      };\r\n    }\r\n    case ClientType.UnpartitionedSubscriptionWithSessions: {\r\n      const topicName =\r\n        process.env.TOPIC_NAME_NO_PARTITION_SESSION || \"unpartitioned-topic-sessions\";\r\n      const subscriptionName =\r\n        process.env.SUBSCRIPTION_NAME_NO_PARTITION_SESSION ||\r\n        \"unpartitioned-topic-sessions-subscription\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateTopic(topicName, {\r\n          enableBatchedOperations: true\r\n        });\r\n        await recreateSubscription(topicName, subscriptionName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true,\r\n          requiresSession: true\r\n        });\r\n      }\r\n      return {\r\n        senderClient: namespace.createTopicClient(topicName),\r\n        receiverClient: namespace.createSubscriptionClient(topicName, subscriptionName)\r\n      };\r\n    }\r\n    case ClientType.TopicFilterTestDefaultSubscription: {\r\n      const topicName = process.env.TOPIC_FILTER_NAME || \"topic-filter\";\r\n      const subscriptionName =\r\n        process.env.TOPIC_FILTER_DEFAULT_SUBSCRIPTION_NAME || \"topic-filter-default-subscription\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateTopic(topicName, {\r\n          enableBatchedOperations: true\r\n        });\r\n        await recreateSubscription(topicName, subscriptionName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true\r\n        });\r\n      }\r\n      return {\r\n        senderClient: namespace.createTopicClient(topicName),\r\n        receiverClient: namespace.createSubscriptionClient(topicName, subscriptionName)\r\n      };\r\n    }\r\n    case ClientType.TopicFilterTestSubscription: {\r\n      const topicName = process.env.TOPIC_FILTER_NAME || \"topic-filter\";\r\n      const subscriptionName =\r\n        process.env.TOPIC_FILTER_SUBSCRIPTION_NAME || \"topic-filter-subscription\";\r\n      if (process.env.CLEAN_NAMESPACE) {\r\n        await recreateTopic(topicName, {\r\n          enableBatchedOperations: true\r\n        });\r\n        await recreateSubscription(topicName, subscriptionName, {\r\n          lockDuration: defaultLockDuration,\r\n          enableBatchedOperations: true\r\n        });\r\n      }\r\n      return {\r\n        senderClient: namespace.createTopicClient(topicName),\r\n        receiverClient: namespace.createSubscriptionClient(topicName, subscriptionName)\r\n      };\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n\r\n  throw new Error(\"Cannot create sender/receiver clients for given client types\");\r\n}\r\n\r\n/**\r\n * Purges the content in the Queue/Subscription corresponding to the receiverClient\r\n * @param receiverClient\r\n * @param sessionId if passed, session receiver will be used instead of normal receiver\r\n */\r\nexport async function purge(\r\n  receiverClient: QueueClient | SubscriptionClient,\r\n  sessionId?: string\r\n): Promise<void> {\r\n  let isEmpty = false;\r\n\r\n  while (!isEmpty) {\r\n    const peekedMsgs = await receiverClient.peek(10);\r\n    if (peekedMsgs.length === 0) {\r\n      isEmpty = true;\r\n    } else {\r\n      const receiver = sessionId\r\n        ? await receiverClient.getSessionReceiver({ sessionId: sessionId })\r\n        : receiverClient.getReceiver();\r\n\r\n      const msgs = await receiver.receiveBatch(peekedMsgs.length);\r\n      for (let index = 0; index < msgs.length; index++) {\r\n        if (msgs[index]) {\r\n          await msgs[index].complete();\r\n        }\r\n      }\r\n      await receiver.close();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Maximum wait duration for the expected event to happen = `10000 ms`(default value is 10 seconds)(= maxWaitTimeInMilliseconds)\r\n * Keep checking whether the predicate is true after every `1000 ms`(default value is 1 second) (= delayBetweenRetriesInMilliseconds)\r\n */\r\nexport async function checkWithTimeout(\r\n  predicate: () => boolean,\r\n  delayBetweenRetriesInMilliseconds: number = 1000,\r\n  maxWaitTimeInMilliseconds: number = 10000\r\n): Promise<boolean> {\r\n  const maxTime = Date.now() + maxWaitTimeInMilliseconds;\r\n  while (Date.now() < maxTime) {\r\n    if (predicate()) return true;\r\n    await delay(delayBetweenRetriesInMilliseconds);\r\n  }\r\n  return false;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  ServiceBusMessage,\r\n  delay,\r\n  SendableMessageInfo\r\n} from \"../lib\";\r\n\r\nimport { TestMessage, getSenderReceiverClients, ClientType, purge } from \"./testUtils\";\r\nimport { Receiver, SessionReceiver } from \"../lib/receiver\";\r\nimport { Sender } from \"../lib/sender\";\r\n\r\nasync function testPeekMsgsLength(\r\n  client: QueueClient | SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\n\r\nlet errorWasThrown: boolean;\r\n\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\nlet deadLetterClient: QueueClient | SubscriptionClient;\r\nlet sender: Sender;\r\nlet receiver: Receiver | SessionReceiver;\r\nconst maxDeliveryCount = 10;\r\n\r\nasync function beforeEachTest(\r\n  senderType: ClientType,\r\n  receiverType: ClientType,\r\n  useSessions?: boolean\r\n): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n  if (receiverClient instanceof QueueClient) {\r\n    deadLetterClient = ns.createQueueClient(Namespace.getDeadLetterQueuePath(receiverClient.entityPath));\r\n  }\r\n\r\n  if (receiverClient instanceof SubscriptionClient) {\r\n    deadLetterClient = ns.createSubscriptionClient(\r\n      Namespace.getDeadLetterTopicPath(senderClient.entityPath, receiverClient.subscriptionName),\r\n      receiverClient.subscriptionName\r\n    );\r\n  }\r\n\r\n  await purge(receiverClient, useSessions ? TestMessage.sessionId : undefined);\r\n  await purge(deadLetterClient);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n  const peekedDeadMsgs = await deadLetterClient.peek();\r\n  if (peekedDeadMsgs.length) {\r\n    chai.assert.fail(\r\n      `Please use an empty dead letter ${receiverEntityType} for integration testing`\r\n    );\r\n  }\r\n\r\n  sender = senderClient.getSender();\r\n  receiver = useSessions\r\n    ? await receiverClient.getSessionReceiver({\r\n        sessionId: TestMessage.sessionId\r\n      })\r\n    : receiverClient.getReceiver();\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\ndescribe(\"Batch Receiver - Settle message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function sendReceiveMsg(testMessages: SendableMessageInfo): Promise<ServiceBusMessage> {\r\n    await sender.send(testMessages);\r\n    const msgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(msgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessages.messageId, \"MessageId is different than expected\");\r\n    should.equal(msgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n\r\n    return msgs[0];\r\n  }\r\n\r\n  async function testComplete(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const msg = await sendReceiveMsg(testMessages);\r\n\r\n    await msg.complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testComplete();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testComplete();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testComplete();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testComplete();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testComplete(true);\r\n  });\r\n\r\n  async function testAbandon(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const msg = await sendReceiveMsg(testMessages);\r\n    await msg.abandon();\r\n\r\n    await testPeekMsgsLength(receiverClient, 1);\r\n\r\n    const receivedMsgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await receivedMsgs[0].complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: abandon() retains message with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  async function testAbandonMsgsTillMaxDeliveryCount(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    await sender.send(testMessages);\r\n    let abandonMsgCount = 0;\r\n\r\n    while (abandonMsgCount < maxDeliveryCount) {\r\n      const receivedMsgs = await receiver.receiveBatch(1);\r\n\r\n      should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n      should.equal(\r\n        receivedMsgs[0].messageId,\r\n        testMessages.messageId,\r\n        \"MessageId is different than expected\"\r\n      );\r\n      should.equal(\r\n        receivedMsgs[0].deliveryCount,\r\n        abandonMsgCount,\r\n        \"DeliveryCount is different than expected\"\r\n      );\r\n      abandonMsgCount++;\r\n\r\n      await receivedMsgs[0].abandon();\r\n    }\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    const deadLetterMsgs = await deadLetterClient.getReceiver().receiveBatch(1);\r\n\r\n    should.equal(\r\n      Array.isArray(deadLetterMsgs),\r\n      true,\r\n      \"`ReceivedMessages` from Deadletter is not an array\"\r\n    );\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].body,\r\n      testMessages.body,\r\n      \"MessageBody is different than expected\"\r\n    );\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await deadLetterMsgs[0].complete();\r\n\r\n    await testPeekMsgsLength(deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testAbandonMsgsTillMaxDeliveryCount();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testAbandonMsgsTillMaxDeliveryCount();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testAbandonMsgsTillMaxDeliveryCount();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testAbandonMsgsTillMaxDeliveryCount();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testAbandonMsgsTillMaxDeliveryCount(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testAbandonMsgsTillMaxDeliveryCount(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testAbandonMsgsTillMaxDeliveryCount(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: Multiple abandons until maxDeliveryCount.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testAbandonMsgsTillMaxDeliveryCount(true);\r\n  });\r\n\r\n  async function testDefer(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const msg = await sendReceiveMsg(testMessages);\r\n\r\n    if (!msg.sequenceNumber) {\r\n      throw \"Sequence Number can not be null\";\r\n    }\r\n    const sequenceNumber = msg.sequenceNumber;\r\n    await msg.defer();\r\n\r\n    const deferredMsgs = await receiver.receiveDeferredMessage(sequenceNumber);\r\n    if (!deferredMsgs) {\r\n      throw \"No message received for sequence number\";\r\n    }\r\n    should.equal(deferredMsgs.body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      deferredMsgs.messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(deferredMsgs.deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n\r\n    await deferredMsgs.complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: defer() moves message to deferred queue\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  async function testDeadletter(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const msg = await sendReceiveMsg(testMessages);\r\n    await msg.deadLetter();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    const deadLetterMsgs = await deadLetterClient.getReceiver().receiveBatch(1);\r\n\r\n    should.equal(\r\n      Array.isArray(deadLetterMsgs),\r\n      true,\r\n      \"`ReceivedMessages` from Deadletter is not an array\"\r\n    );\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].body,\r\n      testMessages.body,\r\n      \"MessageBody is different than expected\"\r\n    );\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await deadLetterMsgs[0].complete();\r\n\r\n    await testPeekMsgsLength(deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Batch Receiver - Settle deadlettered message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function deadLetterMessage(testMessage: SendableMessageInfo): Promise<ServiceBusMessage> {\r\n    await sender.send(testMessage);\r\n    const receivedMsgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(receivedMsgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n\r\n    await receivedMsgs[0].deadLetter();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    const deadLetterMsgs = await deadLetterClient.getReceiver().receiveBatch(1);\r\n\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].body,\r\n      testMessage.body,\r\n      \"MessageBody is different than expected\"\r\n    );\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(deadLetterMsgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n\r\n    return deadLetterMsgs[0];\r\n  }\r\n\r\n  async function completeDeadLetteredMessage(\r\n    testMessage: SendableMessageInfo,\r\n    deadletterClient: QueueClient | SubscriptionClient,\r\n    expectedDeliverCount: number\r\n  ): Promise<void> {\r\n    const deadLetterMsgs = await deadletterClient.getReceiver().receiveBatch(1);\r\n\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].body,\r\n      testMessage.body,\r\n      \"MessageBody is different than expected\"\r\n    );\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(\r\n      deadLetterMsgs[0].deliveryCount,\r\n      expectedDeliverCount,\r\n      \"DeliveryCount is different than expected\"\r\n    );\r\n\r\n    await deadLetterMsgs[0].complete();\r\n    await testPeekMsgsLength(deadletterClient, 0);\r\n  }\r\n\r\n  async function testDeadletter(testMessage: SendableMessageInfo): Promise<void> {\r\n    const deadLetterMsg = await deadLetterMessage(testMessage);\r\n\r\n    await deadLetterMsg.deadLetter().catch((err) => {\r\n      should.equal(err.name, \"InvalidOperationError\", \"ErrorName is different than expected\");\r\n      errorWasThrown = true;\r\n    });\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n\r\n    await completeDeadLetteredMessage(testMessage, deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Throws error when dead lettering a dead lettered message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDeadletter(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Throws error when dead lettering a dead lettered message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDeadletter(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Throws error when dead lettering a dead lettered message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDeadletter(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Throws error when dead lettering a dead lettered message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDeadletter(TestMessage.getSample());\r\n  });\r\n\r\n  async function testAbandon(testMessage: SendableMessageInfo): Promise<void> {\r\n    const deadLetterMsg = await deadLetterMessage(testMessage);\r\n\r\n    await deadLetterMsg.abandon();\r\n\r\n    await completeDeadLetteredMessage(testMessage, deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Abandon a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testAbandon(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Abandon a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testAbandon(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Abandon a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testAbandon(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Abandon a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testAbandon(TestMessage.getSample());\r\n  });\r\n\r\n  async function testDefer(testMessage: SendableMessageInfo): Promise<void> {\r\n    const deadLetterMsg = await deadLetterMessage(testMessage);\r\n\r\n    if (!deadLetterMsg.sequenceNumber) {\r\n      throw \"Sequence Number can not be null\";\r\n    }\r\n\r\n    const sequenceNumber = deadLetterMsg.sequenceNumber;\r\n    await deadLetterMsg.defer();\r\n\r\n    const deferredMsgs = await deadLetterClient\r\n      .getReceiver()\r\n      .receiveDeferredMessage(sequenceNumber);\r\n    if (!deferredMsgs) {\r\n      throw \"No message received for sequence number\";\r\n    }\r\n    should.equal(deferredMsgs.body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      deferredMsgs.messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await deferredMsgs.complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    await testPeekMsgsLength(deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Defer a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDefer(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Defer a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDefer(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Defer a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDefer(TestMessage.getSample());\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Defer a message received from dead letter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDefer(TestMessage.getSample());\r\n  });\r\n});\r\n\r\ndescribe(\"Batch Receiver - Multiple ReceiveBatch calls\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  // We use an empty queue/topic here so that the first receiveBatch call takes time to return\r\n  async function testParallelReceiveBatchCalls(): Promise<void> {\r\n    const firstBatchPromise = receiver.receiveBatch(1, 10);\r\n    await delay(5000);\r\n    const secondBatchPromise = receiver.receiveBatch(1, 10).catch((err) => {\r\n      should.equal(err.name, \"Error\", \"Error name is different than expected\");\r\n      errorWasThrown = true;\r\n    });\r\n    await Promise.all([firstBatchPromise, secondBatchPromise]);\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: Throws error when ReceiveBatch is called while the previous call is not done\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testParallelReceiveBatchCalls();\r\n  });\r\n\r\n  const messages: SendableMessageInfo[] = [\r\n    {\r\n      body: \"hello1\",\r\n      messageId: `test message ${Math.random()}`,\r\n      partitionKey: \"dummy\" // partitionKey is only for partitioned queue/subscrption, Unpartitioned queue/subscrption do not care about partitionKey.\r\n    },\r\n    {\r\n      body: \"hello2\",\r\n      messageId: `test message ${Math.random()}`,\r\n      partitionKey: \"dummy\" // partitionKey is only for partitioned queue/subscrption, Unpartitioned queue/subscrption do not care about partitionKey.\r\n    }\r\n  ];\r\n  const messageWithSessions: SendableMessageInfo[] = [\r\n    {\r\n      body: \"hello1\",\r\n      messageId: `test message ${Math.random()}`,\r\n      sessionId: TestMessage.sessionId\r\n    },\r\n    {\r\n      body: \"hello2\",\r\n      messageId: `test message ${Math.random()}`,\r\n      sessionId: TestMessage.sessionId\r\n    }\r\n  ];\r\n\r\n  // We test for mutilple receiveBatch specifically to ensure that batchingRecevier on a client is reused\r\n  // See https://github.com/Azure/azure-service-bus-node/issues/31\r\n  async function testSequentialReceiveBatchCalls(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? messageWithSessions : messages;\r\n    await sender.sendBatch(testMessages);\r\n    const msgs1 = await receiver.receiveBatch(1);\r\n    const msgs2 = await receiver.receiveBatch(1);\r\n\r\n    // Results are checked after both receiveBatches are done to ensure that the second call doesnt\r\n    // affect the result from the first one.\r\n    should.equal(Array.isArray(msgs1), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs1.length, 1, \"Unexpected number of messages\");\r\n\r\n    should.equal(Array.isArray(msgs2), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs2.length, 1, \"Unexpected number of messages\");\r\n\r\n    should.equal(\r\n      testMessages.some((x) => x.messageId === msgs1[0].messageId),\r\n      true,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(\r\n      testMessages.some((x) => x.messageId === msgs2[0].messageId),\r\n      true,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await msgs1[0].complete();\r\n    await msgs2[0].complete();\r\n  }\r\n\r\n  it(\"Partitioned Queue: Multiple sequential receiveBatch calls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSequentialReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Multiple sequential receiveBatch calls\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSequentialReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Multiple sequential receiveBatch calls\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSequentialReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Multiple sequential receiveBatch calls\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSequentialReceiveBatchCalls();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Multiple sequential receiveBatch calls\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSequentialReceiveBatchCalls(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: Multiple sequential receiveBatch calls\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSequentialReceiveBatchCalls(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Multiple sequential receiveBatch calls\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSequentialReceiveBatchCalls(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: Multiple sequential receiveBatch calls\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSequentialReceiveBatchCalls(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Batch Receiver - Others\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testNoSettlement(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    await sender.send(testMessages);\r\n\r\n    let receivedMsgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await testPeekMsgsLength(receiverClient, 1);\r\n\r\n    receivedMsgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await receivedMsgs[0].complete();\r\n  }\r\n\r\n  it(\"Partitioned Queue: No settlement of the message is retained with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testNoSettlement();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: No settlement of the message is retained with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testNoSettlement();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: No settlement of the message is retained with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testNoSettlement();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: No settlement of the message is retained with incremented deliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testNoSettlement();\r\n  });\r\n\r\n  async function testAskForMore(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    await sender.send(testMessages);\r\n    const receivedMsgs = await receiver.receiveBatch(2);\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await receivedMsgs[0].complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Receive n messages but queue only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n\r\n    await testAskForMore();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Receive n messages but subscription only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n\r\n    await testAskForMore();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Receive n messages but queue only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n\r\n    await testAskForMore();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Receive n messages but subscription only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n\r\n    await testAskForMore();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Receive n messages but queue only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testAskForMore(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: Receive n messages but subscription only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testAskForMore(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Receive n messages but queue only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testAskForMore(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: Receive n messages but subscription only has m messages, where m < n\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testAskForMore(true);\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  ServiceBusMessage,\r\n  SendableMessageInfo\r\n} from \"../lib\";\r\n\r\nimport { TestMessage, getSenderReceiverClients, ClientType, purge } from \"./testUtils\";\r\nimport { Receiver, SessionReceiver } from \"../lib/receiver\";\r\nimport { Sender } from \"../lib/sender\";\r\n\r\nasync function testPeekMsgsLength(\r\n  client: QueueClient | SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\n\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\nlet deadLetterClient: QueueClient | SubscriptionClient;\r\nlet sender: Sender;\r\nlet receiver: Receiver | SessionReceiver;\r\n\r\nasync function beforeEachTest(\r\n  senderType: ClientType,\r\n  receiverType: ClientType,\r\n  useSessions?: boolean\r\n): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  if (receiverClient instanceof QueueClient) {\r\n    deadLetterClient = ns.createQueueClient(Namespace.getDeadLetterQueuePath(receiverClient.entityPath));\r\n  }\r\n\r\n  if (receiverClient instanceof SubscriptionClient) {\r\n    deadLetterClient = ns.createSubscriptionClient(\r\n      Namespace.getDeadLetterTopicPath(senderClient.entityPath, receiverClient.subscriptionName),\r\n      receiverClient.subscriptionName\r\n    );\r\n  }\r\n\r\n  await purge(receiverClient, useSessions ? TestMessage.sessionId : undefined);\r\n  await purge(deadLetterClient);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n  const peekedDeadMsgs = await deadLetterClient.peek();\r\n  if (peekedDeadMsgs.length) {\r\n    chai.assert.fail(\r\n      `Please use an empty dead letter ${receiverEntityType} for integration testing`\r\n    );\r\n  }\r\n\r\n  sender = senderClient.getSender();\r\n  receiver = useSessions\r\n    ? await receiverClient.getSessionReceiver({\r\n        sessionId: TestMessage.sessionId\r\n      })\r\n    : receiverClient.getReceiver();\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\nasync function deferMessage(testMessages: SendableMessageInfo): Promise<ServiceBusMessage> {\r\n  await sender.send(testMessages);\r\n  const receivedMsgs = await receiver.receiveBatch(1);\r\n\r\n  should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n  should.equal(receivedMsgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n  should.equal(receivedMsgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n  should.equal(\r\n    receivedMsgs[0].messageId,\r\n    testMessages.messageId,\r\n    \"MessageId is different than expected\"\r\n  );\r\n\r\n  if (!receivedMsgs[0].sequenceNumber) {\r\n    throw \"Sequence Number can not be null\";\r\n  }\r\n  const sequenceNumber = receivedMsgs[0].sequenceNumber;\r\n  await receivedMsgs[0].defer();\r\n\r\n  const deferredMsgs = await receiver.receiveDeferredMessage(sequenceNumber);\r\n  if (!deferredMsgs) {\r\n    throw \"No message received for sequence number\";\r\n  }\r\n  should.equal(deferredMsgs.body, testMessages.body, \"MessageBody is different than expected\");\r\n  should.equal(\r\n    deferredMsgs.messageId,\r\n    testMessages.messageId,\r\n    \"MessageId is different than expected\"\r\n  );\r\n  should.equal(deferredMsgs.deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n\r\n  return deferredMsgs;\r\n}\r\n\r\nasync function completeDeferredMessage(\r\n  sequenceNumber: Long,\r\n  expectedDeliverCount: number,\r\n  testMessages: SendableMessageInfo,\r\n  useSessions?: boolean\r\n): Promise<void> {\r\n  await testPeekMsgsLength(receiverClient, 1);\r\n\r\n  const deferredMsg = await receiver.receiveDeferredMessage(sequenceNumber);\r\n  if (!deferredMsg) {\r\n    throw \"No message received for sequence number\";\r\n  }\r\n\r\n  should.equal(deferredMsg.body, testMessages.body, \"MessageBody is different than expected\");\r\n  should.equal(\r\n    deferredMsg.deliveryCount,\r\n    expectedDeliverCount,\r\n    \"DeliveryCount is different than expected\"\r\n  );\r\n  should.equal(\r\n    deferredMsg.messageId,\r\n    testMessages.messageId,\r\n    \"MessageId is different than expected\"\r\n  );\r\n\r\n  await deferredMsg.complete();\r\n\r\n  await testPeekMsgsLength(receiverClient, 0);\r\n}\r\n\r\ndescribe(\"Abandon/Defer/Deadletter deferred message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testAbandon(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const deferredMsg = await deferMessage(testMessages);\r\n    const sequenceNumber = deferredMsg.sequenceNumber;\r\n    if (!sequenceNumber) {\r\n      throw \"Sequence Number can not be null\";\r\n    }\r\n    await deferredMsg.abandon();\r\n    await completeDeferredMessage(sequenceNumber, 2, testMessages);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testAbandon();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions:: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions:: Abandoning a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  async function testDefer(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const deferredMsg = await deferMessage(testMessages);\r\n    const sequenceNumber = deferredMsg.sequenceNumber;\r\n    if (!sequenceNumber) {\r\n      throw \"Sequence Number can not be null\";\r\n    }\r\n    await deferredMsg.defer();\r\n    await completeDeferredMessage(sequenceNumber, 2, testMessages);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDefer();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: Deferring a deferred message puts it back to the deferred queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  async function testDeadletter(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const deferredMsg = await deferMessage(testMessages);\r\n\r\n    await deferredMsg.deadLetter();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    const deadLetterMsgs = await deadLetterClient.getReceiver().receiveBatch(1);\r\n\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].body,\r\n      testMessages.body,\r\n      \"MessageBody is different than expected\"\r\n    );\r\n    should.equal(deadLetterMsgs[0].deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await deadLetterMsgs[0].complete();\r\n\r\n    await testPeekMsgsLength(deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDeadletter();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: Deadlettering a deferred message moves it to dead letter queue.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport { ApplicationTokenCredentials, loginWithServicePrincipalSecret } from \"ms-rest-azure\";\r\nconst aadServiceBusAudience = \"https://servicebus.azure.net/\";\r\nimport {\r\n  Namespace,\r\n  delay,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  Sender,\r\n  Receiver,\r\n  SessionReceiver\r\n} from \"../lib\";\r\nimport { getSenderReceiverClients, ClientType, TestMessage, purge, getEnvVars } from \"./testUtils\";\r\nimport long from \"long\";\r\n\r\nfunction testFalsyValues(testFn: Function): void {\r\n  [undefined, \"\", 0].forEach(function(value: string | number | undefined): void {\r\n    testFn(value);\r\n  });\r\n}\r\n\r\ndescribe(\"Create Namespace\", function(): void {\r\n  it(\"throws error when there is no connection string\", function(): void {\r\n    testFalsyValues(function(value: any): void {\r\n      const test = function(): void {\r\n        Namespace.createFromConnectionString(value);\r\n      };\r\n      test.should.throw(\r\n        Error,\r\n        \"'connectionString' is a required parameter and must be of type: 'string'.\"\r\n      );\r\n    });\r\n  });\r\n\r\n  it(\"creates an Namespace from a connection string\", function(): void {\r\n    const namespace = Namespace.createFromConnectionString(\r\n      \"Endpoint=sb://a;SharedAccessKeyName=b;SharedAccessKey=c;EntityPath=d\"\r\n    );\r\n    namespace.should.be.an.instanceof(Namespace);\r\n    should.equal(namespace.name, \"sb://a/\", \"Name of the namespace is different than expected\");\r\n  });\r\n});\r\n\r\ndescribe(\"Clients with no name\", function(): void {\r\n  let namespace: Namespace;\r\n  beforeEach(() => {\r\n    namespace = Namespace.createFromConnectionString(\r\n      \"Endpoint=sb://a;SharedAccessKeyName=b;SharedAccessKey=c;EntityPath=d\"\r\n    );\r\n  });\r\n  afterEach(() => {\r\n    return namespace.close();\r\n  });\r\n\r\n  it(\"throws error when creating queue client with no name\", function(): void {\r\n    testFalsyValues(function(value: any): void {\r\n      const test = function(): void {\r\n        namespace.createQueueClient(value);\r\n      };\r\n      test.should.throw(Error, \"'queueName' is a required parameter and must be of type 'string'.\");\r\n    });\r\n  });\r\n\r\n  it(\"throws error when creating topic client with no name\", function(): void {\r\n    testFalsyValues(function(value: any): void {\r\n      const test = function(): void {\r\n        namespace.createTopicClient(value);\r\n      };\r\n      test.should.throw(Error, \"'topicName' is a required parameter and must be of type 'string'.\");\r\n    });\r\n  });\r\n\r\n  it(\"throws error when creating subscription client with no topic name\", function(): void {\r\n    testFalsyValues(function(value: any): void {\r\n      const test = function(): void {\r\n        namespace.createSubscriptionClient(value, \"some-name\");\r\n      };\r\n      test.should.throw(Error, \"'topicName' is a required parameter and must be of type 'string'.\");\r\n    });\r\n  });\r\n\r\n  it(\"throws error when creating subscription client with no subscription name\", function(): void {\r\n    testFalsyValues(function(value: any): void {\r\n      const test = function(): void {\r\n        namespace.createSubscriptionClient(\"some-name\", value);\r\n      };\r\n      test.should.throw(\r\n        Error,\r\n        \"'subscriptionName' is a required parameter and must be of type 'string'.\"\r\n      );\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Errors with non existing Namespace\", function(): void {\r\n  let namespace: Namespace;\r\n  let errorWasThrown: boolean;\r\n  beforeEach(() => {\r\n    namespace = Namespace.createFromConnectionString(\r\n      \"Endpoint=sb://a;SharedAccessKeyName=b;SharedAccessKey=c;EntityPath=d\"\r\n    );\r\n    errorWasThrown = false;\r\n  });\r\n  afterEach(() => {\r\n    return namespace.close();\r\n  });\r\n\r\n  const testError = (err: Error) => {\r\n    should.equal(err.name, \"ServiceCommunicationError\", \"ErrorName is different than expected\");\r\n    should.equal(\r\n      err.message,\r\n      \"getaddrinfo ENOTFOUND a a:5671\",\r\n      \"ErrorMessage is different than expected\"\r\n    );\r\n    errorWasThrown = true;\r\n  };\r\n\r\n  it(\"throws error when sending data via a queueClient to a non existing namespace\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch(testError);\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when sending data via a topicClient to a non existing namespace\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createTopicClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch(testError);\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when sending batch data via a queueClient to a non existing namespace\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch(testError);\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when sending batch data via a topicClient to a non existing namespace\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createTopicClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch(testError);\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when receving batch data via a queueClient from a non existing namespace\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    await client\r\n      .getReceiver()\r\n      .receiveBatch(10)\r\n      .catch(testError);\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when receving batch data via a subscriptionClient from a non existing namespace\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createSubscriptionClient(\"some-topic-name\", \"some-subscription-name\");\r\n    await client\r\n      .getReceiver()\r\n      .receiveBatch(10)\r\n      .catch(testError);\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when receving streaming data via a queueClient from a non existing namespace\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    const onMessage = async () => {\r\n      throw \"onMessage should not have been called when receive call is made from a non existing namespace\";\r\n    };\r\n\r\n    client.getReceiver().receive(onMessage, testError);\r\n\r\n    await delay(3000);\r\n    await client.close();\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n});\r\n\r\ndescribe(\"Errors with non existing Queue/Topic/Subscription\", async function(): Promise<void> {\r\n  let namespace: Namespace;\r\n  let errorWasThrown: boolean;\r\n  beforeEach(() => {\r\n    if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n      throw \"define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\";\r\n    }\r\n    namespace = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n    errorWasThrown = false;\r\n  });\r\n  afterEach(() => {\r\n    return namespace.close();\r\n  });\r\n\r\n  const testError = (err: Error, entityPath: string) => {\r\n    should.equal(err.name, \"MessagingEntityNotFoundError\", \"ErrorName is different than expected\");\r\n    should.equal(\r\n      err.message.startsWith(\r\n        `The messaging entity '${namespace.name}${entityPath}' could not be found.`\r\n      ),\r\n      true\r\n    );\r\n    errorWasThrown = true;\r\n  };\r\n\r\n  it(\"throws error when sending data to a non existing queue\", async function(): Promise<void> {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch((err) => testError(err, \"some-name\"));\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when sending data to a non existing topic\", async function(): Promise<void> {\r\n    const client = namespace.createTopicClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch((err) => testError(err, \"some-name\"));\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when sending batch data to a non existing queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch((err) => testError(err, \"some-name\"));\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when sending batch data to a non existing topic\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createTopicClient(\"some-name\");\r\n    await client\r\n      .getSender()\r\n      .send({ body: \"hello\" })\r\n      .catch((err) => testError(err, \"some-name\"));\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when receiving batch data from a non existing queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    await client\r\n      .getReceiver()\r\n      .receiveBatch(1)\r\n      .catch((err) => testError(err, \"some-name\"));\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when receiving batch data from a non existing subscription\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createSubscriptionClient(\"some-topic-name\", \"some-subscription-name\");\r\n    await client\r\n      .getReceiver()\r\n      .receiveBatch(1)\r\n      .catch((err) => testError(err, \"some-topic-name/Subscriptions/some-subscription-name\"));\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when receving streaming data from a non existing queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createQueueClient(\"some-name\");\r\n    const onMessage = async () => {\r\n      throw \"onMessage should not have been called when receive call is made from a non existing namespace\";\r\n    };\r\n    client.getReceiver().receive(onMessage, (err) => testError(err, \"some-name\"));\r\n\r\n    await delay(3000);\r\n    await client.close();\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error when receving streaming data from a non existing subscription\", async function(): Promise<\r\n    void\r\n  > {\r\n    const client = namespace.createSubscriptionClient(\"some-topic-name\", \"some-subscription-name\");\r\n    const onMessage = async () => {\r\n      throw \"onMessage should not have been called when receive call is made from a non existing namespace\";\r\n    };\r\n    client\r\n      .getReceiver()\r\n      .receive(onMessage, (err) =>\r\n        testError(err, \"some-topic-name/Subscriptions/some-subscription-name\")\r\n      );\r\n\r\n    await delay(3000);\r\n    await client.close();\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n});\r\n\r\ndescribe(\"Test createFromAadTokenCredentials\", function(): void {\r\n  let namespace: Namespace;\r\n  let tokenCreds: ApplicationTokenCredentials;\r\n  let errorWasThrown: boolean = false;\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n  const serviceBusEndpoint = (process.env.SERVICEBUS_CONNECTION_STRING.match(\r\n    \"Endpoint=sb://((.*).servicebus.windows.net)\"\r\n  ) || \"\")[1];\r\n\r\n  async function testCreateFromAadTokenCredentials(host: string, tokenCreds: any): Promise<void> {\r\n    const testMessages = TestMessage.getSample();\r\n    namespace = Namespace.createFromAadTokenCredentials(host, tokenCreds);\r\n    namespace.should.be.an.instanceof(Namespace);\r\n    const clients = await getSenderReceiverClients(\r\n      namespace,\r\n      ClientType.UnpartitionedQueue,\r\n      ClientType.UnpartitionedQueue\r\n    );\r\n\r\n    const sender = clients.senderClient.getSender();\r\n    const receiver = clients.receiverClient.getReceiver();\r\n    await sender.send(testMessages);\r\n    const msgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n  }\r\n\r\n  it(\"throws error for an invalid host\", async function(): Promise<void> {\r\n    const env = getEnvVars();\r\n    tokenCreds = await loginWithServicePrincipalSecret(\r\n      env.clientId,\r\n      env.clientSecret,\r\n      env.tenantId,\r\n      {\r\n        tokenAudience: aadServiceBusAudience\r\n      }\r\n    );\r\n    await testCreateFromAadTokenCredentials(\"\", tokenCreds).catch((err) => {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        err.message,\r\n        \"'host' is a required parameter and must be of type: 'string'.\",\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n    });\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"throws error for invalid tokenCredentials\", async function(): Promise<void> {\r\n    await testCreateFromAadTokenCredentials(serviceBusEndpoint, \"\").catch((err) => {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        err.message,\r\n        \"'credentials' is a required parameter and must be an instance of ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.\",\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n    });\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"sends a message to the ServiceBus entity\", async function(): Promise<void> {\r\n    const env = getEnvVars();\r\n    tokenCreds = await loginWithServicePrincipalSecret(\r\n      env.clientId,\r\n      env.clientSecret,\r\n      env.tenantId,\r\n      {\r\n        tokenAudience: aadServiceBusAudience\r\n      }\r\n    );\r\n    await testCreateFromAadTokenCredentials(serviceBusEndpoint, tokenCreds);\r\n    await namespace.close();\r\n  });\r\n});\r\n\r\ndescribe(\"Errors after close()\", function(): void {\r\n  let namespace: Namespace;\r\n  let senderClient: QueueClient | TopicClient;\r\n  let receiverClient: QueueClient | SubscriptionClient;\r\n  let sender: Sender;\r\n  let receiver: Receiver | SessionReceiver;\r\n\r\n  afterEach(() => {\r\n    return namespace.close();\r\n  });\r\n\r\n  async function beforeEachTest(\r\n    senderType: ClientType,\r\n    receiverType: ClientType,\r\n    entityToClose: string,\r\n    useSessions?: boolean\r\n  ): Promise<void> {\r\n    if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n      throw new Error(\r\n        \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n      );\r\n    }\r\n\r\n    namespace = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n    const clients = await getSenderReceiverClients(namespace, senderType, receiverType);\r\n    senderClient = clients.senderClient;\r\n    receiverClient = clients.receiverClient;\r\n\r\n    await purge(receiverClient, useSessions ? TestMessage.sessionId : undefined);\r\n    const peekedMsgs = await receiverClient.peek();\r\n    const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n    if (peekedMsgs.length) {\r\n      chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n    }\r\n\r\n    sender = senderClient.getSender();\r\n    receiver = useSessions\r\n      ? await receiverClient.getSessionReceiver({\r\n          sessionId: TestMessage.sessionId\r\n        })\r\n      : receiverClient.getReceiver();\r\n\r\n    // Normal send/receive\r\n    const testMessage = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n    const receivedMsgs = await receiver.receiveBatch(1, 3);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages received\");\r\n    await receivedMsgs[0].complete();\r\n\r\n    // close(), so that we can then test the resulting error.\r\n    switch (entityToClose) {\r\n      case \"namespace\":\r\n        await namespace.close();\r\n        break;\r\n      case \"senderClient\":\r\n        await senderClient.close();\r\n        break;\r\n      case \"receiverClient\":\r\n        await receiverClient.close();\r\n        break;\r\n      case \"sender\":\r\n        await sender.close();\r\n        break;\r\n      case \"receiver\":\r\n        await receiver.close();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests that each feature of the sender throws expected error\r\n   */\r\n  async function testSender(expectedErrorMsg: string): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    let errorSend: string = \"\";\r\n    await sender.send(testMessage).catch((err) => {\r\n      errorSend = err.message;\r\n    });\r\n    should.equal(errorSend, expectedErrorMsg, \"Expected error not thrown for send()\");\r\n\r\n    let errorSendBatch: string = \"\";\r\n    await sender.sendBatch([testMessage]).catch((err) => {\r\n      errorSendBatch = err.message;\r\n    });\r\n    should.equal(errorSendBatch, expectedErrorMsg, \"Expected error not thrown for sendBatch()\");\r\n\r\n    let errorScheduleMsg: string = \"\";\r\n    await sender.scheduleMessage(new Date(Date.now() + 30000), testMessage).catch((err) => {\r\n      errorScheduleMsg = err.message;\r\n    });\r\n    should.equal(\r\n      errorScheduleMsg,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for scheduleMessage()\"\r\n    );\r\n\r\n    let errorScheduleMsgs: string = \"\";\r\n    await sender.scheduleMessages(new Date(Date.now() + 30000), [testMessage]).catch((err) => {\r\n      errorScheduleMsgs = err.message;\r\n    });\r\n    should.equal(\r\n      errorScheduleMsgs,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for scheduleMessages()\"\r\n    );\r\n\r\n    let errorCancelMsg: string = \"\";\r\n    await sender.cancelScheduledMessage(long.ZERO).catch((err) => {\r\n      errorCancelMsg = err.message;\r\n    });\r\n    should.equal(\r\n      errorCancelMsg,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for cancelScheduledMessage()\"\r\n    );\r\n\r\n    let errorCancelMsgs: string = \"\";\r\n    await sender.cancelScheduledMessages([long.ZERO]).catch((err) => {\r\n      errorCancelMsgs = err.message;\r\n    });\r\n    should.equal(\r\n      errorCancelMsgs,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for cancelScheduledMessages()\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tests that each feature of the senderClient throws expected error\r\n   */\r\n  async function testSenderClient(expectedErrorMsg: string): Promise<void> {\r\n    let errorNewSender: string = \"\";\r\n    try {\r\n      senderClient.getSender();\r\n    } catch (err) {\r\n      errorNewSender = err.message;\r\n    }\r\n    should.equal(errorNewSender, expectedErrorMsg, \"Expected error not thrown for getSender()\");\r\n  }\r\n\r\n  /**\r\n   * Tests that each feature of the receiver throws expected error\r\n   */\r\n  async function testReceiver(expectedErrorMsg: string, useSessions?: boolean): Promise<void> {\r\n    let errorReceiveBatch: string = \"\";\r\n    await receiver.receiveBatch(1, 1).catch((err) => {\r\n      errorReceiveBatch = err.message;\r\n    });\r\n    should.equal(\r\n      errorReceiveBatch,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for receiveBatch()\"\r\n    );\r\n\r\n    let errorReceiveStream: string = \"\";\r\n    try {\r\n      receiver.receive(() => Promise.resolve(), (e) => console.log(e));\r\n    } catch (err) {\r\n      errorReceiveStream = err.message;\r\n    }\r\n    should.equal(errorReceiveStream, expectedErrorMsg, \"Expected error not thrown for receive()\");\r\n\r\n    let errorDeferredMsg: string = \"\";\r\n    await receiver.receiveDeferredMessage(long.ZERO).catch((err) => {\r\n      errorDeferredMsg = err.message;\r\n    });\r\n    should.equal(\r\n      errorDeferredMsg,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for receiveDeferredMessage()\"\r\n    );\r\n\r\n    let errorDeferredMsgs: string = \"\";\r\n    await receiver.receiveDeferredMessage(long.ZERO).catch((err) => {\r\n      errorDeferredMsgs = err.message;\r\n    });\r\n    should.equal(\r\n      errorDeferredMsgs,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for receiveDeferredMessages()\"\r\n    );\r\n\r\n    let errorRenewLock: string = \"\";\r\n    await receiver.renewLock(\"randomLockToken\").catch((err) => {\r\n      errorRenewLock = err.message;\r\n    });\r\n    should.equal(errorRenewLock, expectedErrorMsg, \"Expected error not thrown for renewLock()\");\r\n  }\r\n\r\n  /**\r\n   * Tests that each feature of the receiverClient throws expected error\r\n   */\r\n  async function testReceiverClient(\r\n    expectedErrorMsg: string,\r\n    useSessions?: boolean\r\n  ): Promise<void> {\r\n    let errorNewReceiver: string = \"\";\r\n    try {\r\n      useSessions\r\n        ? await receiverClient.getSessionReceiver({\r\n            sessionId: TestMessage.sessionId\r\n          })\r\n        : receiverClient.getReceiver();\r\n    } catch (err) {\r\n      errorNewReceiver = err.message;\r\n    }\r\n    should.equal(errorNewReceiver, expectedErrorMsg, \"Expected error not thrown for getReceiver()\");\r\n\r\n    let errorPeek: string = \"\";\r\n    await receiverClient.peek().catch((err) => {\r\n      errorPeek = err.message;\r\n    });\r\n    should.equal(\r\n      errorPeek,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for peek() from receiverClient\"\r\n    );\r\n\r\n    let errorPeekBySequence: string = \"\";\r\n    await receiverClient.peekBySequenceNumber(long.ZERO).catch((err) => {\r\n      errorPeekBySequence = err.message;\r\n    });\r\n    should.equal(\r\n      errorPeekBySequence,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for peekBySequenceNumber() from receiverClient\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tests that each feature of the receiver client with sessions throws expected error\r\n   */\r\n  async function testSessionReceiver(expectedErrorMsg: string): Promise<void> {\r\n    await testReceiver(expectedErrorMsg, true);\r\n    const sessionReceiver = receiver as SessionReceiver;\r\n\r\n    let errorPeek: string = \"\";\r\n    await sessionReceiver.peek().catch((err) => {\r\n      errorPeek = err.message;\r\n    });\r\n    should.equal(\r\n      errorPeek,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for peek() from sessionReceiver\"\r\n    );\r\n\r\n    let errorPeekBySequence: string = \"\";\r\n    await sessionReceiver.peekBySequenceNumber(long.ZERO).catch((err) => {\r\n      errorPeekBySequence = err.message;\r\n    });\r\n    should.equal(\r\n      errorPeekBySequence,\r\n      expectedErrorMsg,\r\n      \"Expected error not thrown for peekBySequenceNumber() from sessionReceiver\"\r\n    );\r\n\r\n    let errorGetState: string = \"\";\r\n    await sessionReceiver.getState().catch((err) => {\r\n      errorGetState = err.message;\r\n    });\r\n    should.equal(errorGetState, expectedErrorMsg, \"Expected error not thrown for getState()\");\r\n\r\n    let errorSetState: string = \"\";\r\n    await sessionReceiver.setState(\"state!!\").catch((err) => {\r\n      errorSetState = err.message;\r\n    });\r\n    should.equal(errorSetState, expectedErrorMsg, \"Expected error not thrown for setState()\");\r\n  }\r\n\r\n  /**\r\n   * Tests that each feature of the topic filters throws expected error\r\n   */\r\n  async function testRules(expectedErrorMsg: string): Promise<void> {\r\n    const subscriptionClient = receiverClient as SubscriptionClient;\r\n\r\n    let errorAddRule: string = \"\";\r\n    await subscriptionClient.addRule(\"myRule\", true).catch((err) => {\r\n      errorAddRule = err.message;\r\n    });\r\n    should.equal(errorAddRule, expectedErrorMsg, \"Expected error not thrown for addRule()\");\r\n\r\n    let errorRemoveRule: string = \"\";\r\n    await subscriptionClient.removeRule(\"myRule\").catch((err) => {\r\n      errorRemoveRule = err.message;\r\n    });\r\n    should.equal(errorRemoveRule, expectedErrorMsg, \"Expected error not thrown for removeRule()\");\r\n\r\n    let errorGetRules: string = \"\";\r\n    await subscriptionClient.getRules().catch((err) => {\r\n      errorGetRules = err.message;\r\n    });\r\n    should.equal(errorGetRules, expectedErrorMsg, \"Expected error not thrown for getRule()\");\r\n  }\r\n\r\n  describe(\"Errors after close() on namespace\", function(): void {\r\n    const entityToClose = \"namespace\";\r\n    const expectedErrorMsg = \"The underlying AMQP connection is closed.\";\r\n\r\n    it(\"Partitioned Queue: errors after close() on namespace\", async function(): Promise<void> {\r\n      await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue, entityToClose);\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Queue with sessions: errors after close() on namespace\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedQueueWithSessions,\r\n        ClientType.PartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testSessionReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg, true);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription: errors after close() on namespace\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopic,\r\n        ClientType.PartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg);\r\n      await testRules(expectedErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription with sessions: errors after close() on namespace\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopicWithSessions,\r\n        ClientType.PartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testSessionReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg, true);\r\n      await testRules(expectedErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue: errors after close() on namespace\", async function(): Promise<void> {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueue,\r\n        ClientType.UnpartitionedQueue,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue with sessions: errors after close() on namespace\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testSessionReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg, true);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription: errors after close() on namespace\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopic,\r\n        ClientType.UnpartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg);\r\n      await testRules(expectedErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription with sessions: errors after close() on namespace\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopicWithSessions,\r\n        ClientType.UnpartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedErrorMsg);\r\n      await testSenderClient(expectedErrorMsg);\r\n      await testSessionReceiver(expectedErrorMsg);\r\n      await testReceiverClient(expectedErrorMsg, true);\r\n      await testRules(expectedErrorMsg);\r\n    });\r\n\r\n    it(\"Create Queue/Topic/Subscription clients throws error after namespace.close()\", async function(): Promise<\r\n      void\r\n    > {\r\n      // beforeEachTest() can be run for any entity type, we need it only to ensure that the\r\n      // connection is indeed opened\r\n      await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue, entityToClose);\r\n\r\n      let errorCreateQueueClient: string = \"\";\r\n      try {\r\n        namespace.createQueueClient(\"random-name\");\r\n      } catch (err) {\r\n        errorCreateQueueClient = err.message;\r\n      }\r\n      should.equal(\r\n        errorCreateQueueClient,\r\n        expectedErrorMsg,\r\n        \"Expected error not thrown for createQueueClient()\"\r\n      );\r\n\r\n      let errorCreateTopicClient: string = \"\";\r\n      try {\r\n        namespace.createTopicClient(\"random-name\");\r\n      } catch (err) {\r\n        errorCreateTopicClient = err.message;\r\n      }\r\n      should.equal(\r\n        errorCreateTopicClient,\r\n        expectedErrorMsg,\r\n        \"Expected error not thrown for createTopicClient()\"\r\n      );\r\n\r\n      let errorCreateSubscriptionClient: string = \"\";\r\n      try {\r\n        namespace.createSubscriptionClient(\"random-name\", \"random-name\");\r\n      } catch (err) {\r\n        errorCreateSubscriptionClient = err.message;\r\n      }\r\n      should.equal(\r\n        errorCreateSubscriptionClient,\r\n        expectedErrorMsg,\r\n        \"Expected error not thrown for createubscriptionClient()\"\r\n      );\r\n    });\r\n  });\r\n\r\n  describe(\"Errors after close() on senderClient\", function(): void {\r\n    const entityToClose = \"senderClient\";\r\n    const expectedSenderErrorMsg = \"The sender has been closed and can no longer be used.\";\r\n    const expectedQueueClientErrorMsg =\r\n      \"The queueClient has been closed and can no longer be used.\";\r\n    const expectedTopicClientErrorMsg =\r\n      \"The topicClient has been closed and can no longer be used.\";\r\n\r\n    it(\"Partitioned Queue: errors after close() on senderClient\", async function(): Promise<void> {\r\n      await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue, entityToClose);\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedQueueClientErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Queue with sessions: errors after close() on senderClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedQueueWithSessions,\r\n        ClientType.PartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedQueueClientErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription: errors after close() on senderClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopic,\r\n        ClientType.PartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedTopicClientErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription with sessions: errors after close() on senderClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopicWithSessions,\r\n        ClientType.PartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedTopicClientErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue: errors after close() on senderClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueue,\r\n        ClientType.UnpartitionedQueue,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedQueueClientErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue with sessions: errors after close() on senderClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedQueueClientErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription: errors after close() on senderClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopic,\r\n        ClientType.UnpartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedTopicClientErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription with sessions: errors after close() on senderClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopicWithSessions,\r\n        ClientType.UnpartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n      await testSenderClient(expectedTopicClientErrorMsg);\r\n    });\r\n  });\r\n\r\n  describe(\"Errors after close() on receiverClient\", function(): void {\r\n    const entityToClose = \"receiverClient\";\r\n    const expectedReceiverErrorMsg = \"The receiver has been closed and can no longer be used.\";\r\n    const expectedQueueClientErrorMsg =\r\n      \"The queueClient has been closed and can no longer be used.\";\r\n    const expectedSubscriptionClientErrorMsg =\r\n      \"The subscriptionClient has been closed and can no longer be used.\";\r\n\r\n    it(\"Partitioned Queue: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue, entityToClose);\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedQueueClientErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Queue with sessions: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedQueueWithSessions,\r\n        ClientType.PartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedQueueClientErrorMsg, true);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopic,\r\n        ClientType.PartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedSubscriptionClientErrorMsg);\r\n      await testRules(expectedSubscriptionClientErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription with sessions: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopicWithSessions,\r\n        ClientType.PartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedSubscriptionClientErrorMsg, true);\r\n      await testRules(expectedSubscriptionClientErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueue,\r\n        ClientType.UnpartitionedQueue,\r\n        entityToClose\r\n      );\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedQueueClientErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue with sessions: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedQueueClientErrorMsg, true);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopic,\r\n        ClientType.UnpartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedSubscriptionClientErrorMsg);\r\n      await testRules(expectedSubscriptionClientErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription with sessions: errors after close() on receiverClient\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopicWithSessions,\r\n        ClientType.UnpartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n      await testReceiverClient(expectedSubscriptionClientErrorMsg, true);\r\n      await testRules(expectedSubscriptionClientErrorMsg);\r\n    });\r\n  });\r\n\r\n  describe(\"Errors after close() on sender\", function(): void {\r\n    const entityToClose = \"sender\";\r\n    const expectedSenderErrorMsg = \"The sender has been closed and can no longer be used.\";\r\n\r\n    it(\"Partitioned Queue: errors after close() on sender\", async function(): Promise<void> {\r\n      await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue, entityToClose);\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Queue with sessions: errors after close() on sender\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedQueueWithSessions,\r\n        ClientType.PartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription: errors after close() on sender\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopic,\r\n        ClientType.PartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription with sessions: errors after close() on sender\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopicWithSessions,\r\n        ClientType.PartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue: errors after close() on sender\", async function(): Promise<void> {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueue,\r\n        ClientType.UnpartitionedQueue,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue with sessions: errors after close() on sender\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription: errors after close() on sender\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopic,\r\n        ClientType.UnpartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription with sessions: errors after close() on sender\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopicWithSessions,\r\n        ClientType.UnpartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSender(expectedSenderErrorMsg);\r\n    });\r\n  });\r\n\r\n  describe(\"Errors after close() on receiver\", function(): void {\r\n    const entityToClose = \"receiver\";\r\n    const expectedReceiverErrorMsg = \"The receiver has been closed and can no longer be used.\";\r\n\r\n    it(\"Partitioned Queue: errors after close() on receiver\", async function(): Promise<void> {\r\n      await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue, entityToClose);\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Queue with sessions: errors after close() on receiver\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedQueueWithSessions,\r\n        ClientType.PartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription: errors after close() on receiver\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopic,\r\n        ClientType.PartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n    });\r\n\r\n    it(\"Partitioned Topic/Subscription with sessions: errors after close() on receiver\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.PartitionedTopicWithSessions,\r\n        ClientType.PartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue: errors after close() on receiver\", async function(): Promise<void> {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueue,\r\n        ClientType.UnpartitionedQueue,\r\n        entityToClose\r\n      );\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Queue with sessions: errors after close() on receiver\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        ClientType.UnpartitionedQueueWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription: errors after close() on receiver\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopic,\r\n        ClientType.UnpartitionedSubscription,\r\n        entityToClose\r\n      );\r\n\r\n      await testReceiver(expectedReceiverErrorMsg);\r\n    });\r\n\r\n    it(\"Unpartitioned Topic/Subscription with sessions: errors after close() on receiver\", async function(): Promise<\r\n      void\r\n    > {\r\n      await beforeEachTest(\r\n        ClientType.UnpartitionedTopicWithSessions,\r\n        ClientType.UnpartitionedSubscriptionWithSessions,\r\n        entityToClose,\r\n        true\r\n      );\r\n\r\n      await testSessionReceiver(expectedReceiverErrorMsg);\r\n    });\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  ServiceBusMessage,\r\n  SendableMessageInfo,\r\n  ReceiveMode\r\n} from \"../lib\";\r\n\r\nimport { DispositionType } from \"../lib/serviceBusMessage\";\r\n\r\nimport {\r\n  TestMessage,\r\n  getSenderReceiverClients,\r\n  ClientType,\r\n  purge,\r\n  checkWithTimeout\r\n} from \"./testUtils\";\r\n\r\nimport { Receiver, SessionReceiver } from \"../lib/receiver\";\r\nimport { Sender } from \"../lib/sender\";\r\n\r\nasync function testPeekMsgsLength(\r\n  client: QueueClient | SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\n\r\nlet errorWasThrown: boolean;\r\n\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\nlet sender: Sender;\r\nlet receiver: Receiver | SessionReceiver;\r\n\r\nasync function beforeEachTest(\r\n  senderType: ClientType,\r\n  receiverType: ClientType,\r\n  useSessions?: boolean\r\n): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  await purge(receiverClient, useSessions ? TestMessage.sessionId : undefined);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n\r\n  sender = senderClient.getSender();\r\n  receiver = useSessions\r\n    ? await receiverClient.getSessionReceiver({\r\n        sessionId: TestMessage.sessionId,\r\n        receiveMode: ReceiveMode.receiveAndDelete\r\n      })\r\n    : receiverClient.getReceiver({ receiveMode: ReceiveMode.receiveAndDelete });\r\n\r\n  errorWasThrown = false;\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\ndescribe(\"Batch Receiver in ReceiveAndDelete mode\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function sendReceiveMsg(testMessages: SendableMessageInfo): Promise<void> {\r\n    await sender.send(testMessages);\r\n    const msgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(msgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessages.messageId, \"MessageId is different than expected\");\r\n    should.equal(msgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n  }\r\n\r\n  async function testNoSettlement(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    await sendReceiveMsg(testMessages);\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testNoSettlement();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testNoSettlement();\r\n  });\r\n\r\n  /*it(\"Unpartitioned Queue: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testNoSettlement();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testNoSettlement();\r\n  });*/\r\n\r\n  it(\"Partitioned Queue with Sessions: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: No settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming Receiver in ReceiveAndDelete mode\", function(): void {\r\n  let errorFromErrorHandler: Error | undefined;\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function sendReceiveMsg(\r\n    testMessages: SendableMessageInfo,\r\n    autoCompleteFlag: boolean\r\n  ): Promise<void> {\r\n    await sender.send(testMessages);\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n\r\n    receiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        receivedMsgs.push(msg);\r\n        return Promise.resolve();\r\n      },\r\n      (err: Error) => {\r\n        if (err) {\r\n          errorFromErrorHandler = err;\r\n        }\r\n      },\r\n      { autoComplete: autoCompleteFlag }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n    should.equal(msgsCheck, true, \"Could not receive the messages in expected time.\");\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessages.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    should.equal(\r\n      errorFromErrorHandler,\r\n      undefined,\r\n      errorFromErrorHandler && errorFromErrorHandler.message\r\n    );\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  async function testNoSettlement(autoCompleteFlag: boolean, useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    await sendReceiveMsg(testMessages, autoCompleteFlag);\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testNoSettlement(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testNoSettlement(true);\r\n  });\r\n\r\n  /* it(\"Unpartitioned Queue: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testNoSettlement(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testNoSettlement(true);\r\n  });*/\r\n\r\n  it(\"Partitioned Queue with Sessions: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true, true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: With auto-complete enabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(true, true);\r\n  });\r\n\r\n  it(\"Partitioned Queue: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testNoSettlement(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testNoSettlement(false);\r\n  });\r\n\r\n  /* it(\"Unpartitioned Queue: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testNoSettlement(false);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testNoSettlement(false);\r\n  });*/\r\n\r\n  it(\"Partitioned Queue with Sessions: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(false, true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(false, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(false, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: With auto-complete disabled, no settlement of the message removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testNoSettlement(false, true);\r\n  });\r\n});\r\n\r\ndescribe(\"Unsupported features in ReceiveAndDelete mode\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n  async function sendReceiveMsg(testMessages: SendableMessageInfo): Promise<ServiceBusMessage> {\r\n    await sender.send(testMessages);\r\n    const msgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(msgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessages.messageId, \"MessageId is different than expected\");\r\n    should.equal(msgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n\r\n    return msgs[0];\r\n  }\r\n\r\n  const testError = (err: Error) => {\r\n    should.equal(\r\n      err.message,\r\n      \"The operation is only supported in 'PeekLock' receive mode.\",\r\n      \"ErrorMessage is different than expected\"\r\n    );\r\n    errorWasThrown = true;\r\n  };\r\n\r\n  async function testSettlement(operation: DispositionType, useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const msg = await sendReceiveMsg(testMessages);\r\n\r\n    if (operation === DispositionType.complete) {\r\n      await msg.complete().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.abandon) {\r\n      await msg.abandon().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.deadletter) {\r\n      await msg.deadLetter().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.defer) {\r\n      await msg.defer().catch((err) => testError(err));\r\n    }\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  /* it(\"Unpartitioned Queue: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: complete() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.complete);\r\n  });*/\r\n\r\n  it(\"Partitioned Queue with Sessions: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.complete, true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: complete() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.complete, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.complete, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: complete() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.complete, true);\r\n  });\r\n\r\n  it(\"Partitioned Queue: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  /* it(\"Unpartitioned Queue: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: abandon() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.abandon);\r\n  });*/\r\n\r\n  it(\"Partitioned Queue with Sessions: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.abandon, true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: abandon() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.abandon, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.abandon, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: abandon() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.abandon, true);\r\n  });\r\n\r\n  it(\"Partitioned Queue: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  /* it(\"Unpartitioned Queue: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: defer() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.defer);\r\n  });*/\r\n\r\n  it(\"Partitioned Queue with Sessions: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.defer, true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: defer() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.defer, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.defer, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: defer() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.defer, true);\r\n  });\r\n\r\n  it(\"Partitioned Queue: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  /* it(\"Unpartitioned Queue: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: deadLetter() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });*/\r\n\r\n  it(\"Partitioned Queue with Sessions: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.deadletter, true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with Sessions: deadLetter() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.deadletter, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: deadLetter() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.deadletter, true);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription with Sessions: deadLetter() throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSettlement(DispositionType.deadletter, true);\r\n  });\r\n\r\n  async function testRenewLock(): Promise<void> {\r\n    const msg = await sendReceiveMsg(TestMessage.getSample());\r\n\r\n    await receiver.renewLock(msg).catch((err) => testError(err));\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: Renew message lock throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testRenewLock();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Renew message lock throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testRenewLock();\r\n  });\r\n\r\n  /* it(\"Unpartitioned Queue: Renew message lock throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testRenewLock();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Renew message lock throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testRenewLock();\r\n  });*/\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  OnMessage,\r\n  ServiceBusMessage,\r\n  MessagingError,\r\n  OnError\r\n} from \"../lib\";\r\nimport { delay } from \"rhea-promise\";\r\nimport { purge, getSenderReceiverClients, ClientType, TestMessage } from \"./testUtils\";\r\n\r\nlet ns: Namespace;\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\n\r\nasync function beforeEachTest(senderType: ClientType, receiverType: ClientType): Promise<void> {\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  await purge(receiverClient);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\ndescribe(\"Unpartitioned Queue - Lock Renewal\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      willCompleteFail: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 55,\r\n      willCompleteFail: true\r\n    });\r\n  }).timeout(90000);\r\n\r\n  it(\"Streaming Receiver: No lock renewal when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Partitioned Queue - Lock Renewal\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n    // Complete fails as expected\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      willCompleteFail: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 55,\r\n      willCompleteFail: true\r\n    });\r\n  }).timeout(90000);\r\n\r\n  it(\"Streaming Receiver: No lock renewal when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Unpartitioned Subscription - Lock Renewal\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n    // Complete fails as expected\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      willCompleteFail: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 55,\r\n      willCompleteFail: true\r\n    });\r\n  }).timeout(90000);\r\n\r\n  it(\"Streaming Receiver: No lock renewal when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Partitioned Subscription - Lock Renewal\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n    // Complete fails as expected\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      willCompleteFail: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 55,\r\n      willCompleteFail: true\r\n    });\r\n  }).timeout(90000);\r\n\r\n  it(\"Streaming Receiver: No lock renewal when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxAutoRenewDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      willCompleteFail: true\r\n    });\r\n  });\r\n});\r\n\r\nconst lockDurationInMilliseconds = 30000;\r\n\r\nlet uncaughtErrorFromHandlers: Error | undefined;\r\n\r\nconst onError: OnError = (err: MessagingError | Error) => {\r\n  uncaughtErrorFromHandlers = err;\r\n};\r\n\r\n/**\r\n * Test renewLock() after receiving a message using Batch Receiver\r\n */\r\nasync function testBatchReceiverManualLockRenewalHappyCase(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient\r\n): Promise<void> {\r\n  const testMessage = TestMessage.getSample();\r\n  await senderClient.getSender().send(testMessage);\r\n\r\n  const receiver = receiverClient.getReceiver();\r\n  const msgs = await receiver.receiveBatch(1);\r\n\r\n  // Compute expected initial lock expiry time\r\n  const expectedLockExpiryTimeUtc = new Date();\r\n  expectedLockExpiryTimeUtc.setSeconds(\r\n    expectedLockExpiryTimeUtc.getSeconds() + lockDurationInMilliseconds / 1000\r\n  );\r\n\r\n  should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n  should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n  should.equal(msgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n  should.equal(msgs[0].messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n\r\n  // Verify initial lock expiry time on the message\r\n  assertTimestampsAreApproximatelyEqual(\r\n    msgs[0].lockedUntilUtc,\r\n    expectedLockExpiryTimeUtc,\r\n    \"Initial\"\r\n  );\r\n\r\n  await delay(5000);\r\n  if (msgs[0].lockToken) {\r\n    await receiver.renewLock(msgs[0].lockToken);\r\n  }\r\n\r\n  // Compute expected lock expiry time after renewing lock after 5 seconds\r\n  expectedLockExpiryTimeUtc.setSeconds(expectedLockExpiryTimeUtc.getSeconds() + 5);\r\n\r\n  // Verify lock expiry time after renewLock()\r\n  assertTimestampsAreApproximatelyEqual(\r\n    msgs[0].lockedUntilUtc,\r\n    expectedLockExpiryTimeUtc,\r\n    \"After renewlock()\"\r\n  );\r\n\r\n  await msgs[0].complete();\r\n}\r\n\r\n/**\r\n * Test settling of message from Batch Receiver fails after message lock expires\r\n */\r\nasync function testBatchReceiverManualLockRenewalErrorOnLockExpiry(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient\r\n): Promise<void> {\r\n  const testMessage = TestMessage.getSample();\r\n  await senderClient.getSender().send(testMessage);\r\n\r\n  const receiver = receiverClient.getReceiver();\r\n  const msgs = await receiver.receiveBatch(1);\r\n\r\n  should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n  should.equal(msgs.length, 1, \"Expected message length does not match\");\r\n  should.equal(msgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n  should.equal(msgs[0].messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n\r\n  // Sleeping 30 seconds...\r\n  await delay(lockDurationInMilliseconds + 1000);\r\n\r\n  let errorWasThrown: boolean = false;\r\n  await msgs[0].complete().catch((err) => {\r\n    should.equal(err.name, \"MessageLockLostError\", \"ErrorName is different than expected\");\r\n    errorWasThrown = true;\r\n  });\r\n\r\n  should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n\r\n  // Clean up any left over messages\r\n  const unprocessedMsgs = await receiver.receiveBatch(1);\r\n  await unprocessedMsgs[0].complete();\r\n}\r\n\r\n/**\r\n * Test renewLock() after receiving a message using Streaming Receiver with autoLockRenewal disabled\r\n */\r\nasync function testStreamingReceiverManualLockRenewalHappyCase(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient\r\n): Promise<void> {\r\n  let numOfMessagesReceived = 0;\r\n  const testMessage = TestMessage.getSample();\r\n  await senderClient.getSender().send(testMessage);\r\n  const receiver = receiverClient.getReceiver();\r\n\r\n  const onMessage: OnMessage = async (brokeredMessage: ServiceBusMessage) => {\r\n    if (numOfMessagesReceived < 1) {\r\n      numOfMessagesReceived++;\r\n\r\n      should.equal(\r\n        brokeredMessage.body,\r\n        testMessage.body,\r\n        \"MessageBody is different than expected\"\r\n      );\r\n      should.equal(\r\n        brokeredMessage.messageId,\r\n        testMessage.messageId,\r\n        \"MessageId is different than expected\"\r\n      );\r\n\r\n      // Compute expected initial lock expiry time\r\n      const expectedLockExpiryTimeUtc = new Date();\r\n      expectedLockExpiryTimeUtc.setSeconds(\r\n        expectedLockExpiryTimeUtc.getSeconds() + lockDurationInMilliseconds / 1000\r\n      );\r\n\r\n      // Verify initial expiry time on message\r\n      assertTimestampsAreApproximatelyEqual(\r\n        brokeredMessage.lockedUntilUtc,\r\n        expectedLockExpiryTimeUtc,\r\n        \"Initial\"\r\n      );\r\n\r\n      await delay(5000);\r\n      await receiver.renewLock(brokeredMessage);\r\n\r\n      // Compute expected lock expiry time after renewing lock after 5 seconds\r\n      expectedLockExpiryTimeUtc.setSeconds(expectedLockExpiryTimeUtc.getSeconds() + 5);\r\n\r\n      // Verify actual expiry time on session after first renewal\r\n      assertTimestampsAreApproximatelyEqual(\r\n        brokeredMessage.lockedUntilUtc,\r\n        expectedLockExpiryTimeUtc,\r\n        \"After renewlock\"\r\n      );\r\n\r\n      await brokeredMessage.complete();\r\n    }\r\n  };\r\n\r\n  receiver.receive(onMessage, onError, {\r\n    autoComplete: false,\r\n    maxMessageAutoRenewLockDurationInSeconds: 0\r\n  });\r\n  await delay(10000);\r\n  await receiver.close();\r\n\r\n  if (uncaughtErrorFromHandlers) {\r\n    chai.assert.fail(uncaughtErrorFromHandlers.message);\r\n  }\r\n\r\n  should.equal(numOfMessagesReceived, 1, \"Unexpected number of messages\");\r\n}\r\n\r\ninterface AutoLockRenewalTestOptions {\r\n  maxAutoRenewDurationInSeconds: number | undefined;\r\n  delayBeforeAttemptingToCompleteMessageInSeconds: number;\r\n  willCompleteFail: boolean;\r\n}\r\n\r\nasync function testAutoLockRenewalConfigBehavior(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient,\r\n  options: AutoLockRenewalTestOptions\r\n): Promise<void> {\r\n  let numOfMessagesReceived = 0;\r\n  const testMessage = TestMessage.getSample();\r\n  await senderClient.getSender().send(testMessage);\r\n  const receiver = receiverClient.getReceiver();\r\n\r\n  const onMessage: OnMessage = async (brokeredMessage: ServiceBusMessage) => {\r\n    if (numOfMessagesReceived < 1) {\r\n      numOfMessagesReceived++;\r\n\r\n      should.equal(\r\n        brokeredMessage.body,\r\n        testMessage.body,\r\n        \"MessageBody is different than expected\"\r\n      );\r\n      should.equal(\r\n        brokeredMessage.messageId,\r\n        testMessage.messageId,\r\n        \"MessageId is different than expected\"\r\n      );\r\n\r\n      // Sleeping...\r\n      await delay(options.delayBeforeAttemptingToCompleteMessageInSeconds * 1000);\r\n\r\n      let errorWasThrown: boolean = false;\r\n      await brokeredMessage.complete().catch((err) => {\r\n        should.equal(err.name, \"MessageLockLostError\", \"ErrorName is different than expected\");\r\n        errorWasThrown = true;\r\n      });\r\n\r\n      should.equal(errorWasThrown, options.willCompleteFail, \"Error Thrown flag value mismatch\");\r\n    }\r\n  };\r\n\r\n  receiver.receive(onMessage, onError, {\r\n    autoComplete: false,\r\n    maxMessageAutoRenewLockDurationInSeconds: options.maxAutoRenewDurationInSeconds\r\n  });\r\n  await delay(options.delayBeforeAttemptingToCompleteMessageInSeconds * 1000 + 10000);\r\n  await receiver.close();\r\n\r\n  if (uncaughtErrorFromHandlers) {\r\n    chai.assert.fail(uncaughtErrorFromHandlers.message);\r\n  }\r\n\r\n  should.equal(numOfMessagesReceived, 1, \"Mismatch in number of messages received\");\r\n\r\n  if (options.willCompleteFail) {\r\n    // Clean up any left over messages\r\n    const newReceiver = receiverClient.getReceiver();\r\n    const unprocessedMsgs = await newReceiver.receiveBatch(1);\r\n    await unprocessedMsgs[0].complete();\r\n  }\r\n}\r\n\r\nfunction assertTimestampsAreApproximatelyEqual(\r\n  actualTimeInUTC: Date | undefined,\r\n  expectedTimeInUTC: Date,\r\n  label: string\r\n): void {\r\n  if (actualTimeInUTC) {\r\n    should.equal(\r\n      Math.pow((actualTimeInUTC.valueOf() - expectedTimeInUTC.valueOf()) / 1000, 2) < 100, // Within +/- 10 seconds\r\n      true,\r\n      `${label}: Actual time ${actualTimeInUTC} must be approximately equal to ${expectedTimeInUTC}`\r\n    );\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  ServiceBusMessage,\r\n  MessagingError,\r\n  OnError,\r\n  delay\r\n} from \"../lib\";\r\nimport { purge, getSenderReceiverClients, ClientType, TestMessage } from \"./testUtils\";\r\n\r\nlet ns: Namespace;\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\n\r\nasync function beforeEachTest(senderType: ClientType, receiverType: ClientType): Promise<void> {\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  await purge(receiverClient, TestMessage.sessionId);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\ndescribe(\"Unpartitioned Queue - Lock Renewal for Sessions\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      expectSessionLockLostErrorToBeThrown: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 80,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  }).timeout(95000);\r\n\r\n  it(\"Receive a msg using Streaming Receiver, lock renewal does not take place when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Partitioned Queue - Lock Renewal for Sessions\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      expectSessionLockLostErrorToBeThrown: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 80,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  }).timeout(95000);\r\n\r\n  it(\"Receive a msg using Streaming Receiver, lock renewal does not take place when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Unpartitioned Subscription - Lock Renewal for Sessions\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      expectSessionLockLostErrorToBeThrown: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 80,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  }).timeout(95000);\r\n\r\n  it(\"Receive a msg using Streaming Receiver, lock renewal does not take place when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Partitioned Subscription - Lock Renewal for Sessions\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Batch Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Batch Receiver: complete() after lock expiry with throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testBatchReceiverManualLockRenewalErrorOnLockExpiry(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: renewLock() resets lock duration each time.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testStreamingReceiverManualLockRenewalHappyCase(senderClient, receiverClient);\r\n  });\r\n\r\n  it(\"Streaming Receiver: complete() after lock expiry with auto-renewal disabled throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 0,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock will not expire until configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 38,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 35,\r\n      expectSessionLockLostErrorToBeThrown: false\r\n    });\r\n  });\r\n\r\n  it(\"Streaming Receiver: lock expires sometime after configured time\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 35,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 80,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  }).timeout(95000);\r\n\r\n  it(\"Receive a msg using Streaming Receiver, lock renewal does not take place when config value is less than lock duration\", async function(): Promise<\r\n    void\r\n  > {\r\n    await testAutoLockRenewalConfigBehavior(senderClient, receiverClient, {\r\n      maxSessionAutoRenewLockDurationInSeconds: 15,\r\n      delayBeforeAttemptingToCompleteMessageInSeconds: 31,\r\n      expectSessionLockLostErrorToBeThrown: true\r\n    });\r\n  });\r\n});\r\n\r\nconst lockDurationInMilliseconds = 30000;\r\n// const maxSessionAutoRenewLockDurationInSeconds = 300;\r\nlet uncaughtErrorFromHandlers: Error | undefined;\r\n\r\nconst onError: OnError = (err: MessagingError | Error) => {\r\n  uncaughtErrorFromHandlers = err;\r\n};\r\n\r\n/**\r\n * Test manual renewLock() using Batch Receiver, with autoLockRenewal disabled\r\n */\r\nasync function testBatchReceiverManualLockRenewalHappyCase(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient\r\n): Promise<void> {\r\n  const testMessage = TestMessage.getSessionSample();\r\n  await senderClient.getSender().send(testMessage);\r\n\r\n  const sessionClient = await receiverClient.getSessionReceiver({\r\n    sessionId: TestMessage.sessionId,\r\n    maxSessionAutoRenewLockDurationInSeconds: 0\r\n  });\r\n  const msgs = await sessionClient.receiveBatch(1);\r\n\r\n  // Compute expected initial lock expiry time\r\n  const expectedLockExpiryTimeUtc = new Date();\r\n  expectedLockExpiryTimeUtc.setSeconds(\r\n    expectedLockExpiryTimeUtc.getSeconds() + lockDurationInMilliseconds / 1000\r\n  );\r\n\r\n  should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n  should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n  should.equal(msgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n  should.equal(msgs[0].messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n\r\n  // Verify initial lock expiry time on the session\r\n  assertTimestampsAreApproximatelyEqual(\r\n    sessionClient.sessionLockedUntilUtc,\r\n    expectedLockExpiryTimeUtc,\r\n    \"Initial\"\r\n  );\r\n\r\n  await delay(5000);\r\n  await sessionClient.renewLock();\r\n\r\n  // Compute expected lock expiry time after renewing lock after 5 seconds\r\n  expectedLockExpiryTimeUtc.setSeconds(expectedLockExpiryTimeUtc.getSeconds() + 5);\r\n\r\n  // Verify lock expiry time after renewLock()\r\n  assertTimestampsAreApproximatelyEqual(\r\n    sessionClient.sessionLockedUntilUtc,\r\n    expectedLockExpiryTimeUtc,\r\n    \"After renewlock()\"\r\n  );\r\n\r\n  await msgs[0].complete();\r\n}\r\n\r\n/**\r\n * Test settling of message from Batch Receiver fails after session lock expires\r\n */\r\nasync function testBatchReceiverManualLockRenewalErrorOnLockExpiry(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient\r\n): Promise<void> {\r\n  const testMessage = TestMessage.getSessionSample();\r\n  await senderClient.getSender().send(testMessage);\r\n\r\n  let sessionClient = await receiverClient.getSessionReceiver({\r\n    sessionId: TestMessage.sessionId,\r\n    maxSessionAutoRenewLockDurationInSeconds: 0\r\n  });\r\n  const msgs = await sessionClient.receiveBatch(1);\r\n\r\n  should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n  should.equal(msgs.length, 1, \"Expected message length does not match\");\r\n  should.equal(msgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n  should.equal(msgs[0].messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n\r\n  await delay(lockDurationInMilliseconds + 1000);\r\n\r\n  let errorWasThrown: boolean = false;\r\n  await msgs[0].complete().catch((err) => {\r\n    should.equal(err.name, \"SessionLockLostError\", \"ErrorName is different than expected\");\r\n    errorWasThrown = true;\r\n  });\r\n\r\n  should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n\r\n  // Subsequent receivers for the same session should work as expected.\r\n  sessionClient = await receiverClient.getSessionReceiver();\r\n  const unprocessedMsgs = await sessionClient.receiveBatch(1);\r\n  should.equal(unprocessedMsgs[0].deliveryCount, 1, \"Unexpected deliveryCount\");\r\n  await unprocessedMsgs[0].complete();\r\n}\r\n\r\n/**\r\n * Test manual renewLock() using Streaming Receiver with autoLockRenewal disabled\r\n */\r\nasync function testStreamingReceiverManualLockRenewalHappyCase(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient\r\n): Promise<void> {\r\n  let numOfMessagesReceived = 0;\r\n  const testMessage = TestMessage.getSessionSample();\r\n  await senderClient.getSender().send(testMessage);\r\n  const sessionClient = await receiverClient.getSessionReceiver({\r\n    sessionId: TestMessage.sessionId,\r\n    maxSessionAutoRenewLockDurationInSeconds: 0\r\n  });\r\n\r\n  const onSessionMessage = async (brokeredMessage: ServiceBusMessage) => {\r\n    if (numOfMessagesReceived < 1) {\r\n      numOfMessagesReceived++;\r\n\r\n      should.equal(\r\n        brokeredMessage.body,\r\n        testMessage.body,\r\n        \"MessageBody is different than expected\"\r\n      );\r\n      should.equal(\r\n        brokeredMessage.messageId,\r\n        testMessage.messageId,\r\n        \"MessageId is different than expected\"\r\n      );\r\n\r\n      // Compute expected initial lock expiry time\r\n      const expectedLockExpiryTimeUtc = new Date();\r\n      expectedLockExpiryTimeUtc.setSeconds(\r\n        expectedLockExpiryTimeUtc.getSeconds() + lockDurationInMilliseconds / 1000\r\n      );\r\n\r\n      // Verify initial expiry time on session\r\n      assertTimestampsAreApproximatelyEqual(\r\n        sessionClient.sessionLockedUntilUtc,\r\n        expectedLockExpiryTimeUtc,\r\n        \"Initial\"\r\n      );\r\n\r\n      await delay(5000);\r\n      await sessionClient.renewLock();\r\n\r\n      // Compute expected lock expiry time after renewing lock after 5 seconds\r\n      expectedLockExpiryTimeUtc.setSeconds(expectedLockExpiryTimeUtc.getSeconds() + 5);\r\n\r\n      // Verify actual expiry time on session after renewal\r\n      assertTimestampsAreApproximatelyEqual(\r\n        sessionClient.sessionLockedUntilUtc,\r\n        expectedLockExpiryTimeUtc,\r\n        \"After renewlock()\"\r\n      );\r\n\r\n      await brokeredMessage.complete();\r\n    }\r\n  };\r\n\r\n  await sessionClient.receive(onSessionMessage, onError, {\r\n    autoComplete: false\r\n  });\r\n  await delay(10000);\r\n  await sessionClient.close();\r\n\r\n  if (uncaughtErrorFromHandlers) {\r\n    chai.assert.fail(uncaughtErrorFromHandlers.message);\r\n  }\r\n\r\n  should.equal(numOfMessagesReceived, 1, \"Unexpected number of messages\");\r\n}\r\n\r\ninterface AutoLockRenewalTestOptions {\r\n  maxSessionAutoRenewLockDurationInSeconds: number | undefined;\r\n  delayBeforeAttemptingToCompleteMessageInSeconds: number;\r\n  expectSessionLockLostErrorToBeThrown: boolean;\r\n}\r\n\r\nasync function testAutoLockRenewalConfigBehavior(\r\n  senderClient: QueueClient | TopicClient,\r\n  receiverClient: QueueClient | SubscriptionClient,\r\n  options: AutoLockRenewalTestOptions\r\n): Promise<void> {\r\n  let numOfMessagesReceived = 0;\r\n  const testMessage = TestMessage.getSessionSample();\r\n  await senderClient.getSender().send(testMessage);\r\n\r\n  const sessionClient = await receiverClient.getSessionReceiver({\r\n    sessionId: TestMessage.sessionId,\r\n    maxSessionAutoRenewLockDurationInSeconds: options.maxSessionAutoRenewLockDurationInSeconds\r\n  });\r\n\r\n  let sessionLockLostErrorThrown = false;\r\n  const messagesReceived: ServiceBusMessage[] = [];\r\n  await sessionClient.receive(\r\n    async (brokeredMessage: ServiceBusMessage) => {\r\n      if (numOfMessagesReceived < 1) {\r\n        numOfMessagesReceived++;\r\n\r\n        should.equal(\r\n          brokeredMessage.body,\r\n          testMessage.body,\r\n          \"MessageBody is different than expected\"\r\n        );\r\n        should.equal(\r\n          brokeredMessage.messageId,\r\n          testMessage.messageId,\r\n          \"MessageId is different than expected\"\r\n        );\r\n\r\n        messagesReceived.push(brokeredMessage);\r\n\r\n        // Sleeping...\r\n        await delay(options.delayBeforeAttemptingToCompleteMessageInSeconds * 1000);\r\n      }\r\n    },\r\n    (err: MessagingError | Error) => {\r\n      if (err.name === \"SessionLockLostError\") {\r\n        sessionLockLostErrorThrown = true;\r\n      } else {\r\n        onError(err);\r\n      }\r\n    },\r\n    {\r\n      autoComplete: false\r\n    }\r\n  );\r\n  await delay(options.delayBeforeAttemptingToCompleteMessageInSeconds * 1000 + 2000);\r\n  should.equal(\r\n    sessionLockLostErrorThrown,\r\n    options.expectSessionLockLostErrorToBeThrown,\r\n    \"SessionLockLostErrorThrown flag must match\"\r\n  );\r\n\r\n  should.equal(messagesReceived.length, 1, \"Mismatch in number of messages received\");\r\n\r\n  let errorWasThrown: boolean = false;\r\n  await messagesReceived[0].complete().catch((err) => {\r\n    should.equal(err.name, \"SessionLockLostError\", \"ErrorName is different than expected\");\r\n    errorWasThrown = true;\r\n  });\r\n\r\n  should.equal(\r\n    errorWasThrown,\r\n    options.expectSessionLockLostErrorToBeThrown,\r\n    \"Error Thrown flag value mismatch\"\r\n  );\r\n\r\n  await sessionClient.close();\r\n\r\n  if (uncaughtErrorFromHandlers) {\r\n    chai.assert.fail(uncaughtErrorFromHandlers.message);\r\n  }\r\n}\r\n\r\nfunction assertTimestampsAreApproximatelyEqual(\r\n  actualTimeInUTC: Date | undefined,\r\n  expectedTimeInUTC: Date,\r\n  label: string\r\n): void {\r\n  if (actualTimeInUTC) {\r\n    should.equal(\r\n      Math.pow((actualTimeInUTC.valueOf() - expectedTimeInUTC.valueOf()) / 1000, 2) < 100, // Within +/- 10 seconds\r\n      true,\r\n      `${label}: Actual time ${actualTimeInUTC} must be approximately equal to ${expectedTimeInUTC}`\r\n    );\r\n  }\r\n}\r\n","import chai from \"chai\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\n// Since `npm run build-samples` now update the typescript samples to make them debuggable,\r\n// we now have the below tests to ensure such updates dont get checked in.\r\ndescribe(\"Ensure typescript samples use published package\", function(): void {\r\n  const regex = new RegExp('import (.*) from \"@azure/service-bus\"');\r\n\r\n  function testSamples(folder: string): void {\r\n    const files = fs.readdirSync(folder);\r\n    const failingFiles = files.filter((file) => {\r\n      const fileContents = fs.readFileSync(path.join(folder, file), { encoding: \"utf-8\" });\r\n      return !regex.test(fileContents);\r\n    });\r\n    if (failingFiles.length) {\r\n      chai.assert.fail(\r\n        `${failingFiles.length} files (${failingFiles}) dont import @azure/service-bus`\r\n      );\r\n    }\r\n  }\r\n\r\n  it(\"Ensure getStarted samples use published package\", () => {\r\n    const folder = path.join(__dirname, \"../examples/typescript/gettingStarted\");\r\n    testSamples(folder);\r\n  });\r\n\r\n  it(\"Ensure advancedFeatures samples use published package\", () => {\r\n    const folder = path.join(__dirname, \"../examples/typescript/advancedFeatures\");\r\n    testSamples(folder);\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  delay,\r\n  SendableMessageInfo\r\n} from \"../lib\";\r\n\r\nimport { TestMessage, getSenderReceiverClients, ClientType, purge } from \"./testUtils\";\r\nimport { Receiver, SessionReceiver } from \"../lib/receiver\";\r\n\r\nasync function testPeekMsgsLength(\r\n  client: QueueClient | SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\n\r\nlet receiver: Receiver | SessionReceiver;\r\n\r\nasync function beforeEachTest(\r\n  senderType: ClientType,\r\n  receiverType: ClientType,\r\n  useSessions?: boolean\r\n): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  await purge(receiverClient, useSessions ? TestMessage.sessionId : undefined);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n\r\n  receiver = useSessions\r\n    ? await receiverClient.getSessionReceiver({\r\n        sessionId: TestMessage.sessionId\r\n      })\r\n    : receiverClient.getReceiver();\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\ndescribe(\"Simple Send\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testSimpleSend(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    await senderClient.getSender().send(testMessages);\r\n    const msgs = await receiver.receiveBatch(1);\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(msgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessages.messageId, \"MessageId is different than expected\");\r\n    should.equal(msgs[0].deliveryCount, 0, \"DeliveryCount is different than expected\");\r\n\r\n    await msgs[0].complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSimpleSend();\r\n  });\r\n\r\n  it(\"Partitioned Topic: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSimpleSend();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSimpleSend();\r\n  });\r\n\r\n  it(\"Unpartitioned Topic: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSimpleSend();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSimpleSend(true);\r\n  });\r\n\r\n  it(\"Partitioned Topic with Sessions: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSimpleSend(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testSimpleSend(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Topic with Sessions: Simple Send\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testSimpleSend(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Schedule single message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testScheduleMessage(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const scheduleTime = new Date(Date.now() + 10000); // 10 seconds from now\r\n    await senderClient.getSender().scheduleMessage(scheduleTime, testMessages);\r\n\r\n    const msgs = await receiver.receiveBatch(1);\r\n    const msgEnqueueTime = msgs[0].enqueuedTimeUtc ? msgs[0].enqueuedTimeUtc.valueOf() : 0;\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      msgEnqueueTime - scheduleTime.valueOf() >= 0,\r\n      true,\r\n      \"Enqueued time must be greater than scheduled time\"\r\n    ); // checking received message enqueue time is greater or equal to the scheduled time.\r\n    should.equal(msgs[0].body, testMessages.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessages.messageId, \"MessageId is different than expected\");\r\n\r\n    await msgs[0].complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testScheduleMessage();\r\n  });\r\n\r\n  it(\"Partitioned Topic: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testScheduleMessage();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testScheduleMessage();\r\n  });\r\n\r\n  it(\"Unpartitioned Topic: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testScheduleMessage();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessage(true);\r\n  });\r\n\r\n  it(\"Partitioned Topic with Sessions: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessage(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessage(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Topic with Sessions: Schedule single message\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessage(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Schedule multiple messages\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  const messages: SendableMessageInfo[] = [\r\n    {\r\n      body: \"hello1\",\r\n      messageId: `test message ${Math.random()}`,\r\n      partitionKey: \"dummy\" // partitionKey is only for partitioned queue/subscrption, Unpartitioned queue/subscrption do not care about partitionKey.\r\n    },\r\n    {\r\n      body: \"hello2\",\r\n      messageId: `test message ${Math.random()}`,\r\n      partitionKey: \"dummy\" // partitionKey is only for partitioned queue/subscrption, Unpartitioned queue/subscrption do not care about partitionKey.\r\n    }\r\n  ];\r\n  const messageWithSessions: SendableMessageInfo[] = [\r\n    {\r\n      body: \"hello1\",\r\n      messageId: `test message ${Math.random()}`,\r\n      sessionId: TestMessage.sessionId\r\n    },\r\n    {\r\n      body: \"hello2\",\r\n      messageId: `test message ${Math.random()}`,\r\n      sessionId: TestMessage.sessionId\r\n    }\r\n  ];\r\n\r\n  async function testScheduleMessages(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? messageWithSessions : messages;\r\n    const scheduleTime = new Date(Date.now() + 10000); // 10 seconds from now\r\n    await senderClient.getSender().scheduleMessages(scheduleTime, testMessages);\r\n\r\n    const msgs = await receiver.receiveBatch(2);\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 2, \"Unexpected number of messages\");\r\n\r\n    const msgEnqueueTime1 = msgs[0].enqueuedTimeUtc ? msgs[0].enqueuedTimeUtc.valueOf() : 0;\r\n    const msgEnqueueTime2 = msgs[1].enqueuedTimeUtc ? msgs[1].enqueuedTimeUtc.valueOf() : 0;\r\n\r\n    // checking received message enqueue time is greater or equal to the scheduled time.\r\n    should.equal(\r\n      msgEnqueueTime1 - scheduleTime.valueOf() >= 0,\r\n      true,\r\n      \"msgEnqueueTime1 time must be greater than scheduled time\"\r\n    );\r\n    should.equal(\r\n      msgEnqueueTime2 - scheduleTime.valueOf() >= 0,\r\n      true,\r\n      \"msgEnqueueTime2 time must be greater than scheduled time\"\r\n    );\r\n    should.equal(\r\n      testMessages.some((x) => x.messageId === msgs[0].messageId),\r\n      true,\r\n      \"MessageId of first message is different than expected\"\r\n    );\r\n    should.equal(\r\n      testMessages.some((x) => x.messageId === msgs[1].messageId),\r\n      true,\r\n      \"MessageId of second message is different than expected\"\r\n    );\r\n\r\n    await msgs[0].complete();\r\n    await msgs[1].complete();\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Schedule multiple messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testScheduleMessages();\r\n  });\r\n\r\n  it(\"Partitioned Topic: Schedule multiple messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testScheduleMessages();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: Schedule multiple messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testScheduleMessages();\r\n  });\r\n\r\n  it(\"UnPartitioned Topic: Schedule multiple messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testScheduleMessages();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Schedule multiple messages\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessages(true);\r\n  });\r\n\r\n  it(\"Partitioned Topic with Sessions: Schedule multiple messages\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessages(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Schedule multiple messages\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessages(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Topic with Sessions: Schedule multiple messages\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testScheduleMessages(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Cancel single Scheduled message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testCancelScheduleMessage(useSessions?: boolean): Promise<void> {\r\n    const testMessages = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n    const scheduleTime = new Date(Date.now() + 30000); // 30 seconds from now as anything less gives inconsistent results for cancelling\r\n    const sequenceNumber = await senderClient\r\n      .getSender()\r\n      .scheduleMessage(scheduleTime, testMessages);\r\n\r\n    await delay(2000);\r\n\r\n    await senderClient.getSender().cancelScheduledMessage(sequenceNumber);\r\n\r\n    // Wait until we are sure we have passed the schedule time\r\n    await delay(30000);\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Cancel single Scheduled message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testCancelScheduleMessage();\r\n  });\r\n\r\n  it(\"Partitioned Topic: Cancel single Scheduled message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testCancelScheduleMessage();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Cancel single Scheduled message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testCancelScheduleMessage();\r\n  });\r\n\r\n  it(\"Unpartitioned Topic: Cancel single Scheduled message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testCancelScheduleMessage();\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Cancel single Scheduled message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessage(true);\r\n  });\r\n\r\n  it(\"Partitioned Topic with Sessions: Cancel single Scheduled message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessage(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Cancel single Scheduled message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessage(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Topic with Sessions: Cancel single Scheduled message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessage(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Cancel multiple Scheduled messages\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testCancelScheduleMessages(useSessions?: boolean): Promise<void> {\r\n    const testMessage = useSessions ? TestMessage.getSessionSample() : TestMessage.getSample();\r\n\r\n    const sender = senderClient.getSender();\r\n    const scheduleTime = new Date(Date.now() + 30000); // 30 seconds from now as anything less gives inconsistent results for cancelling\r\n    const sequenceNumber1 = await sender.scheduleMessage(scheduleTime, testMessage);\r\n    const sequenceNumber2 = await sender.scheduleMessage(scheduleTime, testMessage);\r\n\r\n    await delay(2000);\r\n\r\n    await sender.cancelScheduledMessages([sequenceNumber1, sequenceNumber2]);\r\n\r\n    // Wait until we are sure we have passed the schedule time\r\n    await delay(30000);\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Cancel scheduled messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testCancelScheduleMessages(false);\r\n  });\r\n\r\n  it(\"Partitioned Topic: Cancel scheduled messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testCancelScheduleMessages(false);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Cancel scheduled messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testCancelScheduleMessages(false);\r\n  });\r\n\r\n  it(\"Unpartitioned Topic: Cancel scheduled messages\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testCancelScheduleMessages(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with Sessions: Cancel scheduled messages\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessages(true);\r\n  });\r\n\r\n  it(\"Partitioned Topic with Sessions: Cancel scheduled messages\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessages(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue with Sessions: Cancel scheduled messages\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessages(true);\r\n  });\r\n\r\n  it(\"Unpartitioned Topic with Sessions: Cancel scheduled messages\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions,\r\n      true\r\n    );\r\n    await testCancelScheduleMessages(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Message validations\", function(): void {\r\n  const longString =\r\n    \"A very very very very very very very very very very very very very very very very very very very very very very very very very long string.\";\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function validationTest(msg: any, expectedErrorMsg: string): Promise<void> {\r\n    let actualErrorMsg = \"\";\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    const sender = senderClient.getSender();\r\n    await sender.send(msg).catch((err) => {\r\n      actualErrorMsg = err.message;\r\n    });\r\n    should.equal(actualErrorMsg, expectedErrorMsg, \"Error not thrown as expected\");\r\n  }\r\n\r\n  it(\"Error thrown when the 'msg' is undefined\", async function(): Promise<void> {\r\n    await validationTest(undefined!, \"data is required and it must be of type object.\");\r\n  });\r\n\r\n  it(\"Error thrown when the 'contentType' is not of type 'string'\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", contentType: 1 as any },\r\n      \"'contentType' must be of type 'string'.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'label' is not of type 'string'\", async function(): Promise<void> {\r\n    await validationTest({ body: \"\", label: 1 as any }, \"'label' must be of type 'string'.\");\r\n  });\r\n\r\n  it(\"Error thrown when the 'to' is not of type 'string'\", async function(): Promise<void> {\r\n    await validationTest({ body: \"\", to: 1 as any }, \"'to' must be of type 'string'.\");\r\n  });\r\n\r\n  it(\"Error thrown when the 'replyToSessionId' is not of type 'string'\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", replyToSessionId: 1 as any },\r\n      \"'replyToSessionId' must be of type 'string'.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'timeToLive' is not of type 'number'\", async function(): Promise<void> {\r\n    await validationTest(\r\n      { body: \"\", timeToLive: \"\" as any },\r\n      \"'timeToLive' must be of type 'number'.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'scheduledEnqueueTimeUtc' is not an instance of a valid 'Date'\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", scheduledEnqueueTimeUtc: new Date(\"foo\") },\r\n      \"'scheduledEnqueueTimeUtc' must be an instance of a valid 'Date'.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'scheduledEnqueueTimeUtc' is a number(not an instance of 'Date')\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", scheduledEnqueueTimeUtc: 1 as any },\r\n      \"'scheduledEnqueueTimeUtc' must be an instance of a valid 'Date'.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the length of 'partitionKey' is greater than 128 characters\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", partitionKey: longString },\r\n      \"'partitionKey' must be of type 'string' with a length less than 128 characters.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'partitionKey' is not of type 'string'\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", partitionKey: 1 as any },\r\n      \"'partitionKey' must be of type 'string' with a length less than 128 characters.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the length of 'viaPartitionKey' is greater than 128 characters.\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", viaPartitionKey: longString },\r\n      \"'viaPartitionKey' must be of type 'string' with a length less than 128 characters.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'viaPartitionKey' is not of type 'string'\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", viaPartitionKey: 1 as any },\r\n      \"'viaPartitionKey' must be of type 'string' with a length less than 128 characters.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'sessionId' is not of type 'string'\", async function(): Promise<void> {\r\n    await validationTest(\r\n      { body: \"\", sessionId: 1 as any },\r\n      \"'sessionId' must be of type 'string'.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the length of 'sessionId' is greater than 128 characters\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", sessionId: longString },\r\n      \"Length of 'sessionId' of type 'string' cannot be greater than 128 characters.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'messageId' is not a whole number.\", async function(): Promise<void> {\r\n    await validationTest(\r\n      { body: \"\", messageId: 1.5 },\r\n      \"'messageId' must be a whole integer. Decimal points are not allowed.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the length of 'messageId' is greater than 128 characters\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", messageId: longString },\r\n      \"Length of 'messageId' of type 'string' cannot be greater than 128 characters.\"\r\n    );\r\n  });\r\n\r\n  it(\"Error thrown when the 'correlationId' is not an instance of 'string' | 'number' | Buffer\", async function(): Promise<\r\n    void\r\n  > {\r\n    await validationTest(\r\n      { body: \"\", correlationId: [] as any },\r\n      \"'correlationId' must be of type 'string' | 'number' | Buffer.\"\r\n    );\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  delay,\r\n  ServiceBusMessage,\r\n  SendableMessageInfo\r\n} from \"../lib\";\r\n\r\nimport {\r\n  TestMessage,\r\n  getSenderReceiverClients,\r\n  ClientType,\r\n  purge,\r\n  checkWithTimeout\r\n} from \"./testUtils\";\r\n\r\nasync function testPeekMsgsLength(\r\n  client: QueueClient | SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\n\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\n\r\nlet unexpectedError: Error | undefined;\r\n\r\nfunction unExpectedErrorHandler(err: Error): void {\r\n  if (err) {\r\n    unexpectedError = err;\r\n  }\r\n}\r\n\r\nconst testSessionId2 = \"my-session2\";\r\n\r\nasync function beforeEachTest(senderType: ClientType, sessionType: ClientType): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, sessionType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  await purge(receiverClient, TestMessage.sessionId);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\ndescribe(\"SessionReceiver with invalid sessionId\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function test_batching(): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await senderClient.getSender().send(testMessage);\r\n\r\n    let receiver = await receiverClient.getSessionReceiver({\r\n      sessionId: \"non\" + TestMessage.sessionId\r\n    });\r\n    let msgs = await receiver.receiveBatch(1, 10);\r\n    should.equal(msgs.length, 0, \"Unexpected number of messages\");\r\n\r\n    await receiver.close();\r\n    receiver = await receiverClient.getSessionReceiver();\r\n    msgs = await receiver.receiveBatch(1);\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n    await msgs[0].complete();\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue - Batch Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await test_batching();\r\n  });\r\n\r\n  it(\"Partitioned Subscription - Batch Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await test_batching();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue - Batch Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await test_batching();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription - Batch Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await test_batching();\r\n  });\r\n\r\n  async function test_streaming(): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await senderClient.getSender().send(testMessage);\r\n\r\n    let receiver = await receiverClient.getSessionReceiver({\r\n      sessionId: \"non\" + TestMessage.sessionId\r\n    });\r\n    let receivedMsgs: ServiceBusMessage[] = [];\r\n    receiver.receive((msg: ServiceBusMessage) => {\r\n      receivedMsgs.push(msg);\r\n      return Promise.resolve();\r\n    }, unExpectedErrorHandler);\r\n    await delay(2000);\r\n    should.equal(receivedMsgs.length, 0, `Expected 0, received ${receivedMsgs.length} messages`);\r\n    await receiver.close();\r\n\r\n    receiver = await receiverClient.getSessionReceiver();\r\n    receivedMsgs = [];\r\n    receiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        should.equal(msg.body, testMessage.body, \"MessageBody is different than expected\");\r\n        should.equal(msg.messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n        return msg.complete().then(() => {\r\n          receivedMsgs.push(msg);\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete: false }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages`);\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue - Streaming Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await test_streaming();\r\n  });\r\n\r\n  it(\"Partitioned Subscription - Streaming Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await test_streaming();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue - Streaming Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await test_streaming();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription - Streaming Receiver: no messages received for invalid sessionId\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await test_streaming();\r\n  });\r\n});\r\n\r\ndescribe(\"SessionReceiver with no sessionId\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  const testMessagesWithDifferentSessionIds: SendableMessageInfo[] = [\r\n    {\r\n      body: \"hello1\",\r\n      messageId: `test message ${Math.random()}`,\r\n      sessionId: TestMessage.sessionId\r\n    },\r\n    {\r\n      body: \"hello2\",\r\n      messageId: `test message ${Math.random()}`,\r\n      sessionId: testSessionId2\r\n    }\r\n  ];\r\n\r\n  async function testComplete_batching(): Promise<void> {\r\n    const sender = senderClient.getSender();\r\n    await sender.send(testMessagesWithDifferentSessionIds[0]);\r\n    await sender.send(testMessagesWithDifferentSessionIds[1]);\r\n\r\n    let receiver = await receiverClient.getSessionReceiver();\r\n    let msgs = await receiver.receiveBatch(2);\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n\r\n    should.equal(\r\n      testMessagesWithDifferentSessionIds.some(\r\n        (x) =>\r\n          msgs[0].body === x.body &&\r\n          msgs[0].messageId === x.messageId &&\r\n          msgs[0].sessionId === x.sessionId\r\n      ),\r\n      true,\r\n      \"Received Message doesnt match any of the test messages\"\r\n    );\r\n    await msgs[0].complete();\r\n    await receiver.close();\r\n\r\n    receiver = await receiverClient.getSessionReceiver();\r\n    msgs = await receiver.receiveBatch(2);\r\n\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      testMessagesWithDifferentSessionIds.some(\r\n        (x) =>\r\n          msgs[0].body === x.body &&\r\n          msgs[0].messageId === x.messageId &&\r\n          msgs[0].sessionId === x.sessionId\r\n      ),\r\n      true,\r\n      \"Received Message doesnt match any of the test messages\"\r\n    );\r\n    await msgs[0].complete();\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: complete() removes message from random session\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testComplete_batching();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: complete() removes message from random session\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testComplete_batching();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: complete() removes message from random session\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testComplete_batching();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: complete() removes message from random session\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testComplete_batching();\r\n  });\r\n});\r\n\r\ndescribe(\"Session State\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testGetSetState(): Promise<void> {\r\n    const sender = senderClient.getSender();\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    let receiver = await receiverClient.getSessionReceiver();\r\n    let msgs = await receiver.receiveBatch(2);\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(msgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n    should.equal(msgs[0].sessionId, testMessage.sessionId, \"SessionId is different than expected\");\r\n\r\n    let testState = await receiver.getState();\r\n    should.equal(!!testState, false, \"SessionState is different than expected\");\r\n    await receiver.setState(\"new_state\");\r\n    testState = await receiver.getState();\r\n    should.equal(testState, \"new_state\", \"SessionState is different than expected\");\r\n\r\n    await receiver.close();\r\n\r\n    receiver = await receiverClient.getSessionReceiver();\r\n    msgs = await receiver.receiveBatch(2);\r\n    should.equal(Array.isArray(msgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(msgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(msgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(msgs[0].messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n    should.equal(msgs[0].sessionId, testMessage.sessionId, \"SessionId is different than expected\");\r\n\r\n    testState = await receiver.getState();\r\n    should.equal(testState, \"new_state\", \"SessionState is different than expected\");\r\n\r\n    await receiver.setState(\"\"); // clearing the session-state\r\n    await msgs[0].complete();\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n  it(\"Partitioned Queue - Testing getState and setState\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testGetSetState();\r\n  });\r\n  it(\"Partitioned Subscription - Testing getState and setState\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testGetSetState();\r\n  });\r\n  it(\"Unpartitioned Queue - Testing getState and setState\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testGetSetState();\r\n  });\r\n  it(\"Unpartitioned Subscription - Testing getState and setState\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await purge(receiverClient, testSessionId2);\r\n    await testGetSetState();\r\n  });\r\n});\r\n\r\ndescribe(\"Second SessionReceiver for same sessionId\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testSecondSessionReceiverForSameSession(): Promise<void> {\r\n    const sender = senderClient.getSender();\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    const firstReceiver = await receiverClient.getSessionReceiver();\r\n    should.equal(\r\n      firstReceiver.sessionId,\r\n      testMessage.sessionId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    let errorWasThrown = false;\r\n    try {\r\n      const secondReceiver = await receiverClient.getSessionReceiver({\r\n        sessionId: testMessage.sessionId\r\n      });\r\n      if (secondReceiver) {\r\n        chai.assert.fail(\"Second receiver for same session id should not have been created\");\r\n      }\r\n    } catch (error) {\r\n      errorWasThrown =\r\n        error &&\r\n        error.message ===\r\n          `Close the current session receiver for sessionId ${\r\n            testMessage.sessionId\r\n          } before using \"getSessionReceiver\" to create a new one for the same sessionId`;\r\n    }\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  }\r\n\r\n  it(\"Partitioned Queue - Second Session Receiver for same session id throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n\r\n    await testSecondSessionReceiverForSameSession();\r\n  });\r\n  it(\"Partitioned Subscription - Second Session Receiver for same session id throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n\r\n    await testSecondSessionReceiverForSameSession();\r\n  });\r\n  it(\"Unpartitioned Queue - Second Session Receiver for same session id throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n\r\n    await testSecondSessionReceiverForSameSession();\r\n  });\r\n  it(\"Unpartitioned Subscription - Second Session Receiver for same session id throws error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n\r\n    await testSecondSessionReceiverForSameSession();\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  ServiceBusMessage,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  delay\r\n} from \"../lib\";\r\n\r\nimport { DispositionType } from \"../lib/serviceBusMessage\";\r\n\r\nimport {\r\n  TestMessage,\r\n  getSenderReceiverClients,\r\n  ClientType,\r\n  purge,\r\n  checkWithTimeout\r\n} from \"./testUtils\";\r\nimport { Receiver } from \"../lib/receiver\";\r\nimport { Sender } from \"../lib/sender\";\r\n\r\nasync function testPeekMsgsLength(\r\n  client: QueueClient | SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\nlet sender: Sender;\r\nlet receiver: Receiver;\r\nlet deadLetterClient: QueueClient | SubscriptionClient;\r\nlet errorWasThrown: boolean;\r\nlet unexpectedError: Error | undefined;\r\nconst maxDeliveryCount = 10;\r\n\r\nfunction unExpectedErrorHandler(err: Error): void {\r\n  if (err) {\r\n    unexpectedError = err;\r\n  }\r\n}\r\n\r\nasync function beforeEachTest(senderType: ClientType, receiverType: ClientType): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  if (receiverClient instanceof QueueClient) {\r\n    deadLetterClient = ns.createQueueClient(Namespace.getDeadLetterQueuePath(receiverClient.entityPath));\r\n  }\r\n\r\n  if (receiverClient instanceof SubscriptionClient) {\r\n    deadLetterClient = ns.createSubscriptionClient(\r\n      Namespace.getDeadLetterTopicPath(senderClient.entityPath, receiverClient.subscriptionName),\r\n      receiverClient.subscriptionName\r\n    );\r\n  }\r\n\r\n  await purge(receiverClient);\r\n  await purge(deadLetterClient);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n  const peekedDeadMsgs = await deadLetterClient.peek();\r\n  if (peekedDeadMsgs.length) {\r\n    chai.assert.fail(\r\n      `Please use an empty dead letter ${receiverEntityType} for integration testing`\r\n    );\r\n  }\r\n\r\n  sender = senderClient.getSender();\r\n  receiver = receiverClient.getReceiver();\r\n\r\n  errorWasThrown = false;\r\n  unexpectedError = undefined;\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\ndescribe(\"Streaming - Misc Tests\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testAutoComplete(): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    receiver.receive((msg: ServiceBusMessage) => {\r\n      receivedMsgs.push(msg);\r\n      should.equal(msg.body, testMessage.body, \"MessageBody is different than expected\");\r\n      should.equal(msg.messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n\r\n      return Promise.resolve();\r\n    }, unExpectedErrorHandler);\r\n\r\n    const msgsCheck = await checkWithTimeout(\r\n      () => receivedMsgs.length === 1 && receivedMsgs[0].delivery.remote_settled === true\r\n    );\r\n\r\n    should.equal(\r\n      msgsCheck,\r\n      true,\r\n      receivedMsgs.length !== 1\r\n        ? `Expected 1, received ${receivedMsgs.length} messages`\r\n        : \"Message didnt get auto-completed in time\"\r\n    );\r\n    await receiver.close();\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: AutoComplete removes the message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testAutoComplete();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: AutoComplete removes the message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testAutoComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: AutoComplete removes the message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testAutoComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: AutoComplete removes the message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testAutoComplete();\r\n  });\r\n\r\n  async function testManualComplete(): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    receiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        receivedMsgs.push(msg);\r\n        should.equal(msg.body, testMessage.body, \"MessageBody is different than expected\");\r\n        should.equal(msg.messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n        return Promise.resolve();\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete: false }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages`);\r\n    await testPeekMsgsLength(receiverClient, 1);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n\r\n    await receivedMsgs[0].complete();\r\n    await receiver.close();\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Disabled autoComplete, no manual complete retains the message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testManualComplete();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Disabled autoComplete, no manual complete retains the message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testManualComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: Disabled autoComplete, no manual complete retains the message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testManualComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: Disabled autoComplete, no manual complete retains the message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testManualComplete();\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - Complete message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testComplete(autoComplete: boolean): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    receiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        should.equal(msg.body, testMessage.body, \"MessageBody is different than expected\");\r\n        should.equal(msg.messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n        return msg.complete().then(() => {\r\n          receivedMsgs.push(msg);\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages`);\r\n    await receiver.close();\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n  it(\"Partitioned Queue: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: complete() removes message\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with autoComplete: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with autoComplete: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue with autoComplete: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription with autoComplete: complete() removes message\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testComplete(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - Abandon message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testMultipleAbandons(): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n\r\n    let checkDeliveryCount = 0;\r\n\r\n    receiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        should.equal(\r\n          msg.deliveryCount,\r\n          checkDeliveryCount,\r\n          \"DeliveryCount is different than expected\"\r\n        );\r\n        return msg.abandon().then(() => {\r\n          checkDeliveryCount++;\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete: false }\r\n    );\r\n\r\n    const deliveryCountFlag = await checkWithTimeout(() => checkDeliveryCount === maxDeliveryCount);\r\n    should.equal(deliveryCountFlag, true, \"DeliveryCount is different than expected\");\r\n\r\n    await receiver.close();\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n\r\n    await testPeekMsgsLength(receiverClient, 0); // No messages in the queue\r\n\r\n    const deadLetterMsgs = await deadLetterClient.getReceiver().receiveBatch(1);\r\n    should.equal(Array.isArray(deadLetterMsgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].deliveryCount,\r\n      maxDeliveryCount,\r\n      \"DeliveryCount is different than expected\"\r\n    );\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await deadLetterMsgs[0].complete();\r\n\r\n    await testPeekMsgsLength(deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Multiple abandons until maxDeliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testMultipleAbandons();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Multiple abandons until maxDeliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testMultipleAbandons();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: Multiple abandons until maxDeliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testMultipleAbandons();\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: Multiple abandons until maxDeliveryCount\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testMultipleAbandons();\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - Defer message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testDefer(autoComplete: boolean): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n    let sequenceNum: any = 0;\r\n    receiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        return msg.defer().then(() => {\r\n          sequenceNum = msg.sequenceNumber;\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete }\r\n    );\r\n\r\n    const sequenceNumCheck = await checkWithTimeout(() => sequenceNum !== 0);\r\n    should.equal(\r\n      sequenceNumCheck,\r\n      true,\r\n      \"Either the message is not received or observed an unexpected SequenceNumber.\"\r\n    );\r\n\r\n    await receiver.close();\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n\r\n    receiver = receiverClient.getReceiver();\r\n    const deferredMsgs = await receiver.receiveDeferredMessages([sequenceNum]);\r\n    if (!deferredMsgs) {\r\n      throw \"No message received for sequence number\";\r\n    }\r\n\r\n    should.equal(deferredMsgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      deferredMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(deferredMsgs[0].deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n\r\n    await deferredMsgs[0].complete();\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: defer() moves message to deferred queue\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with autoComplete: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with autoComplete: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue with autoComplete: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription with autoComplete: defer() moves message to deferred queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDefer(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - Deadletter message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testDeadletter(autoComplete: boolean): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    receiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        return msg.deadLetter().then(() => {\r\n          receivedMsgs.push(msg);\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages`);\r\n\r\n    await receiver.close();\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    const deadLetterMsgs = await deadLetterClient.getReceiver().receiveBatch(1);\r\n    should.equal(Array.isArray(deadLetterMsgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await deadLetterMsgs[0].complete();\r\n    await testPeekMsgsLength(deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with autoComplete: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with autoComplete: deadLetter() moves message to deadletter\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue with autoComplete: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription with autoComplete: deadLetter() moves message to deadletter queue\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testDeadletter(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - Multiple Streaming Receivers\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testMultipleReceiveCalls(): Promise<void> {\r\n    receiver.receive((msg: ServiceBusMessage) => {\r\n      return msg.complete();\r\n    }, unExpectedErrorHandler);\r\n    await delay(1000);\r\n    try {\r\n      receiver.receive(\r\n        (msg: ServiceBusMessage) => {\r\n          return Promise.resolve();\r\n        },\r\n        (err: Error) => {\r\n          should.exist(err);\r\n        }\r\n      );\r\n    } catch (err) {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        !err.message.search(\"has already been created for the Subscription\"),\r\n        false,\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: Second Streaming Receiver call should fail if the first one is not stopped\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testMultipleReceiveCalls();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Second Streaming Receiver call should fail if the first one is not stopped\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testMultipleReceiveCalls();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: Second Streaming Receiver call should fail if the first one is not stopped\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testMultipleReceiveCalls();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: Second Streaming Receiver call should fail if the first one is not stopped\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testMultipleReceiveCalls();\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - Settle an already Settled message throws error\", () => {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  const testError = (err: Error) => {\r\n    should.equal(\r\n      err.message,\r\n      \"This message has been already settled.\",\r\n      \"ErrorMessage is different than expected\"\r\n    );\r\n    errorWasThrown = true;\r\n  };\r\n\r\n  async function testSettlement(operation: DispositionType): Promise<void> {\r\n    const testMessage = TestMessage.getSample();\r\n    await sender.send(testMessage);\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    receiver.receive((msg: ServiceBusMessage) => {\r\n      receivedMsgs.push(msg);\r\n      return Promise.resolve();\r\n    }, unExpectedErrorHandler);\r\n\r\n    const msgsCheck = await checkWithTimeout(\r\n      () => receivedMsgs.length === 1 && receivedMsgs[0].delivery.remote_settled === true\r\n    );\r\n    should.equal(\r\n      msgsCheck,\r\n      true,\r\n      receivedMsgs.length !== 1\r\n        ? `Expected 1, received ${receivedMsgs.length} messages`\r\n        : \"Message didnt get auto-completed in time\"\r\n    );\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    if (operation === DispositionType.complete) {\r\n      await receivedMsgs[0].complete().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.abandon) {\r\n      await receivedMsgs[0].abandon().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.deadletter) {\r\n      await receivedMsgs[0].deadLetter().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.defer) {\r\n      await receivedMsgs[0].defer().catch((err) => testError(err));\r\n    }\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: complete() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"Partitioned Queue: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: abandon() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"Partitioned Queue: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: defer() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"Partitioned Queue: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: deadLetter() throws error\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - User Error\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testUserError(): Promise<void> {\r\n    await sender.send(TestMessage.getSample());\r\n    const errorMessage = \"Will we see this error message?\";\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    receiver.receive(async (msg: ServiceBusMessage) => {\r\n      await msg.complete().then(() => {\r\n        receivedMsgs.push(msg);\r\n      });\r\n      throw new Error(errorMessage);\r\n    }, unExpectedErrorHandler);\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages.`);\r\n    await receiver.close();\r\n\r\n    should.equal(\r\n      unexpectedError && unexpectedError.message,\r\n      errorMessage,\r\n      \"User error did not surface.\"\r\n    );\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: onError handler is called for user error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testUserError();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: onError handler is called for user error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testUserError();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: onError handler is called for user error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testUserError();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: onError handler is called for user error\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testUserError();\r\n  });\r\n});\r\n\r\ndescribe(\"Streaming - maxConcurrentCalls\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testConcurrency(maxConcurrentCalls?: number): Promise<void> {\r\n    const testMessages = [TestMessage.getSample(), TestMessage.getSample()];\r\n    await sender.sendBatch(testMessages);\r\n\r\n    const settledMsgs: ServiceBusMessage[] = [];\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n\r\n    receiver.receive(\r\n      async (msg: ServiceBusMessage) => {\r\n        if (receivedMsgs.length === 1) {\r\n          if ((!maxConcurrentCalls || maxConcurrentCalls === 1) && settledMsgs.length === 0) {\r\n            throw new Error(\r\n              \"onMessage for the second message should not have been called before the first message got settled\"\r\n            );\r\n          }\r\n        } else {\r\n          if (maxConcurrentCalls && maxConcurrentCalls > 1 && settledMsgs.length !== 0) {\r\n            throw new Error(\r\n              \"onMessage for the second message should have been called before the first message got settled\"\r\n            );\r\n          }\r\n        }\r\n\r\n        receivedMsgs.push(msg);\r\n        await delay(2000);\r\n        await msg.complete().then(() => {\r\n          settledMsgs.push(msg);\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      maxConcurrentCalls ? { maxConcurrentCalls } : {}\r\n    );\r\n\r\n    await checkWithTimeout(() => settledMsgs.length === 2);\r\n    await receiver.close();\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(settledMsgs.length, 2, `Expected 2, received ${settledMsgs.length} messages.`);\r\n  }\r\n\r\n  it(\"Partitioned Queue: no maxConcurrentCalls passed\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 1 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testConcurrency(1);\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 2 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    await testConcurrency(2);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: no maxConcurrentCalls passed\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 1 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testConcurrency(1);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 2 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedQueue, ClientType.UnpartitionedQueue);\r\n    await testConcurrency(2);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: no maxConcurrentCalls passed\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 1 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testConcurrency(1);\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 2 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedTopic, ClientType.PartitionedSubscription);\r\n    await testConcurrency(2);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: no maxConcurrentCalls passed\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 1 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testConcurrency(1);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 2 for maxConcurrentCalls\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.UnpartitionedTopic, ClientType.UnpartitionedSubscription);\r\n    await testConcurrency(2);\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  QueueClient,\r\n  ServiceBusMessage,\r\n  TopicClient,\r\n  SubscriptionClient,\r\n  delay\r\n} from \"../lib\";\r\n\r\nimport { DispositionType } from \"../lib/serviceBusMessage\";\r\n\r\nimport {\r\n  TestMessage,\r\n  getSenderReceiverClients,\r\n  ClientType,\r\n  purge,\r\n  checkWithTimeout\r\n} from \"./testUtils\";\r\nimport { Sender } from \"../lib/sender\";\r\nimport { SessionReceiver } from \"../lib/receiver\";\r\n\r\nasync function testPeekMsgsLength(\r\n  client: QueueClient | SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\n\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\nlet deadLetterClient: QueueClient | SubscriptionClient;\r\nlet sessionReceiver: SessionReceiver;\r\nlet sender: Sender;\r\nlet errorWasThrown: boolean;\r\nlet unexpectedError: Error | undefined;\r\n\r\nfunction unExpectedErrorHandler(err: Error): void {\r\n  if (err) {\r\n    unexpectedError = err;\r\n  }\r\n}\r\n\r\nasync function beforeEachTest(senderType: ClientType, receiverType: ClientType): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n\r\n  sender = senderClient.getSender();\r\n\r\n  if (receiverClient instanceof QueueClient) {\r\n    deadLetterClient = ns.createQueueClient(\r\n      Namespace.getDeadLetterQueuePath(receiverClient.entityPath)\r\n    );\r\n  }\r\n\r\n  if (receiverClient instanceof SubscriptionClient) {\r\n    deadLetterClient = ns.createSubscriptionClient(\r\n      Namespace.getDeadLetterTopicPath(senderClient.entityPath, receiverClient.subscriptionName),\r\n      receiverClient.subscriptionName\r\n    );\r\n  }\r\n\r\n  await purge(receiverClient, TestMessage.sessionId);\r\n  await purge(deadLetterClient);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n\r\n  sessionReceiver = await receiverClient.getSessionReceiver({\r\n    sessionId: TestMessage.sessionId\r\n  });\r\n\r\n  errorWasThrown = false;\r\n  unexpectedError = undefined;\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\n\r\ndescribe(\"Sessions Streaming - Misc Tests\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testAutoComplete(): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    sessionReceiver.receive((msg: ServiceBusMessage) => {\r\n      receivedMsgs.push(msg);\r\n      should.equal(msg.body, testMessage.body, \"MessageBody is different than expected\");\r\n      should.equal(msg.messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n      return Promise.resolve();\r\n    }, unExpectedErrorHandler);\r\n\r\n    const msgsCheck = await checkWithTimeout(\r\n      () => receivedMsgs.length === 1 && receivedMsgs[0].delivery.remote_settled === true\r\n    );\r\n    should.equal(\r\n      msgsCheck,\r\n      true,\r\n      receivedMsgs.length !== 1\r\n        ? `Expected 1, received ${receivedMsgs.length} messages`\r\n        : \"Message didnt get auto-completed in time\"\r\n    );\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: AutoComplete removes the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testAutoComplete();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: AutoComplete removes the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testAutoComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: AutoComplete removes the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testAutoComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: AutoComplete removes the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testAutoComplete();\r\n  });\r\n\r\n  async function testManualComplete(): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    sessionReceiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        receivedMsgs.push(msg);\r\n        should.equal(msg.body, testMessage.body, \"MessageBody is different than expected\");\r\n        should.equal(msg.messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n        return Promise.resolve();\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete: false }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages`);\r\n\r\n    await testPeekMsgsLength(receiverClient, 1);\r\n\r\n    await receivedMsgs[0].complete();\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: Disabled autoComplete, no manual complete retains the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testManualComplete();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Disabled autoComplete, no manual complete retains the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testManualComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: Disabled autoComplete, no manual complete retains the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testManualComplete();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: Disabled autoComplete, no manual complete retains the message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testManualComplete();\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - Complete message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testComplete(autoComplete: boolean): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    sessionReceiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        should.equal(msg.body, testMessage.body, \"MessageBody is different than expected\");\r\n        should.equal(msg.messageId, testMessage.messageId, \"MessageId is different than expected\");\r\n        return msg.complete().then(() => {\r\n          receivedMsgs.push(msg);\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages`);\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n  it(\"Partitioned Queue: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testComplete(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with autoComplete: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with autoComplete: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue with autoComplete: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testComplete(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription with autoComplete: complete() removes message(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testComplete(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - Abandon message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testAbandon(autoComplete: boolean): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n    let abandonFlag = 0;\r\n    await sessionReceiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        return msg.abandon().then(() => {\r\n          abandonFlag = 1;\r\n          if (sessionReceiver.isReceivingMessages()) {\r\n            return sessionReceiver.close();\r\n          }\r\n          return Promise.resolve();\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete }\r\n    );\r\n\r\n    const msgAbandonCheck = await checkWithTimeout(() => abandonFlag === 1);\r\n    should.equal(msgAbandonCheck, true, \"Abandoning the message results in a failure\");\r\n\r\n    if (sessionReceiver.isReceivingMessages()) {\r\n      await sessionReceiver.close();\r\n    }\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    sessionReceiver = await receiverClient.getSessionReceiver({\r\n      sessionId: TestMessage.sessionId\r\n    });\r\n    const receivedMsgs = await sessionReceiver.receiveBatch(1);\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(receivedMsgs[0].deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n    await receivedMsgs[0].complete();\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n  it(\"Partitioned Queue: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testAbandon(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testAbandon(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testAbandon(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testAbandon(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with autoComplete: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with autoComplete: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue with autoComplete: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription with autoComplete: abandon() retains message with incremented deliveryCount(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testAbandon(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - Defer message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testDefer(autoComplete: boolean): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    let sequenceNum: any = 0;\r\n    await sessionReceiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        return msg.defer().then(() => {\r\n          sequenceNum = msg.sequenceNumber;\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete }\r\n    );\r\n\r\n    const sequenceNumCheck = await checkWithTimeout(() => sequenceNum !== 0);\r\n    should.equal(\r\n      sequenceNumCheck,\r\n      true,\r\n      \"Either the message is not received or observed an unexpected SequenceNumber.\"\r\n    );\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n\r\n    const deferredMsg = await sessionReceiver.receiveDeferredMessage(sequenceNum);\r\n    if (!deferredMsg) {\r\n      throw \"No message received for sequence number\";\r\n    }\r\n\r\n    should.equal(deferredMsg.body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      deferredMsg.messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n    should.equal(deferredMsg.deliveryCount, 1, \"DeliveryCount is different than expected\");\r\n\r\n    await deferredMsg.complete();\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n  }\r\n  it(\"Partitioned Queue: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testDefer(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with autoComplete: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with autoComplete: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue with autoComplete: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testDefer(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription with autoComplete: defer() moves message to deferred queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testDefer(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - Deadletter message\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testDeadletter(autoComplete: boolean): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    let msgCount = 0;\r\n    await sessionReceiver.receive(\r\n      (msg: ServiceBusMessage) => {\r\n        return msg.deadLetter().then(() => {\r\n          msgCount++;\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      { autoComplete }\r\n    );\r\n\r\n    const msgsCheck = await checkWithTimeout(() => msgCount === 1);\r\n    should.equal(msgsCheck, true, `Expected 1, received ${msgCount} messages`);\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(msgCount, 1, \"Unexpected number of messages\");\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    const deadLetterMsgs = await deadLetterClient.getReceiver().receiveBatch(1);\r\n    should.equal(Array.isArray(deadLetterMsgs), true, \"`ReceivedMessages` is not an array\");\r\n    should.equal(deadLetterMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(\r\n      deadLetterMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await deadLetterMsgs[0].complete();\r\n    await testPeekMsgsLength(deadLetterClient, 0);\r\n  }\r\n\r\n  it(\"Partitioned Queue: deadLetter() moves message to deadletter queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: deadLetter() moves message to deadletter queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: deadLetter() moves message to deadletter queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: deadLetter() moves message to deadletter queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testDeadletter(false);\r\n  });\r\n\r\n  it(\"Partitioned Queue with autoComplete: deadLetter() moves message to deadletter queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"Partitioned Subscription with autoComplete: deadLetter() moves message to deadletter(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue with autoComplete: deadLetter() moves message to deadletter queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription with autoComplete: deadLetter() moves message to deadletter queue(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testDeadletter(true);\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - Multiple Streaming Receivers\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testMultipleReceiveCalls(): Promise<void> {\r\n    await sessionReceiver.receive((msg: ServiceBusMessage) => {\r\n      return msg.complete();\r\n    }, unExpectedErrorHandler);\r\n    await delay(5000);\r\n    try {\r\n      await sessionReceiver.receive(\r\n        (msg: ServiceBusMessage) => {\r\n          return Promise.resolve();\r\n        },\r\n        (err: Error) => {\r\n          should.exist(err);\r\n        }\r\n      );\r\n    } catch (err) {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        !err.message.search(\"has already been created for the Subscription\"),\r\n        false,\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: Second Streaming Receiver call should fail if the first one is not stopped(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testMultipleReceiveCalls();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: Second Streaming Receiver call should fail if the first one is not stopped(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testMultipleReceiveCalls();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: Second Streaming Receiver call should fail if the first one is not stopped(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testMultipleReceiveCalls();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: Second Streaming Receiver call should fail if the first one is not stopped(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testMultipleReceiveCalls();\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - Settle an already Settled message throws error\", () => {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  const testError = (err: Error) => {\r\n    should.equal(\r\n      err.message,\r\n      \"This message has been already settled.\",\r\n      \"ErrorMessage is different than expected\"\r\n    );\r\n    errorWasThrown = true;\r\n  };\r\n\r\n  async function testSettlement(operation: DispositionType): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    sessionReceiver.receive((msg: ServiceBusMessage) => {\r\n      receivedMsgs.push(msg);\r\n      return Promise.resolve();\r\n    }, unExpectedErrorHandler);\r\n\r\n    const msgsCheck = await checkWithTimeout(\r\n      () => receivedMsgs.length === 1 && receivedMsgs[0].delivery.remote_settled === true\r\n    );\r\n    should.equal(\r\n      msgsCheck,\r\n      true,\r\n      receivedMsgs.length !== 1\r\n        ? `Expected 1, received ${receivedMsgs.length} messages`\r\n        : \"Message didnt get auto-completed in time\"\r\n    );\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n    should.equal(receivedMsgs[0].body, testMessage.body, \"MessageBody is different than expected\");\r\n    should.equal(\r\n      receivedMsgs[0].messageId,\r\n      testMessage.messageId,\r\n      \"MessageId is different than expected\"\r\n    );\r\n\r\n    await testPeekMsgsLength(receiverClient, 0);\r\n\r\n    if (operation === DispositionType.complete) {\r\n      await receivedMsgs[0].complete().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.abandon) {\r\n      await receivedMsgs[0].abandon().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.deadletter) {\r\n      await receivedMsgs[0].deadLetter().catch((err) => testError(err));\r\n    } else if (operation === DispositionType.defer) {\r\n      await receivedMsgs[0].defer().catch((err) => testError(err));\r\n    }\r\n\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: complete() throws error(with sessions)\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: complete() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: complete() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: complete() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.complete);\r\n  });\r\n\r\n  it(\"Partitioned Queue: abandon() throws error(with sessions)\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: abandon() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: abandon() throws error(with sessions)\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: abandon() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.abandon);\r\n  });\r\n\r\n  it(\"Partitioned Queue: defer() throws error(with sessions)\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: defer() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: defer() throws error(with sessions)\", async function(): Promise<void> {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: defer() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.defer);\r\n  });\r\n\r\n  it(\"Partitioned Queue: deadLetter() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"Partitioned Subscription: deadLetter() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: deadLetter() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: deadLetter() throws error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testSettlement(DispositionType.deadletter);\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - User Error\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testUserError(): Promise<void> {\r\n    const testMessage = TestMessage.getSessionSample();\r\n    await sender.send(testMessage);\r\n    const errorMessage = \"Will we see this error message?\";\r\n\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n    sessionReceiver.receive(async (msg: ServiceBusMessage) => {\r\n      await msg.complete().then(() => {\r\n        receivedMsgs.push(msg);\r\n      });\r\n      throw new Error(errorMessage);\r\n    }, unExpectedErrorHandler);\r\n\r\n    const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === 1);\r\n\r\n    should.equal(msgsCheck, true, `Expected 1, received ${receivedMsgs.length} messages.`);\r\n    await sessionReceiver.close();\r\n\r\n    should.equal(\r\n      unexpectedError && unexpectedError.message,\r\n      errorMessage,\r\n      \"User error did not surface.\"\r\n    );\r\n    should.equal(receivedMsgs.length, 1, \"Unexpected number of messages\");\r\n  }\r\n\r\n  it(\"Partitioned Queue: onError handler is called for user error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testUserError();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: onError handler is called for user error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testUserError();\r\n  });\r\n\r\n  it(\"UnPartitioned Queue: onError handler is called for user error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testUserError();\r\n  });\r\n\r\n  it(\"UnPartitioned Subscription: onError handler is called for user error(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testUserError();\r\n  });\r\n});\r\n\r\ndescribe(\"Sessions Streaming - maxConcurrentCalls\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function testConcurrency(maxConcurrentCalls?: number): Promise<void> {\r\n    if (\r\n      typeof maxConcurrentCalls === \"number\" &&\r\n      (maxConcurrentCalls < 1 || maxConcurrentCalls > 2)\r\n    ) {\r\n      chai.assert.fail(\r\n        \"Sorry, the tests here only support cases when maxConcurrentCalls is set to 1 or 2\"\r\n      );\r\n    }\r\n\r\n    const testMessages = [TestMessage.getSessionSample(), TestMessage.getSessionSample()];\r\n    await sender.sendBatch(testMessages);\r\n\r\n    const settledMsgs: ServiceBusMessage[] = [];\r\n    const receivedMsgs: ServiceBusMessage[] = [];\r\n\r\n    sessionReceiver.receive(\r\n      async (msg: ServiceBusMessage) => {\r\n        if (receivedMsgs.length === 1) {\r\n          if ((!maxConcurrentCalls || maxConcurrentCalls === 1) && settledMsgs.length === 0) {\r\n            throw new Error(\r\n              \"onMessage for the second message should not have been called before the first message got settled\"\r\n            );\r\n          }\r\n        } else {\r\n          if (maxConcurrentCalls === 2 && settledMsgs.length !== 0) {\r\n            throw new Error(\r\n              \"onMessage for the second message should have been called before the first message got settled\"\r\n            );\r\n          }\r\n        }\r\n\r\n        receivedMsgs.push(msg);\r\n        await delay(2000);\r\n        await msg.complete().then(() => {\r\n          settledMsgs.push(msg);\r\n        });\r\n      },\r\n      unExpectedErrorHandler,\r\n      maxConcurrentCalls ? { maxConcurrentCalls } : {}\r\n    );\r\n\r\n    await checkWithTimeout(() => settledMsgs.length === 2);\r\n    await sessionReceiver.close();\r\n\r\n    should.equal(unexpectedError, undefined, unexpectedError && unexpectedError.message);\r\n    should.equal(settledMsgs.length, 2, `Expected 2, received ${settledMsgs.length} messages.`);\r\n  }\r\n\r\n  it(\"Partitioned Queue: no maxConcurrentCalls passed(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 1 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 2 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedQueueWithSessions,\r\n      ClientType.PartitionedQueueWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: no maxConcurrentCalls passed(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 1 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 2 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedQueueWithSessions,\r\n      ClientType.UnpartitionedQueueWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Partitioned Subscription: no maxConcurrentCalls passed(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 1 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testConcurrency(1);\r\n  });\r\n\r\n  it(\"Partitioned Queue: pass 2 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.PartitionedTopicWithSessions,\r\n      ClientType.PartitionedSubscriptionWithSessions\r\n    );\r\n    await testConcurrency(2);\r\n  });\r\n\r\n  it(\"Unpartitioned Subscription: no maxConcurrentCalls passed(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testConcurrency();\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 1 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testConcurrency(1);\r\n  });\r\n\r\n  it(\"Unpartitioned Queue: pass 2 for maxConcurrentCalls(with sessions)\", async function(): Promise<\r\n    void\r\n  > {\r\n    await beforeEachTest(\r\n      ClientType.UnpartitionedTopicWithSessions,\r\n      ClientType.UnpartitionedSubscriptionWithSessions\r\n    );\r\n    await testConcurrency(2);\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nconst should = chai.should();\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport {\r\n  Namespace,\r\n  SubscriptionClient,\r\n  ServiceBusMessage,\r\n  TopicClient,\r\n  SendableMessageInfo,\r\n  CorrelationFilter\r\n} from \"../lib\";\r\nimport { getSenderReceiverClients, ClientType, purge, checkWithTimeout } from \"./testUtils\";\r\n\r\n// We need to remove rules before adding one because otherwise the existing default rule will let in all messages.\r\nasync function removeAllRules(client: SubscriptionClient): Promise<void> {\r\n  const rules = await client.getRules();\r\n  for (let i = 0; i < rules.length; i++) {\r\n    const rule = rules[i];\r\n    await client.removeRule(rule.name);\r\n  }\r\n}\r\n\r\nasync function testPeekMsgsLength(\r\n  client: SubscriptionClient,\r\n  expectedPeekLength: number\r\n): Promise<void> {\r\n  const peekedMsgs = await client.peek(expectedPeekLength + 1);\r\n  should.equal(\r\n    peekedMsgs.length,\r\n    expectedPeekLength,\r\n    \"Unexpected number of msgs found when peeking\"\r\n  );\r\n}\r\n\r\nlet ns: Namespace;\r\nlet subscriptionClient: SubscriptionClient;\r\nlet topicClient: TopicClient;\r\n\r\nasync function beforeEachTest(receiverType: ClientType): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, ClientType.TopicFilterTestTopic, receiverType);\r\n  topicClient = clients.senderClient as TopicClient;\r\n  subscriptionClient = clients.receiverClient as SubscriptionClient;\r\n\r\n  await purge(subscriptionClient);\r\n  const peekedSubscriptionMsg = await subscriptionClient.peek();\r\n  if (peekedSubscriptionMsg.length) {\r\n    chai.assert.fail(\"Please use an empty Subscription for integration testing\");\r\n  }\r\n  if (receiverType === ClientType.TopicFilterTestSubscription) {\r\n    await removeAllRules(subscriptionClient);\r\n  }\r\n}\r\n\r\nasync function afterEachTest(clearRules: boolean = true): Promise<void> {\r\n  if (clearRules) {\r\n    await removeAllRules(subscriptionClient);\r\n    await subscriptionClient.addRule(\"DefaultFilter\", true);\r\n\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"DefaultFilter\", \"RuleName is different than expected\");\r\n  }\r\n  await ns.close();\r\n}\r\n\r\nconst data = [\r\n  { Color: \"blue\", Quantity: 5, Priority: \"low\" },\r\n  { Color: \"red\", Quantity: 10, Priority: \"high\" },\r\n  { Color: \"yellow\", Quantity: 5, Priority: \"low\" },\r\n  { Color: \"blue\", Quantity: 10, Priority: \"low\" },\r\n  { Color: \"blue\", Quantity: 5, Priority: \"high\" },\r\n  { Color: \"blue\", Quantity: 10, Priority: \"low\" },\r\n  { Color: \"red\", Quantity: 5, Priority: \"low\" },\r\n  { Color: \"red\", Quantity: 10, Priority: \"low\" },\r\n  { Color: \"red\", Quantity: 5, Priority: \"low\" },\r\n  { Color: \"yellow\", Quantity: 10, Priority: \"high\" },\r\n  { Color: \"yellow\", Quantity: 5, Priority: \"low\" },\r\n  { Color: \"yellow\", Quantity: 10, Priority: \"low\" }\r\n];\r\n\r\nasync function sendOrders(): Promise<void> {\r\n  const sender = topicClient.getSender();\r\n  for (let index = 0; index < data.length; index++) {\r\n    const element = data[index];\r\n    const message: SendableMessageInfo = {\r\n      body: \"\",\r\n      messageId: `messageId: ${Math.random()}`,\r\n      correlationId: `${element.Priority}`,\r\n      label: `${element.Color}`,\r\n      userProperties: {\r\n        color: `${element.Color}`,\r\n        quantity: element.Quantity,\r\n        priority: `${element.Priority}`\r\n      },\r\n      partitionKey: \"dummy\" // Ensures all messages go to same parition to make peek work reliably\r\n    };\r\n    await sender.send(message);\r\n  }\r\n}\r\n\r\nasync function receiveOrders(\r\n  client: SubscriptionClient,\r\n  expectedMessageCount: number\r\n): Promise<ServiceBusMessage[]> {\r\n  let errorFromErrorHandler: Error | undefined;\r\n  const receivedMsgs: ServiceBusMessage[] = [];\r\n  const receiver = client.getReceiver();\r\n  receiver.receive(\r\n    (msg: ServiceBusMessage) => {\r\n      return msg.complete().then(() => {\r\n        receivedMsgs.push(msg);\r\n      });\r\n    },\r\n    (err: Error) => {\r\n      if (err) {\r\n        errorFromErrorHandler = err;\r\n      }\r\n    }\r\n  );\r\n\r\n  const msgsCheck = await checkWithTimeout(() => receivedMsgs.length === expectedMessageCount);\r\n  should.equal(\r\n    msgsCheck,\r\n    true,\r\n    `Expected ${expectedMessageCount}, but received ${receivedMsgs.length} messages`\r\n  );\r\n\r\n  await receiver.close();\r\n  should.equal(\r\n    errorFromErrorHandler,\r\n    undefined,\r\n    errorFromErrorHandler && errorFromErrorHandler.message\r\n  );\r\n  should.equal(receivedMsgs.length, expectedMessageCount, \"Unexpected number of messages\");\r\n\r\n  return receivedMsgs;\r\n}\r\n\r\nasync function addRules(\r\n  ruleName: string,\r\n  filter: boolean | string | CorrelationFilter,\r\n  sqlRuleActionExpression?: string\r\n): Promise<void> {\r\n  await subscriptionClient.addRule(ruleName, filter, sqlRuleActionExpression);\r\n\r\n  const rules = await subscriptionClient.getRules();\r\n  should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n  should.equal(rules[0].name, ruleName, \"Expected Rule not found\");\r\n\r\n  if (sqlRuleActionExpression) {\r\n    should.equal(\r\n      rules[0].action!.expression,\r\n      sqlRuleActionExpression,\r\n      \"Action not set on the rule.\"\r\n    );\r\n  }\r\n}\r\n\r\ndescribe(\"addRule()\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.TopicFilterTestSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function BooleanFilter(bool: boolean): Promise<void> {\r\n    await subscriptionClient.addRule(\"BooleanFilter\", bool);\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"BooleanFilter\", \"RuleName is different than expected\");\r\n  }\r\n\r\n  it(\"Add True Filter\", async function(): Promise<void> {\r\n    await BooleanFilter(true);\r\n  });\r\n\r\n  it(\"Add False Filter\", async function(): Promise<void> {\r\n    await BooleanFilter(false);\r\n  });\r\n\r\n  it(\"Add SQL filter\", async function(): Promise<void> {\r\n    await subscriptionClient.addRule(\r\n      \"Priority_1\",\r\n      \"(priority = 1 OR priority = 2) AND (sys.label LIKE '%String2')\"\r\n    );\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"Priority_1\", \"RuleName is different than expected\");\r\n  });\r\n\r\n  it(\"Add SQL filter and action\", async function(): Promise<void> {\r\n    await subscriptionClient.addRule(\r\n      \"Priority_1\",\r\n      \"(priority = 1 OR priority = 3) AND (sys.label LIKE '%String1')\",\r\n      \"SET sys.label = 'MessageX'\"\r\n    );\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"Priority_1\", \"RuleName is different than expected\");\r\n  });\r\n\r\n  it(\"Add Correlation filter\", async function(): Promise<void> {\r\n    await subscriptionClient.addRule(\"Correlationfilter\", {\r\n      label: \"red\",\r\n      correlationId: \"high\"\r\n    });\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"Correlationfilter\", \"RuleName is different than expected\");\r\n  });\r\n\r\n  it(\"Add rule with a name which matches with existing rule\", async function(): Promise<void> {\r\n    await subscriptionClient.addRule(\"Priority_1\", \"priority = 1\");\r\n    let errorWasThrown = false;\r\n    try {\r\n      await subscriptionClient.addRule(\"Priority_1\", \"priority = 2\");\r\n    } catch (error) {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        !error.message.search(\"Priority_1' already exists.\"),\r\n        false,\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n      should.equal(\r\n        error.name,\r\n        \"MessagingEntityAlreadyExistsError\",\r\n        \"ErrorName is different than expected\"\r\n      );\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"Add rule with no name\", async function(): Promise<void> {\r\n    let errorWasThrown = false;\r\n    try {\r\n      await subscriptionClient.addRule(\"\", \"priority = 2\");\r\n    } catch (error) {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        !error.message.search(\"Rule name is missing\"),\r\n        false,\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n      should.equal(error.name, \"Error\", \"ErrorName is different than expected\");\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"Add rule with no filter\", async function(): Promise<void> {\r\n    let errorWasThrown = false;\r\n    try {\r\n      await subscriptionClient.addRule(\"Priority_1\", \"\");\r\n    } catch (error) {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        !error.message.search(\"Filter is missing\"),\r\n        false,\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n      should.equal(error.name, \"Error\", \"ErrorName is different than expected\");\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"Add rule with a Boolean filter whose input is not a Boolean, SQL expression or a Correlation filter\", async function(): Promise<\r\n    void\r\n  > {\r\n    let errorWasThrown = false;\r\n    try {\r\n      await subscriptionClient.addRule(\"Priority_2\", {});\r\n    } catch (error) {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        error.message,\r\n        \"Cannot add rule. Filter should be either a boolean, string or should have one of the Correlation filter properties.\"\r\n      );\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"Adding a rule with a Correlation filter, error for irrelevant properties\", async function(): Promise<\r\n    void\r\n  > {\r\n    let errorWasThrown = false;\r\n    const filter: any = {\r\n      correlationId: 1,\r\n      invalidProperty: 2\r\n    };\r\n    try {\r\n      await subscriptionClient.addRule(\"Priority_2\", filter);\r\n    } catch (error) {\r\n      errorWasThrown = true;\r\n      should.equal(\r\n        error.message,\r\n        'Cannot add rule. Given filter object has unexpected property \"invalidProperty\".'\r\n      );\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n});\r\n\r\ndescribe(\"removeRule()\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.TopicFilterTestSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Removing non existing rule on a subscription that doesnt have any rules should throw error\", async function(): Promise<\r\n    void\r\n  > {\r\n    let errorWasThrown = false;\r\n    try {\r\n      await subscriptionClient.removeRule(\"Priority_5\");\r\n    } catch (error) {\r\n      should.equal(\r\n        !error.message.search(\"Priority_5' could not be found\"),\r\n        false,\r\n        \"ErrorMessage is different than expected\"\r\n      );\r\n      should.equal(\r\n        error.name,\r\n        \"MessagingEntityNotFoundError\",\r\n        \"ErrorName is different than expected\"\r\n      );\r\n      errorWasThrown = true;\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n\r\n  it(\"Removing non existing rule on a subscription that has other rules should throw error\", async function(): Promise<\r\n    void\r\n  > {\r\n    let errorWasThrown = false;\r\n    try {\r\n      await subscriptionClient.addRule(\"Priority_1\", \"priority = 1\");\r\n      await subscriptionClient.removeRule(\"Priority_5\");\r\n    } catch (error) {\r\n      errorWasThrown = true;\r\n    }\r\n    should.equal(errorWasThrown, true, \"Error thrown flag must be true\");\r\n  });\r\n});\r\n\r\ndescribe(\"getRules()\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.TopicFilterTestSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Subscription with 0/1/multiple rules returns rules as expected\", async function(): Promise<\r\n    void\r\n  > {\r\n    let rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 0, \"Unexpected number of rules\");\r\n\r\n    const expr1 = \"(priority = 1)\";\r\n    await subscriptionClient.addRule(\"Priority_1\", expr1);\r\n    rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"Priority_1\", \"RuleName is different than expected\");\r\n    should.equal(\r\n      JSON.stringify(rules[0].filter),\r\n      JSON.stringify({ expression: expr1 }),\r\n      \"Filter-expression is different than expected\"\r\n    );\r\n\r\n    const expr2 = \"(priority = 1 OR priority = 3) AND (sys.label LIKE '%String1')\";\r\n    await subscriptionClient.addRule(\"Priority_2\", expr2);\r\n    rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 2, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"Priority_1\", \"RuleName is different than expected\");\r\n    should.equal(\r\n      JSON.stringify(rules[0].filter),\r\n      JSON.stringify({ expression: expr1 }),\r\n      \"Filter-expression is different than expected\"\r\n    );\r\n    should.equal(rules[1].name, \"Priority_2\", \"RuleName is different than expected\");\r\n    should.equal(\r\n      JSON.stringify(rules[1].filter),\r\n      JSON.stringify({ expression: expr2 }),\r\n      \"Filter-expression is different than expected\"\r\n    );\r\n  });\r\n\r\n  it(\"Rule with SQL filter and action returns expected filter and action expression\", async function(): Promise<\r\n    void\r\n  > {\r\n    await subscriptionClient.addRule(\r\n      \"Priority_1\",\r\n      \"(priority = 1 OR priority = 3) AND (sys.label LIKE '%String1')\",\r\n      \"SET sys.label = 'MessageX'\"\r\n    );\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules[0].name, \"Priority_1\", \"RuleName is different than expected\");\r\n  });\r\n\r\n  it(\"Rule with Correlation filter returns expected filter\", async function(): Promise<void> {\r\n    await subscriptionClient.addRule(\"Correlationfilter\", {\r\n      label: \"red\",\r\n      correlationId: \"high\"\r\n    });\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules[0].name, \"Correlationfilter\", \"RuleName is different than expected\");\r\n    const expectedFilter = {\r\n      correlationId: \"high\",\r\n      label: \"red\",\r\n      userProperties: []\r\n    };\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    rules.forEach((rule) => {\r\n      should.equal(\r\n        (<CorrelationFilter>rule.filter).correlationId,\r\n        expectedFilter.correlationId,\r\n        \"MessageId is different than expected\"\r\n      );\r\n      should.equal(\r\n        (<CorrelationFilter>rule.filter).label,\r\n        expectedFilter.label,\r\n        \"Filter-label is different than expected\"\r\n      );\r\n      const userProperties = (<CorrelationFilter>rule.filter).userProperties;\r\n      should.equal(Array.isArray(userProperties), true, \"`ReceivedMessages` is not an array\");\r\n      should.equal(userProperties.length, 0, \"Unexpected number of messages\");\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"Default Rule - Send/Receive\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.TopicFilterTestDefaultSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest(false);\r\n  });\r\n\r\n  it(\"Default rule is returned for the subscription for which no rules were added\", async function(): Promise<\r\n    void\r\n  > {\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"$Default\", \"RuleName is different than expected\");\r\n  });\r\n\r\n  it(\"Subscription with default filter receives all messages\", async function(): Promise<void> {\r\n    await sendOrders();\r\n    await receiveOrders(subscriptionClient, data.length);\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n});\r\n\r\ndescribe(\"Boolean Filter - Send/Receive\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.TopicFilterTestSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function addFilterAndReceiveOrders(\r\n    bool: boolean,\r\n    client: SubscriptionClient,\r\n    expectedMessageCount: number\r\n  ): Promise<void> {\r\n    await subscriptionClient.addRule(\"BooleanFilter\", bool);\r\n    const rules = await subscriptionClient.getRules();\r\n    should.equal(rules.length, 1, \"Unexpected number of rules\");\r\n    should.equal(rules[0].name, \"BooleanFilter\", \"RuleName is different than expected\");\r\n\r\n    await sendOrders();\r\n    await receiveOrders(client, expectedMessageCount);\r\n    await testPeekMsgsLength(client, 0);\r\n  }\r\n\r\n  it(\"True boolean filter receives all messages\", async function(): Promise<void> {\r\n    await addFilterAndReceiveOrders(true, subscriptionClient, data.length);\r\n  });\r\n\r\n  it(\"False boolean filter does not receive any messages\", async function(): Promise<void> {\r\n    await addFilterAndReceiveOrders(false, subscriptionClient, 0);\r\n  });\r\n});\r\n\r\ndescribe(\"Sql Filter - Send/Receive\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.TopicFilterTestSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"SQL rule filter on the message properties\", async function(): Promise<void> {\r\n    await addRules(\"SQLMsgPropertyRule\", \"sys.label = 'red'\");\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"red\").length;\r\n    await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n\r\n  it(\"SQL rule filter on the custom properties\", async function(): Promise<void> {\r\n    await addRules(\"SQLCustomRule\", \"color = 'red'\");\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"red\").length;\r\n    await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n\r\n  it(\"SQL rule filter using AND operator \", async function(): Promise<void> {\r\n    await addRules(\"SqlRuleWithAND\", \"color = 'blue' and quantity = 10\");\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"blue\" && x.Quantity === 10).length;\r\n    await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n\r\n  it(\"SQL rule filter using OR operator \", async function(): Promise<void> {\r\n    await addRules(\"SqlRuleWithOR\", \"color = 'blue' OR quantity = 10\");\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"blue\" || x.Quantity === 10).length;\r\n    await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n\r\n  it(\"SQL rule filter with action with custom properties\", async function(): Promise<void> {\r\n    await addRules(\"SqlRuleWithAction\", \"color='blue'\", \"SET priority = 'High'\");\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"blue\").length;\r\n    const receivedMsgs = await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    if (receivedMsgs[0].userProperties) {\r\n      should.equal(\r\n        receivedMsgs[0].userProperties.priority,\r\n        \"High\",\r\n        \"Priority of the receivedMessage is different than expected\"\r\n      );\r\n    } else {\r\n      chai.assert.fail(\"Received message doesnt have user properties\");\r\n    }\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n\r\n  // Standard subscription : Update message properties in random order.\r\n  // Premium subscription : Update message properties only first time when you create new subscription.\r\n\r\n  /* it(\"SQL rule filter with action with message properties\", async function(): Promise<void> {\r\n    await addRules(\"SqlRuleWithAction\", \"color='blue'\", \"SET sys.label = 'color blue'\");\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"blue\").length;\r\n    const receivedMsgs = await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    if (receivedMsgs[0].userProperties) {\r\n      should.equal(receivedMsgs[0].userProperties.priority, \"High\",\r\n        \"Priority of the receivedMessage is different than expected\");\r\n    } else {\r\n      chai.assert.fail(\"Received message doesnt have user properties\");\r\n    }\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });*/\r\n});\r\n\r\ndescribe(\"Correlation Filter - Send/Receive\", function(): void {\r\n  beforeEach(async () => {\r\n    await beforeEachTest(ClientType.TopicFilterTestSubscription);\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  it(\"Correlation filter on the message properties\", async function(): Promise<void> {\r\n    await addRules(\"CorrelationMsgPropertyRule\", {\r\n      label: \"red\"\r\n    });\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"red\").length;\r\n    await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n\r\n  it(\"Correlation filter on the custom properties\", async function(): Promise<void> {\r\n    await addRules(\"CorrelationCustomRule\", {\r\n      userProperties: {\r\n        color: \"red\"\r\n      }\r\n    });\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"red\").length;\r\n    await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n\r\n  it(\"Correlation filter with SQL action\", async function(): Promise<void> {\r\n    await addRules(\r\n      \"CorrelationRuleWithAction\",\r\n      {\r\n        userProperties: {\r\n          color: \"blue\"\r\n        }\r\n      },\r\n      \"SET priority = 'High'\"\r\n    );\r\n\r\n    await sendOrders();\r\n    const dataLength = data.filter((x) => x.Color === \"blue\").length;\r\n    const receivedMsgs = await receiveOrders(subscriptionClient, dataLength);\r\n\r\n    if (receivedMsgs[0].userProperties) {\r\n      should.equal(\r\n        receivedMsgs[0].userProperties.priority,\r\n        \"High\",\r\n        \"Priority of the receivedMessage is different than expected\"\r\n      );\r\n    } else {\r\n      chai.assert.fail(\"Received message doesnt have user properties\");\r\n    }\r\n\r\n    await testPeekMsgsLength(subscriptionClient, 0);\r\n  });\r\n});\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport chai from \"chai\";\r\nimport chaiAsPromised from \"chai-as-promised\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\nchai.use(chaiAsPromised);\r\nimport { Namespace, QueueClient, TopicClient, SubscriptionClient, ReceiveMode } from \"../lib\";\r\n\r\nimport { TestMessage, getSenderReceiverClients, ClientType, purge } from \"./testUtils\";\r\nimport { Receiver, SessionReceiver } from \"../lib/receiver\";\r\nimport { Sender } from \"../lib/sender\";\r\nimport { delay } from \"rhea-promise\";\r\n\r\nlet ns: Namespace;\r\n\r\nlet senderClient: QueueClient | TopicClient;\r\nlet receiverClient: QueueClient | SubscriptionClient;\r\nlet deadLetterClient: QueueClient | SubscriptionClient;\r\nlet sender: Sender;\r\nlet receiver: Receiver | SessionReceiver;\r\n\r\nconst numberOfMessages = 11000;\r\n\r\nlet consecutiveZeroMessagesCount = 0;\r\nconst maxConsecutiveZeroMessagesCount = 100;\r\nlet totalMessagesPurged = 0;\r\nasync function beforeEachTest(\r\n  senderType: ClientType,\r\n  receiverType: ClientType,\r\n  useSessions?: boolean\r\n): Promise<void> {\r\n  // The tests in this file expect the env variables to contain the connection string and\r\n  // the names of empty queue/topic/subscription that are to be tested\r\n\r\n  if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n    throw new Error(\r\n      \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n    );\r\n  }\r\n\r\n  ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n  const clients = await getSenderReceiverClients(ns, senderType, receiverType);\r\n  senderClient = clients.senderClient;\r\n  receiverClient = clients.receiverClient;\r\n  if (receiverClient instanceof QueueClient) {\r\n    deadLetterClient = ns.createQueueClient(\r\n      Namespace.getDeadLetterQueuePath(receiverClient.entityPath)\r\n    );\r\n  }\r\n\r\n  if (receiverClient instanceof SubscriptionClient) {\r\n    deadLetterClient = ns.createSubscriptionClient(\r\n      Namespace.getDeadLetterTopicPath(senderClient.entityPath, receiverClient.subscriptionName),\r\n      receiverClient.subscriptionName\r\n    );\r\n  }\r\n\r\n  await purge(receiverClient, useSessions ? TestMessage.sessionId : undefined);\r\n  await purge(deadLetterClient);\r\n  const peekedMsgs = await receiverClient.peek();\r\n  const receiverEntityType = receiverClient instanceof QueueClient ? \"queue\" : \"topic\";\r\n  if (peekedMsgs.length) {\r\n    chai.assert.fail(`Please use an empty ${receiverEntityType} for integration testing`);\r\n  }\r\n  const peekedDeadMsgs = await deadLetterClient.peek();\r\n  if (peekedDeadMsgs.length) {\r\n    chai.assert.fail(\r\n      `Please use an empty dead letter ${receiverEntityType} for integration testing`\r\n    );\r\n  }\r\n\r\n  sender = senderClient.getSender();\r\n  receiver = receiverClient.getReceiver({ receiveMode: ReceiveMode.receiveAndDelete });\r\n}\r\n\r\nasync function afterEachTest(): Promise<void> {\r\n  await ns.close();\r\n}\r\ndescribe(\"User Issue 1466\", function(): void {\r\n  afterEach(async () => {\r\n    await afterEachTest();\r\n  });\r\n\r\n  async function purgeMessages(): Promise<void> {\r\n    let continueLoop = true;\r\n    const list: any[] = [];\r\n    for (let index = 0; index < numberOfMessages; index++) {\r\n      list.push(\"Message \" + index);\r\n    }\r\n    // let count = 0;\r\n    do {\r\n      // if (count === 2) {\r\n      //   break;\r\n      // }\r\n      // count++;\r\n      console.log(\"#################################################################\");\r\n      // receiver = receiverClient.getReceiver({ receiveMode: ReceiveMode.receiveAndDelete });\r\n      const messages = await receiver.receiveBatch(numberOfMessages / 10, 5);\r\n      messages.forEach((element: any) => {\r\n        list.splice(list.indexOf(element.body), 1);\r\n      });\r\n      const deletedMessagesCount = messages.length;\r\n      totalMessagesPurged += deletedMessagesCount;\r\n      console.log(\r\n        \"totalMessagesPurged = \" + totalMessagesPurged + \", yet to receive = \" + list.length\r\n      );\r\n      if (deletedMessagesCount === 0) {\r\n        consecutiveZeroMessagesCount++;\r\n        console.log(\"yet to receive = \" + list);\r\n        await delay(5000);\r\n        if (consecutiveZeroMessagesCount > maxConsecutiveZeroMessagesCount) {\r\n          continueLoop = false;\r\n        }\r\n      } else {\r\n        consecutiveZeroMessagesCount = 0;\r\n      }\r\n      // await delay(3000);\r\n      // await receiver.close();\r\n    } while (continueLoop);\r\n  }\r\n\r\n  it.only(\"User Issue 1466 - batch receiver\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    let batchMessages = [];\r\n    let index = 0;\r\n    for (index = 0; index < numberOfMessages; index++) {\r\n      if (index % (numberOfMessages / 10) === 0) {\r\n        console.log(`Sending ${index}`);\r\n        if (batchMessages.length > 0) await sender.sendBatch(batchMessages);\r\n        batchMessages = [];\r\n      }\r\n      batchMessages.push({ body: \"Message \" + index });\r\n      // await sender.send({ body: \"Message \" + index });\r\n    }\r\n    console.log(`Sending ${index}`);\r\n    await sender.sendBatch(batchMessages);\r\n    console.log(\"Sending Done, waiting for 10 seconds...\");\r\n    await delay(10000);\r\n    await purgeMessages();\r\n  });\r\n\r\n  it(\"User Issue 1466 - streaming receiver\", async function(): Promise<void> {\r\n    await beforeEachTest(ClientType.PartitionedQueue, ClientType.PartitionedQueue);\r\n    let batchMessages = [];\r\n    let index = 0;\r\n    for (index = 0; index < numberOfMessages; index++) {\r\n      if (index % (numberOfMessages / 10) === 0) {\r\n        console.log(`Sending ${index}`);\r\n        if (batchMessages.length > 0) await sender.sendBatch(batchMessages);\r\n        batchMessages = [];\r\n      }\r\n      batchMessages.push({ body: \"Message \" + index });\r\n    }\r\n    console.log(`Sending ${index}`);\r\n    await sender.sendBatch(batchMessages);\r\n    console.log(\"Sending Done, waiting for 10 seconds...\");\r\n    await delay(10000);\r\n    const receivedMsgs = [];\r\n    receiver.receive(\r\n      (msg) => {\r\n        receivedMsgs.push(msg);\r\n        console.log(msg.body);\r\n        if (receivedMsgs.length % (numberOfMessages / 10) === 0) {\r\n          console.log(\"received \" + receivedMsgs.length + \" messages till now\");\r\n        }\r\n        return Promise.resolve();\r\n      },\r\n      (err) => {\r\n        if (err) {\r\n          console.log(err.message);\r\n        }\r\n      }\r\n    );\r\n    await delay(10000000);\r\n    console.log(receivedMsgs.length);\r\n  });\r\n\r\n  it(\"User Issue 1466 - no sending\", async function(): Promise<void> {\r\n    if (!process.env.SERVICEBUS_CONNECTION_STRING) {\r\n      throw new Error(\r\n        \"Define SERVICEBUS_CONNECTION_STRING in your environment before running integration tests.\"\r\n      );\r\n    }\r\n    ns = Namespace.createFromConnectionString(process.env.SERVICEBUS_CONNECTION_STRING);\r\n\r\n    const clients = await getSenderReceiverClients(\r\n      ns,\r\n      ClientType.PartitionedQueue,\r\n      ClientType.PartitionedQueue\r\n    );\r\n    receiverClient = clients.receiverClient;\r\n    await purgeMessages();\r\n  });\r\n});\r\n"],"names":["path","this","global","type","AssertionError","getName","inspect","functionNameMatch","getMessage","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","util","core","checkError","config","utils","os.type","os.release","ConnectionContextBase","log.connectionCtxt","log.error","delay","Constants","ConnectionEvents","generate_uuid","log.utils","os","isBuffer","log.link","defaultLock","link","log.message","uuid_to_string","receiver","error","log.receiver","translate","log.messageSession","isAmqpError","ReceiverEvents","log.batching","message","ErrorNameConditionMapper","messageSession","sender","RetryOperationType","retry","log.sender","messageProperties","SenderEvents","randomNumberFromInterval","ConditionErrorNameMapper","log","SessionEvents","MessagingError","log.mgmt","types","RheaMessageUtil","string_to_uuid","RequestResponseLink","AsyncLock","log.map","log.sessionManager","log.entityCtxt","log.qClient","log.topicClient","log.subscriptionClient","log.ns","ConnectionConfig","SasTokenProvider","AadTokenProvider","msRestNodeAuth\n            .loginWithServicePrincipalSecret","ServiceBusManagementClient","should","chai","dotenv","ns","testPeekMsgsLength","senderClient","receiverClient","deadLetterClient","beforeEachTest","afterEachTest","loginWithServicePrincipalSecret","long","errorWasThrown","testBatchReceiverManualLockRenewalHappyCase","testBatchReceiverManualLockRenewalErrorOnLockExpiry","testStreamingReceiverManualLockRenewalHappyCase","testAutoLockRenewalConfigBehavior","lockDurationInMilliseconds","uncaughtErrorFromHandlers","onError","assertTimestampsAreApproximatelyEqual","unexpectedError","maxDeliveryCount","unExpectedErrorHandler","subscriptionClient","topicClient"],"mappings":"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"}